/**
 * @fileoverview –õ–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–±—ã—Ç–∏—è
 * @module EventPage
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase
const firebaseConfig = {
    apiKey: "AIzaSyDTqPgrfZ6ACzHkL3EWqTWU0m_VCM0q2vg",
    authDomain: "song-archive-389a6.firebaseapp.com",
    projectId: "song-archive-389a6",
    storageBucket: "song-archive-389a6.appspot.com",
    messagingSenderId: "1072269559435",
    appId: "1:1072269559435:web:bf93c5a8b76a7dab1f9c07"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
if (!window.firebase.apps.length) {
    window.firebase.initializeApp(firebaseConfig);
}

// –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
const db = window.firebase.firestore();
const auth = window.firebase.auth();

// ID —Å–æ–±—ã—Ç–∏—è –∏–∑ URL
const eventId = new URLSearchParams(window.location.search).get('id');

// –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const elements = {
    loading: document.getElementById('loading'),
    error: document.getElementById('error'),
    headerTitle: document.querySelector('.header-title'),
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
    eventInfo: document.getElementById('event-info'),
    eventDate: document.getElementById('event-date'),
    eventLeaderInfo: document.getElementById('event-leader-info'),
    eventLeader: document.getElementById('event-leader'),
    eventParticipantsInfo: document.getElementById('event-participants-info'),
    eventParticipantsCount: document.getElementById('event-participants-count'),
    eventCommentSection: document.getElementById('event-comment-section'),
    eventComment: document.getElementById('event-comment'),
    
    // –°–µ–∫—Ü–∏—è –ø–µ—Å–µ–Ω
    songsSection: document.getElementById('songs-section'),
    songsList: document.getElementById('songs-list'),
    songsCount: document.getElementById('songs-count'),
    launchPlayer: document.getElementById('launch-player'),
    
    // –°–µ–∫—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participantsSection: document.getElementById('participants-section'),
    participantsList: document.getElementById('participants-list'),
    
    // –°–µ–∫—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    commentsSection: document.getElementById('comments-section'),
    commentsList: document.getElementById('comments-list'),
    commentForm: document.getElementById('comment-form'),
    commentInput: document.getElementById('comment-input'),
    sendComment: document.getElementById('send-comment'),
    
    // –ö–Ω–æ–ø–∫–∏
    backBtn: document.getElementById('back-btn'),
    shareBtn: document.getElementById('share-btn'),
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —à–µ—Ä–∏–Ω–≥–∞
    shareModal: document.getElementById('share-modal'),
    shareWhatsapp: document.getElementById('share-whatsapp'),
    shareTelegram: document.getElementById('share-telegram'),
    shareCopy: document.getElementById('share-copy'),
    closeShare: document.getElementById('close-share')
};

// –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
let eventData = null;
let currentUser = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
async function init() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–±—ã—Ç–∏—è');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    applyTheme();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID —Å–æ–±—ã—Ç–∏—è
    if (!eventId) {
        showError('ID —Å–æ–±—ã—Ç–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
        auth.onAuthStateChanged(async (user) => {
            if (user) {
                currentUser = user;
                console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email);
            } else {
                console.log('üë§ –ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º');
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            await loadEvent();
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    }
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
 */
function applyTheme() {
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è
 */
async function loadEvent() {
    console.log('üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è:', eventId);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        const eventDoc = await db.collection('events').doc(eventId).get();
        
        if (!eventDoc.exists) {
            showError('–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        eventData = {
            id: eventDoc.id,
            ...eventDoc.data()
        };
        
        console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', eventData);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        displayEvent();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (eventData.setlistId) {
            await loadSongs();
        }
        
        if (eventData.participants && eventData.participants.length > 0) {
            displayParticipants();
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setupEventHandlers();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        elements.loading.style.display = 'none';
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
 */
function displayEvent() {
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    elements.headerTitle.textContent = eventData.name || '–°–æ–±—ã—Ç–∏–µ';
    
    // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    if (eventData.date) {
        const date = eventData.date.toDate ? eventData.date.toDate() : new Date(eventData.date);
        const options = { 
            day: 'numeric', 
            month: 'long', 
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        };
        elements.eventDate.textContent = date.toLocaleDateString('ru-RU', options);
    }
    
    // –õ–∏–¥–µ—Ä
    if (eventData.leaderName) {
        elements.eventLeader.textContent = eventData.leaderName;
        elements.eventLeaderInfo.style.display = 'flex';
    }
    
    // –£—á–∞—Å—Ç–Ω–∏–∫–∏
    if (eventData.participantCount > 0) {
        elements.eventParticipantsCount.textContent = eventData.participantCount;
        elements.eventParticipantsInfo.style.display = 'flex';
    }
    
    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if (eventData.comment) {
        elements.eventComment.textContent = eventData.comment;
        elements.eventCommentSection.style.display = 'block';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
    elements.eventInfo.style.display = 'block';
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Å–µ–Ω
 */
async function loadSongs() {
    console.log('üéµ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Å–µ–Ω –¥–ª—è —Å–µ—Ç–ª–∏—Å—Ç–∞:', eventData.setlistId);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç–ª–∏—Å—Ç
        const setlistDoc = await db.collection('worship_setlists').doc(eventData.setlistId).get();
        
        if (!setlistDoc.exists) {
            console.warn('‚ö†Ô∏è –°–µ—Ç–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const setlistData = setlistDoc.data();
        const setlistSongs = setlistData.songs || [];
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${setlistSongs.length} –ø–µ—Å–µ–Ω –∏–∑ —Å–µ—Ç–ª–∏—Å—Ç–∞`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Å–Ω—è—Ö
        const songsWithDetails = await Promise.all(
            setlistSongs.map(async (setlistSong) => {
                try {
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ songs –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    const songQuery = await db.collection('songs')
                        .where('name', '==', setlistSong.songId)
                        .limit(1)
                        .get();
                    
                    if (!songQuery.empty) {
                        const songData = songQuery.docs[0].data();
                        return {
                            ...songData,
                            preferredKey: setlistSong.preferredKey || songData.defaultKey,
                            order: setlistSong.order
                        };
                    }
                } catch (err) {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–µ—Å–Ω–∏:', setlistSong.songId);
                }
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                return {
                    name: setlistSong.songId,
                    preferredKey: setlistSong.preferredKey,
                    order: setlistSong.order
                };
            })
        );
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ order
        songsWithDetails.sort((a, b) => (a.order || 0) - (b.order || 0));
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Å–Ω–∏
        displaySongs(songsWithDetails);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–µ–Ω:', error);
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω
 */
function displaySongs(songs) {
    if (songs.length === 0) {
        elements.songsList.innerHTML = '<p class="empty-message">–ù–µ—Ç –ø–µ—Å–µ–Ω –≤ —Å–ø–∏—Å–∫–µ</p>';
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    elements.songsCount.textContent = `${songs.length} ${getSongWord(songs.length)}`;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π –ø–µ—Å–Ω–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (songs.length > 0) {
        console.log('üéµ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Å–Ω–∏:', songs[0]);
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Å–µ–Ω —Å –¥–∏–∑–∞–π–Ω–æ–º –∫–∞–∫ –≤ –ø–∞–Ω–µ–ª–∏ —Å–µ—Ç–ª–∏—Å—Ç–æ–≤
    elements.songsList.innerHTML = songs.map((song, index) => {
        // –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏
        const songName = song.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        const songKey = song.preferredKey || song.defaultKey || 'C';
        const songBpm = song.bpm || song.BPM || '';
        
        return `
            <div class="song-item">
                <span class="song-number">${index + 1}</span>
                <div class="song-info">
                    <div class="song-name">${songName}</div>
                    <div class="song-meta">
                        <span class="song-key">${songKey}</span>
                        ${songBpm && songBpm !== 'NA' ? `
                            <span class="song-bpm">
                                <i class="fas fa-tachometer-alt"></i> ${songBpm} BPM
                            </span>
                        ` : ''}
                    </div>
                </div>
            </div>
        `;
    }).join('');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
    elements.songsSection.style.display = 'block';
}

/**
 * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–ø–µ—Å–Ω—è"
 */
function getSongWord(count) {
    const lastDigit = count % 10;
    const lastTwoDigits = count % 100;
    
    if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
        return '–ø–µ—Å–µ–Ω';
    }
    
    if (lastDigit === 1) {
        return '–ø–µ—Å–Ω—è';
    }
    
    if (lastDigit >= 2 && lastDigit <= 4) {
        return '–ø–µ—Å–Ω–∏';
    }
    
    return '–ø–µ—Å–µ–Ω';
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
function displayParticipants() {
    const participants = eventData.participants || [];
    
    if (participants.length === 0) {
        return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
    const grouped = {};
    participants.forEach(p => {
        if (!grouped[p.instrumentName]) {
            grouped[p.instrumentName] = [];
        }
        grouped[p.instrumentName].push(p.userName);
    });
    
    // –°–æ–∑–¥–∞–µ–º HTML
    elements.participantsList.innerHTML = Object.entries(grouped).map(([instrument, names]) => `
        <div class="participant-group">
            <div class="participant-instrument">${instrument}:</div>
            <div class="participant-names">
                ${names.map(name => `<span class="participant-chip">${name}</span>`).join('')}
            </div>
        </div>
    `).join('');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
    elements.participantsSection.style.display = 'block';
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventHandlers() {
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    elements.backBtn.addEventListener('click', () => {
        window.history.back();
    });
    
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
    elements.shareBtn.addEventListener('click', () => {
        elements.shareModal.style.display = 'flex';
    });
    
    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    elements.closeShare.addEventListener('click', () => {
        elements.shareModal.style.display = 'none';
    });
    
    // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    elements.shareModal.addEventListener('click', (e) => {
        if (e.target === elements.shareModal) {
            elements.shareModal.style.display = 'none';
        }
    });
    
    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ WhatsApp
    elements.shareWhatsapp.addEventListener('click', () => {
        shareEvent('whatsapp');
    });
    
    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram
    elements.shareTelegram.addEventListener('click', () => {
        shareEvent('telegram');
    });
    
    // –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
    elements.shareCopy.addEventListener('click', () => {
        copyLink();
    });
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–µ–µ—Ä
    elements.launchPlayer.addEventListener('click', () => {
        launchPlayer();
    });
}

/**
 * –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–±—ã—Ç–∏–µ–º
 */
function shareEvent(platform) {
    const url = window.location.href;
    const title = eventData.name || '–°–æ–±—ã—Ç–∏–µ';
    const date = eventData.date ? formatShareDate(eventData.date) : '';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    let text = `üìÖ ${title}\n${date}\n`;
    
    if (eventData.leaderName) {
        text += `üé§ –õ–∏–¥–µ—Ä: ${eventData.leaderName}\n`;
    }
    
    if (eventData.participants && eventData.participants.length > 0) {
        text += '\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n';
        const grouped = {};
        eventData.participants.forEach(p => {
            if (!grouped[p.instrumentName]) {
                grouped[p.instrumentName] = [];
            }
            grouped[p.instrumentName].push(p.userName);
        });
        
        for (const [instrument, names] of Object.entries(grouped)) {
            text += `${instrument}: ${names.join(', ')}\n`;
        }
    }
    
    text += `\nüîó ${url}`;
    
    let shareUrl;
    
    if (platform === 'whatsapp') {
        shareUrl = `https://wa.me/?text=${encodeURIComponent(text)}`;
    } else if (platform === 'telegram') {
        // –î–ª—è Telegram –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –≤ —Ç–µ–∫—Å—Ç–µ
        const textWithoutLink = text.replace(`\nüîó ${url}`, '');
        shareUrl = `https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(textWithoutLink)}`;
    }
    
    if (shareUrl) {
        window.open(shareUrl, '_blank');
        elements.shareModal.style.display = 'none';
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞
 */
function formatShareDate(date) {
    const d = date.toDate ? date.toDate() : new Date(date);
    return d.toLocaleDateString('ru-RU', { 
        day: 'numeric', 
        month: 'long', 
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

/**
 * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
 */
async function copyLink() {
    try {
        await navigator.clipboard.writeText(window.location.href);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const btn = elements.shareCopy;
        const originalText = btn.innerHTML;
        btn.innerHTML = '<i class="fas fa-check"></i> –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
        btn.style.background = '#10b981';
        btn.style.color = 'white';
        
        setTimeout(() => {
            btn.innerHTML = originalText;
            btn.style.background = '';
            btn.style.color = '';
        }, 2000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É');
    }
}

/**
 * –ó–∞–ø—É—Å–∫ –ø–ª–µ–µ—Ä–∞
 */
function launchPlayer() {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–µ–µ—Ä–æ–º
    alert('–ü–ª–µ–µ—Ä –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
}

/**
 * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
 */
function showError(message) {
    elements.loading.style.display = 'none';
    elements.error.style.display = 'block';
    
    const errorText = elements.error.querySelector('p');
    if (errorText && message) {
        errorText.textContent = message;
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', init);