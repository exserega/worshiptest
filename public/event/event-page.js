/**
 * @fileoverview –õ–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–±—ã—Ç–∏—è
 * @module EventPage
 */

// Firebase —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ firebase-init.js –≤ HTML
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
if (!window.firebase || !window.firebase.apps.length) {
    console.error('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ firebase-init.js');
}

// –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
const db = window.firebase.firestore();
const auth = window.firebase.auth();

// ID —Å–æ–±—ã—Ç–∏—è –∏–∑ URL
const eventId = new URLSearchParams(window.location.search).get('id');

// –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const elements = {
    loading: document.getElementById('loading'),
    error: document.getElementById('error'),
    headerTitle: document.querySelector('.header-title'),
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
    eventInfo: document.getElementById('event-info'),
    eventDate: document.getElementById('event-date'),
    eventLeaderInfo: document.getElementById('event-leader-info'),
    eventLeader: document.getElementById('event-leader'),
    eventParticipantsInfo: document.getElementById('event-participants-info'),
    eventParticipantsCount: document.getElementById('event-participants-count'),
    eventCommentSection: document.getElementById('event-comment-section'),
    eventComment: document.getElementById('event-comment'),
    
    // –°–µ–∫—Ü–∏—è –ø–µ—Å–µ–Ω
    songsSection: document.getElementById('songs-section'),
    songsList: document.getElementById('songs-list'),
    songsCount: document.getElementById('songs-count'),
    launchPlayer: document.getElementById('launch-player'),
    
    // –°–µ–∫—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participantsSection: document.getElementById('participants-section'),
    participantsList: document.getElementById('participants-list'),
    
    // –°–µ–∫—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    commentsSection: document.getElementById('comments-section'),
    commentsList: document.getElementById('comments-list'),
    commentForm: document.getElementById('comment-form'),
    commentInput: document.getElementById('comment-input'),
    sendComment: document.getElementById('send-comment'),
    
    // –ö–Ω–æ–ø–∫–∏
    backBtn: document.getElementById('back-btn'),
    shareBtn: document.getElementById('share-btn'),
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —à–µ—Ä–∏–Ω–≥–∞
    shareModal: document.getElementById('share-modal'),
    shareWhatsapp: document.getElementById('share-whatsapp'),
    shareTelegram: document.getElementById('share-telegram'),
    shareCopy: document.getElementById('share-copy'),
    closeShare: document.getElementById('close-share')
};

// –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
let eventData = null;
let currentUser = null;
let eventSongs = []; // –ú–∞—Å—Å–∏–≤ –ø–µ—Å–µ–Ω —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–ª–µ–µ—Ä–∞

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
async function init() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–±—ã—Ç–∏—è');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    applyTheme();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID —Å–æ–±—ã—Ç–∏—è
    if (!eventId) {
        showError('ID —Å–æ–±—ã—Ç–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
        auth.onAuthStateChanged(async (user) => {
            if (user) {
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore
                try {
                    const userDoc = await db.collection('users').doc(user.uid).get();
                    if (userDoc.exists) {
                        currentUser = {
                            ...userDoc.data(),
                            uid: user.uid,
                            email: user.email
                        };
                        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', currentUser.name || currentUser.email);
                    } else {
                        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        currentUser = {
                            uid: user.uid,
                            email: user.email,
                            name: user.displayName || user.email
                        };
                        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è):', user.email);
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
                    currentUser = {
                        uid: user.uid,
                        email: user.email,
                        name: user.displayName || user.email
                    };
                }
            } else {
                console.log('üë§ –ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º');
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            await loadEvent();
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    }
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function applyTheme() {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –∏–∑ localStorage
    const savedTheme = localStorage.getItem('theme') || 'dark';
    document.documentElement.setAttribute('data-theme', savedTheme);
    document.body.setAttribute('data-theme', savedTheme);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è
 */
async function loadEvent() {
    console.log('üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è:', eventId);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        const eventDoc = await db.collection('events').doc(eventId).get();
        
        if (!eventDoc.exists) {
            showError('–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        eventData = {
            id: eventDoc.id,
            ...eventDoc.data()
        };
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –≤ –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (eventData.participants && typeof eventData.participants === 'object' && !Array.isArray(eventData.participants)) {
            eventData.participants = Object.values(eventData.participants);
        }
        
        console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', eventData);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        displayEvent();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (eventData.setlistId) {
            await loadSongs();
        }
        
        // –û—Ç–¥–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—â–∏–π—Å—è —Å–ø–∏—Å–æ–∫
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setupEventHandlers();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã—Ç—å –ø–ª–µ–µ—Ä
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('play') === 'true' && eventSongs.length > 0) {
            console.log('üé¨ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–ª–µ–µ—Ä–∞');
            setTimeout(() => launchPlayer(), 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        elements.loading.style.display = 'none';
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
 */
function displayEvent() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    let isUserParticipant = false;
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è. CurrentUser:', currentUser);
    console.log('üîç EventData leaderId:', eventData.leaderId);
    console.log('üîç EventData participants:', eventData.participants);
    
    if (currentUser && currentUser.uid) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä–æ–º
        if (eventData.leaderId === currentUser.uid) {
            isUserParticipant = true;
            console.log('‚ú® –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ª–∏–¥–µ—Ä —Å–æ–±—ã—Ç–∏—è');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (!isUserParticipant && eventData.participants && eventData.participants.length > 0) {
            isUserParticipant = eventData.participants.some(p => {
                console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞:', p, 'currentUser.uid:', currentUser.uid);
                return p.userId === currentUser.uid || p.id === currentUser.uid;
            });
            if (isUserParticipant) {
                console.log('‚ú® –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è');
            }
        }
    } else {
        console.log('‚ö†Ô∏è CurrentUser –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç uid');
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    elements.headerTitle.textContent = eventData.name || '–°–æ–±—ã—Ç–∏–µ';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç
    if (isUserParticipant) {
        const appContainer = document.getElementById('app');
        if (appContainer) {
            appContainer.classList.add('user-participant');
        }
    }
    
    // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    if (eventData.date) {
        const date = eventData.date.toDate ? eventData.date.toDate() : new Date(eventData.date);
        const options = { 
            day: 'numeric', 
            month: 'long', 
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        };
        elements.eventDate.textContent = date.toLocaleDateString('ru-RU', options);
    }
    
    // –õ–∏–¥–µ—Ä
    if (eventData.leaderName) {
        elements.eventLeader.textContent = `–í–µ–¥—É—â–∏–π: ${eventData.leaderName}`;
        elements.eventLeaderInfo.style.display = 'flex';
    }
    
    // –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—â–∏–º—Å—è —Å–ø–∏—Å–∫–æ–º
    if (eventData.participantCount > 0) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        const participantsContainer = document.createElement('div');
        participantsContainer.className = 'event-participants-container';
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const participantsSummary = document.createElement('div');
        participantsSummary.className = 'participants-summary-header';
        participantsSummary.innerHTML = `
            <div class="participants-count-info">
                <i class="fas fa-users"></i>
                <span>${eventData.participantCount} ${getParticipantWord(eventData.participantCount)}</span>
                ${isUserParticipant ? '<span class="user-participant-badge"><svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5"><path d="M20 6L9 17l-5-5"></path></svg> –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ</span>' : ''}
            </div>
            <svg class="toggle-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M6 9l6 6 6-6"></path>
            </svg>
        `;
        
        // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç)
        const participantsDetail = document.createElement('div');
        participantsDetail.className = 'participants-detail-list';
        participantsDetail.style.display = 'none';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (eventData.participants && eventData.participants.length > 0) {
            const grouped = {};
            eventData.participants.forEach(p => {
                if (!grouped[p.instrumentName]) {
                    grouped[p.instrumentName] = [];
                }
                grouped[p.instrumentName].push({
                    name: p.userName,
                    id: p.userId || p.id
                });
            });
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            const sortedInstruments = Object.entries(grouped).sort(([a], [b]) => {
                return getInstrumentOrder(a) - getInstrumentOrder(b);
            });
            
            participantsDetail.innerHTML = sortedInstruments.map(([instrument, participants]) => {
                const instrumentKey = instrument.toLowerCase()
                    .replace('—ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä–∞', 'electric_guitar')
                    .replace('–∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞', 'acoustic_guitar')
                    .replace('–±–∞—Å-–≥–∏—Ç–∞—Ä–∞', 'bass')
                    .replace(/\s+/g, '_');
                
                return `
                    <div class="participant-line">
                        <span class="participant-instrument-name" data-instrument="${instrumentKey}">${instrument}:</span>
                        <span class="participant-names-list">
                            ${participants.map(p => {
                                const isCurrentUser = currentUser && p.id === currentUser.uid;
                                return isCurrentUser ? `<strong>${p.name}</strong>` : p.name;
                            }).join(', ')}
                        </span>
                    </div>
                `;
            }).join('');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        participantsSummary.addEventListener('click', () => {
            const isOpen = participantsDetail.style.display !== 'none';
            participantsDetail.style.display = isOpen ? 'none' : 'block';
            participantsSummary.classList.toggle('open', !isOpen);
        });
        
        participantsContainer.appendChild(participantsSummary);
        participantsContainer.appendChild(participantsDetail);
        
        // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
        elements.eventParticipantsInfo.style.display = 'none';
        elements.eventParticipantsInfo.parentNode.insertBefore(participantsContainer, elements.eventParticipantsInfo.nextSibling);
    }
    
    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if (eventData.comment) {
        elements.eventComment.textContent = eventData.comment;
        elements.eventCommentSection.style.display = 'block';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
    elements.eventInfo.style.display = 'block';
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç –∏–∑ –ª—é–±–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
 */
async function getSetlistFromAnyCollection(setlistId) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ worship_setlists
    let setlistDoc = await db.collection('worship_setlists').doc(setlistId).get();
    if (setlistDoc.exists) {
        return setlistDoc;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ archive_setlists
    setlistDoc = await db.collection('archive_setlists').doc(setlistId).get();
    if (setlistDoc.exists) {
        return setlistDoc;
    }
    
    return null;
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Å–µ–Ω
 */
async function loadSongs() {
    console.log('üéµ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Å–µ–Ω –¥–ª—è —Å–µ—Ç–ª–∏—Å—Ç–∞:', eventData.setlistId);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç–ª–∏—Å—Ç –∏–∑ –ª—é–±–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        const setlistDoc = await getSetlistFromAnyCollection(eventData.setlistId);
        
        if (!setlistDoc) {
            console.warn('‚ö†Ô∏è –°–µ—Ç–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏');
            return;
        }
        
        const setlistData = setlistDoc.data();
        const setlistSongs = setlistData.songs || [];
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${setlistSongs.length} –ø–µ—Å–µ–Ω –∏–∑ —Å–µ—Ç–ª–∏—Å—Ç–∞`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Å–Ω—è—Ö
        const songsWithDetails = await Promise.all(
            setlistSongs.map(async (setlistSong) => {
                try {
                    // songId –≤ —Å–µ—Ç–ª–∏—Å—Ç–µ - —ç—Ç–æ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–µ—Å–Ω–∏, –∞ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    const songDoc = await db.collection('songs').doc(setlistSong.songId).get();
                    
                    if (songDoc.exists) {
                        const songData = songDoc.data();
                        console.log('üéµ –î–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏:', songData);
                        console.log('üéµ –ù–∞–∑–≤–∞–Ω–∏–µ:', songDoc.id);
                        console.log('üìù hasWebEdits:', songData.hasWebEdits);
                        console.log('üìù –ï—Å—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', !!songData['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)']);
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º YouTube Link –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Songs:
                        // –ü–æ–ª—è –º–æ–≥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É: 'YouTube Link', 'YouTube', 'youtube', 'youtubeLink'
                        const yt = songData['YouTube Link'] || songData['YouTube'] || songData['youtube'] || songData['youtubeLink'] || '';
                        return {
                            ...songData,
                            id: songDoc.id,
                            name: songDoc.id, // –í Firebase –Ω–∞–∑–≤–∞–Ω–∏–µ = ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
                            preferredKey: setlistSong.preferredKey || songData.defaultKey,
                            order: setlistSong.order,
                            hasWebEdits: songData.hasWebEdits || false,
                            '–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)': songData['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] || null,
                            youtubeLink: typeof yt === 'string' ? yt : ''
                        };
                    }
                } catch (err) {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–µ—Å–Ω–∏:', setlistSong.songId);
                }
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                console.log('‚ö†Ô∏è –ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î, ID:', setlistSong.songId);
                return {
                    name: '–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                    preferredKey: setlistSong.preferredKey || 'C',
                    order: setlistSong.order,
                    BPM: null
                };
            })
        );
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ order
        songsWithDetails.sort((a, b) => (a.order || 0) - (b.order || 0));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Å–Ω–∏ –¥–ª—è –ø–ª–µ–µ—Ä–∞
        eventSongs = songsWithDetails;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Å–Ω–∏
        displaySongs(songsWithDetails);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–µ–Ω:', error);
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω
 */
function displaySongs(songs) {
    if (songs.length === 0) {
        elements.songsList.innerHTML = '<p class="empty-message">–ù–µ—Ç –ø–µ—Å–µ–Ω –≤ —Å–ø–∏—Å–∫–µ</p>';
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    elements.songsCount.textContent = `${songs.length} ${getSongWord(songs.length)}`;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π –ø–µ—Å–Ω–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (songs.length > 0) {
        console.log('üéµ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Å–Ω–∏:', songs[0]);
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Å–µ–Ω —Å –¥–∏–∑–∞–π–Ω–æ–º –∫–∞–∫ –≤ –ø–∞–Ω–µ–ª–∏ —Å–µ—Ç–ª–∏—Å—Ç–æ–≤
    elements.songsList.innerHTML = songs.map((song, index) => {
        // –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏
        const songName = song.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        const songKey = song.preferredKey || song.defaultKey || 'C';
        const songBpm = song.BPM || song.bpm || song.tempo || '';
        
        return `
            <div class="song-item">
                <span class="song-number">${index + 1}</span>
                <div class="song-info">
                    <div class="song-name">${songName}</div>
                    <div class="song-meta">
                        <span class="song-key">${songKey}</span>
                        ${songBpm && songBpm !== 'NA' ? `
                            <span class="song-bpm">
                                <i class="fas fa-tachometer-alt"></i> ${songBpm} BPM
                            </span>
                        ` : ''}
                    </div>
                </div>
            </div>
        `;
    }).join('');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
    elements.songsSection.style.display = 'block';
}

/**
 * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–ø–µ—Å–Ω—è"
 */
function getSongWord(count) {
    const lastDigit = count % 10;
    const lastTwoDigits = count % 100;
    
    if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
        return '–ø–µ—Å–µ–Ω';
    }
    
    if (lastDigit === 1) {
        return '–ø–µ—Å–Ω—è';
    }
    
    if (lastDigit >= 2 && lastDigit <= 4) {
        return '–ø–µ—Å–Ω–∏';
    }
    
    return '–ø–µ—Å–µ–Ω';
}

/**
 * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—É—á–∞—Å—Ç–Ω–∏–∫"
 */
function getParticipantWord(count) {
    const lastDigit = count % 10;
    const lastTwoDigits = count % 100;
    
    if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
        return '—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤';
    }
    
    if (lastDigit === 1) {
        return '—É—á–∞—Å—Ç–Ω–∏–∫';
    }
    
    if (lastDigit >= 2 && lastDigit <= 4) {
        return '—É—á–∞—Å—Ç–Ω–∏–∫–∞';
    }
    
    return '—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤';
}

/**
 * –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
 */
function getInstrumentOrder(instrument) {
    const order = {
        '–≤–æ–∫–∞–ª': 1,
        '–∫–ª–∞–≤–∏—à–∏': 2,
        '—ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä–∞': 3,
        '–±–∞—Ä–∞–±–∞–Ω—ã': 4,
        '–∫–∞—Ö–æ–Ω': 4, // –ë–∞—Ä–∞–±–∞–Ω—ã –∏ –∫–∞—Ö–æ–Ω –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        '–±–∞—Å-–≥–∏—Ç–∞—Ä–∞': 5,
        '–∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞': 6,
        '–∑–≤—É–∫–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä': 7
    };
    
    const instrumentLower = instrument.toLowerCase();
    return order[instrumentLower] || 8; // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ - "–¥—Ä—É–≥–æ–µ" —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º 8
}

// –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —à–∞—Ä–∏–Ω–≥–µ
function getInstrumentEmoji(instrument) {
    const m = {
        '–≤–æ–∫–∞–ª': 'üé§',
        '–∫–ª–∞–≤–∏—à–∏': 'üéπ',
        '—ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä–∞': 'üé∏',
        '–∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞': 'üé∏',
        '–±–∞—Å-–≥–∏—Ç–∞—Ä–∞': 'üé∏',
        '–±–∞—Ä–∞–±–∞–Ω—ã': 'ü•Å',
        '–∫–∞—Ö–æ–Ω': 'ü•Å',
        '–∑–≤—É–∫–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä': 'üéöÔ∏è'
    };
    const key = (instrument || '').toLowerCase();
    return m[key] || 'üéµ';
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
function displayParticipants() {
    const participants = eventData.participants || [];
    
    if (participants.length === 0) {
        return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
    const grouped = {};
    participants.forEach(p => {
        if (!grouped[p.instrumentName]) {
            grouped[p.instrumentName] = [];
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å –∏–º–µ–Ω–µ–º –∏ ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        grouped[p.instrumentName].push({
            name: p.userName,
            id: p.userId || p.id
        });
    });
    
    // –°–æ–∑–¥–∞–µ–º HTML
    elements.participantsList.innerHTML = Object.entries(grouped).map(([instrument, names]) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è data-attribute
        const instrumentKey = instrument.toLowerCase()
            .replace('—ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä–∞', 'electric_guitar')
            .replace('–∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞', 'acoustic_guitar')
            .replace('–±–∞—Å-–≥–∏—Ç–∞—Ä–∞', 'bass')
            .replace(/\s+/g, '_');
        
        return `
            <div class="participant-group">
                <div class="participant-instrument" data-instrument="${instrumentKey}">${instrument}:</div>
                <div class="participant-names">
                    ${names.map(participant => {
                        const isCurrentUser = currentUser && participant.id === currentUser.uid;
                        return `<span class="participant-chip ${isCurrentUser ? 'current-user' : ''}">${participant.name}</span>`;
                    }).join('')}
                </div>
            </div>
        `;
    }).join('');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
    elements.participantsSection.style.display = 'block';
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventHandlers() {
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    elements.backBtn.addEventListener('click', () => {
        window.history.back();
    });
    
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
    elements.shareBtn.addEventListener('click', () => {
        elements.shareModal.style.display = 'flex';
    });
    
    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    elements.closeShare.addEventListener('click', () => {
        elements.shareModal.style.display = 'none';
    });
    
    // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    elements.shareModal.addEventListener('click', (e) => {
        if (e.target === elements.shareModal) {
            elements.shareModal.style.display = 'none';
        }
    });
    
    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ WhatsApp
    elements.shareWhatsapp.addEventListener('click', () => {
        shareEvent('whatsapp');
    });
    
    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram
    elements.shareTelegram.addEventListener('click', () => {
        shareEvent('telegram');
    });
    
    // –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
    elements.shareCopy.addEventListener('click', () => {
        copyLink();
    });
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–µ–µ—Ä
    elements.launchPlayer.addEventListener('click', () => {
        launchPlayer();
    });
}

/**
 * –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–±—ã—Ç–∏–µ–º
 */
function shareEvent(platform) {
    const url = window.location.href;
    const title = eventData.name || '–°–æ–±—ã—Ç–∏–µ';
    const date = eventData.date ? formatShareDate(eventData.date) : '';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —à–∞–ø–∫—É (–±–µ–∑ –≤–µ—Ä—Ö–Ω–µ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ)
    let text = `üìÖ ${title}\n${date}\n`;
    
    if (eventData.leaderName) {
        text += `üé§ –õ–∏–¥–µ—Ä: ${eventData.leaderName}\n`;
    }
    
    if (eventData.participants && eventData.participants.length > 0) {
        text += '\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n';
        const grouped = {};
        eventData.participants.forEach(p => {
            if (!grouped[p.instrumentName]) {
                grouped[p.instrumentName] = [];
            }
            grouped[p.instrumentName].push(p.userName);
        });
        const sortedGroups = Object.entries(grouped).sort(([a], [b]) => getInstrumentOrder(a) - getInstrumentOrder(b));
        for (const [instrument, names] of sortedGroups) {
            const emoji = getInstrumentEmoji(instrument);
            text += `${emoji} ${instrument}: ${names.join(', ')}\n`;
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω —Å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—è–º–∏
    if (eventSongs && eventSongs.length > 0) {
        text += `\nüé∂ –°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω:`;
        eventSongs.forEach((s, idx) => {
            const name = s.name || `–ü–µ—Å–Ω—è ${idx + 1}`;
            const key = s.preferredKey || s.defaultKey || '';
            if (platform === 'telegram' && s.youtubeLink) {
                // –¢–µ–ª–µ–≥—Ä–∞–º —á–µ—Ä–µ–∑ t.me/share/url –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML/Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π URL –≤ —Å–∫–æ–±–∫–∞—Ö, —á—Ç–æ–±—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å —á–∏—Ç–∞–µ–º—ã–º, –∞ —Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π.
                text += `\n‚Ä¢ ${name}${key ? ` ‚Äî ${key}` : ''} (${s.youtubeLink})`;
            } else {
                text += `\n‚Ä¢ ${name}${key ? ` ‚Äî ${key}` : ''}`;
            }
        });
        text += '\n';
    }
    
    text += `\nüîó ${url}`;
    
    let shareUrl;
    
    if (platform === 'whatsapp') {
        shareUrl = `https://wa.me/?text=${encodeURIComponent(text)}`;
    } else if (platform === 'telegram') {
        // –î–ª—è Telegram: –ø–µ—Ä–µ–¥–∞–µ–º url –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, –∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —É–±–∏—Ä–∞–µ–º –Ω–∏–∂–Ω—é—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª—è
        const textWithoutBottomLink = text.replace(`\nüîó ${url}`, '');
        shareUrl = `https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(textWithoutBottomLink)}`;
    }
    
    if (shareUrl) {
        window.open(shareUrl, '_blank');
        elements.shareModal.style.display = 'none';
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞
 */
function formatShareDate(date) {
    const d = date.toDate ? date.toDate() : new Date(date);
    return d.toLocaleDateString('ru-RU', { 
        day: 'numeric', 
        month: 'long', 
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

/**
 * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
 */
async function copyLink() {
    try {
        await navigator.clipboard.writeText(window.location.href);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const btn = elements.shareCopy;
        const originalText = btn.innerHTML;
        btn.innerHTML = '<i class="fas fa-check"></i> –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
        btn.style.background = '#10b981';
        btn.style.color = 'white';
        
        setTimeout(() => {
            btn.innerHTML = originalText;
            btn.style.background = '';
            btn.style.color = '';
        }, 2000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É');
    }
}

/**
 * –ó–∞–ø—É—Å–∫ –ø–ª–µ–µ—Ä–∞
 */
async function launchPlayer() {
    console.log('üé¨ –ó–∞–ø—É—Å–∫ –ø–ª–µ–µ—Ä–∞ —Å–æ–±—ã—Ç–∏—è');
    
    if (!eventSongs || eventSongs.length === 0) {
        alert('–ù–µ—Ç –ø–µ—Å–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
    }
    
    try {
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        document.body.style.overflow = 'hidden';
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ø–ª–µ–µ—Ä–∞ –∏ overrides
        const [{ openEventPlayer }, overrides] = await Promise.all([
            import('/src/modules/events/eventPlayer.js'),
            import('/src/api/overrides.js')
        ]);
        
        // –ï—Å–ª–∏ –≥–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º ‚Äî –ø–æ–¥–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ —Ñ–∏–ª–∏–∞–ª—É —Å–æ–±—ã—Ç–∏—è
        if (!currentUser) {
            const branchId = eventData.branchId || null;
            for (let i = 0; i < eventSongs.length; i++) {
                const s = eventSongs[i];
                try {
                    await new Promise((resolve) => {
                        // –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: —á–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å—Ä–∞–∑—É –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                        const unsub = overrides.subscribeResolvedContent(s.id, ({ content }) => {
                            if (content != null) {
                                s['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] = content;
                            }
                            if (unsub) unsub();
                            resolve();
                        }, null, { viewerBranchId: branchId });
                        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è override
                        setTimeout(() => { try { unsub && unsub(); } catch(e){} resolve(); }, 300);
                    });
                } catch (e) { /* ignore */ }
            }
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–ª–µ–µ—Ä —Å –ø–µ—Å–Ω—è–º–∏ —Å–æ–±—ã—Ç–∏—è (EventPlayer —Å–∞–º –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        await openEventPlayer(eventData.id, eventSongs, 0);
        
        console.log('‚úÖ –ü–ª–µ–µ—Ä –æ—Ç–∫—Ä—ã—Ç');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–µ–µ—Ä–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–ª–µ–µ—Ä–∞');
    }
}

/**
 * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
 */
function showError(message) {
    elements.loading.style.display = 'none';
    elements.error.style.display = 'block';
    
    const errorText = elements.error.querySelector('p');
    if (errorText && message) {
        errorText.textContent = message;
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', init);