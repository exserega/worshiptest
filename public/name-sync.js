// –ú–æ–¥—É–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–±—ã—Ç–∏—è—Ö

let syncAttempts = 0;
const MAX_ATTEMPTS = 10;

document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        initNameSync();
    }, 2000);
});

function initNameSync() {
    if (!window.firebase || !window.firebase.firestore) {
        console.error('Firebase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫');
        if (syncAttempts < MAX_ATTEMPTS) {
            syncAttempts++;
            setTimeout(initNameSync, 1000);
        }
        return;
    }
    
    const db = firebase.firestore();
    
    async function syncUserNameInEvents(userId, newName) {
        try {
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, newName });
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏–¥–µ—Ä–æ–º
            const leaderEventsSnapshot = await db.collection('events')
                .where('leaderId', '==', userId)
                .get();
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä: ${leaderEventsSnapshot.size}`);
                
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            const allEventsSnapshot = await db.collection('events').get();
            console.log(`üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${allEventsSnapshot.size}`);
            
            const batch = db.batch();
            let updateCount = 0;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ª–∏–¥–µ—Ä
            leaderEventsSnapshot.forEach(doc => {
                batch.update(doc.ref, {
                    leaderName: newName,
                    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
                });
                updateCount++;
                console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º leaderName –≤ —Å–æ–±—ã—Ç–∏–∏ ${doc.id}`);
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–∞—Å—Ç–Ω–∏–∫
            allEventsSnapshot.forEach(doc => {
                const eventData = doc.data();
                let needsUpdate = false;
                const updatedParticipants = {};
                
                if (eventData.participants) {
                    Object.entries(eventData.participants).forEach(([key, participant]) => {
                        if (participant.userId === userId) {
                            updatedParticipants[key] = {
                                ...participant,
                                userName: newName
                            };
                            needsUpdate = true;
                            console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${key} –≤ —Å–æ–±—ã—Ç–∏–∏ ${doc.id}`);
                        } else {
                            updatedParticipants[key] = participant;
                        }
                    });
                    
                    if (needsUpdate) {
                        batch.update(doc.ref, {
                            participants: updatedParticipants,
                            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
                        });
                        updateCount++;
                    }
                }
            });
            
            if (updateCount > 0) {
                await batch.commit();
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updateCount} —Å–æ–±—ã—Ç–∏–π`);
            } else {
                console.log('‚ÑπÔ∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            }
            
            return updateCount;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω–∏:', error);
            throw error;
        }
    }
    
    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π
    window.syncUserNameInEvents = syncUserNameInEvents;
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é editName
    if (window.editName) {
        console.log('üéØ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è editName, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
        
        const originalEditName = window.editName;
        
        window.editName = async function() {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase Auth
            const auth = firebase.auth();
            const user = auth.currentUser;
            
            if (!user) {
                console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                originalEditName();
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore
            let oldName = null;
            try {
                const userDoc = await db.collection('users').doc(user.uid).get();
                if (userDoc.exists) {
                    oldName = userDoc.data().name;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            }
            
            console.log('üìù editName –≤—ã–∑–≤–∞–Ω–∞. –°—Ç–∞—Ä–æ–µ –∏–º—è:', oldName);
            
            // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            originalEditName();
            
            // –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            let attempts = 0;
            const checkInterval = setInterval(async () => {
                attempts++;
                
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Firestore
                    const userDoc = await db.collection('users').doc(user.uid).get();
                    if (userDoc.exists) {
                        const newName = userDoc.data().name;
                        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${attempts}: name –≤ Firestore = ${newName}, oldName = ${oldName}`);
                        
                        if (newName && newName !== oldName) {
                            clearInterval(checkInterval);
                            console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏:', oldName, '->', newName);
                            console.log('üìç userId:', user.uid);
                            
                            try {
                                const updateCount = await syncUserNameInEvents(user.uid, newName);
                                console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${updateCount}`);
                                
                                if (updateCount > 0) {
                                    setTimeout(() => {
                                        alert(`‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ ${updateCount} —Å–æ–±—ã—Ç–∏—è—Ö!`);
                                    }, 100);
                                }
                            } catch (error) {
                                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
                                alert('‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –≤ —Å–æ–±—ã—Ç–∏—è—Ö');
                            }
                        }
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏:', error);
                }
                
                if (attempts >= 10) {
                    clearInterval(checkInterval);
                    console.log('‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏');
                }
            }, 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        };
        
        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    } else {
        console.warn('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è editName –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        if (syncAttempts < MAX_ATTEMPTS) {
            syncAttempts++;
            setTimeout(initNameSync, 1000);
        }
    }
}

console.log('üì¶ –ú–æ–¥—É–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω');