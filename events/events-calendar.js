/**
 * @fileoverview –ú–æ–¥—É–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–æ–±—ã—Ç–∏–π
 * @module EventsCalendar
 */

import logger from '../src/utils/logger.js';
import { getCurrentUser } from '../src/modules/auth/authCheck.js';
import { getEventsByBranch, deleteEvent } from '../src/modules/events/eventsApi.js';
import { canManageEvents } from '../src/modules/permissions/permissions.js';

export class EventsCalendar {
    constructor() {
        this.currentDate = new Date();
        this.selectedDate = null;
        this.events = [];
        this.container = document.getElementById('calendarContainer');
        this.loadingIndicator = document.getElementById('loadingIndicator');
        this.monthTitle = document.getElementById('monthTitle');
        this.calendarDays = document.getElementById('calendarDays');
        this.weekdays = document.getElementById('weekdays');
        this.selectedDateEvents = document.getElementById('selectedDateEvents');
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.prevMonthBtn = document.getElementById('prevMonthBtn');
        this.nextMonthBtn = document.getElementById('nextMonthBtn');
        this.createEventBtn = document.getElementById('createEventBtn');
        this.listViewBtn = document.getElementById('listViewBtn');
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∞
        this.viewMode = 'calendar'; // 'calendar' –∏–ª–∏ 'list'
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        this.handlePrevMonth = this.handlePrevMonth.bind(this);
        this.handleNextMonth = this.handleNextMonth.bind(this);
        this.handleCreateEvent = this.handleCreateEvent.bind(this);
        this.handleDayClick = this.handleDayClick.bind(this);
        this.handleViewToggle = this.handleViewToggle.bind(this);
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     */
    async init() {
        logger.log('üìÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–æ–±—ã—Ç–∏–π');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.showLoading(true);
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            await this.loadEvents();
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            this.render();
            
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            this.attachEventHandlers();
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoading(false);
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
            this.showLoading(false);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è');
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ Firebase
     */
    async loadEvents() {
        const user = getCurrentUser();
        if (!user || !user.branchId) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —Ñ–∏–ª–∏–∞–ª');
        }
        
        logger.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞: ${user.branchId}`);
        this.events = await getEventsByBranch(user.branchId);
        logger.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${this.events.length}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (this.events.length > 0) {
            logger.log('–ü—Ä–∏–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:', this.events.slice(0, 3));
        }
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     */
    render() {
        // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Å–ø–∏—Å–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
        if (this.viewMode === 'list') {
            this.renderListView();
            return;
        }
        
        // –û–±—ã—á–Ω—ã–π –≤–∏–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞
        this.updateMonthTitle();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        this.renderWeekdays();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
        this.renderDays();
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (this.events.length > 0) {
            const firstEvent = this.events[0];
            logger.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:', {
                id: firstEvent.id,
                name: firstEvent.name,
                date: firstEvent.date,
                dateType: typeof firstEvent.date,
                hasToDate: !!(firstEvent.date && firstEvent.date.toDate),
                hasSeconds: !!(firstEvent.date && firstEvent.date.seconds),
                fullEvent: firstEvent
            });
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–µ—Å—è—Ü–∞
     */
    updateMonthTitle() {
        const monthNames = [
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
            '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
        ];
        
        const month = monthNames[this.currentDate.getMonth()];
        const year = this.currentDate.getFullYear();
        this.monthTitle.textContent = `${month} ${year}`;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
     */
    renderWeekdays() {
        const weekdayNames = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
        
        this.weekdays.innerHTML = weekdayNames
            .map(day => `<div class="calendar-weekday">${day}</div>`)
            .join('');
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
     */
    renderDays() {
        this.calendarDays.innerHTML = '';
        
        const year = this.currentDate.getFullYear();
        const month = this.currentDate.getMonth();
        
        // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        
        // –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è (0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        let startingDayOfWeek = firstDay.getDay();
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0
        startingDayOfWeek = startingDayOfWeek === 0 ? 6 : startingDayOfWeek - 1;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        const prevMonthLastDay = new Date(year, month, 0).getDate();
        for (let i = startingDayOfWeek - 1; i >= 0; i--) {
            const day = prevMonthLastDay - i;
            this.createDayElement(new Date(year, month - 1, day), true);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        for (let day = 1; day <= lastDay.getDate(); day++) {
            this.createDayElement(new Date(year, month, day), false);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –Ω–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        const totalDays = this.calendarDays.children.length;
        const lastDayOfWeek = lastDay.getDay();
        
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (0), –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        if (lastDayOfWeek !== 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏
            const daysToAdd = 7 - (totalDays % 7);
            if (daysToAdd < 7) {
                for (let day = 1; day <= daysToAdd; day++) {
                    this.createDayElement(new Date(year, month + 1, day), true);
                }
            }
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–Ω—è
     */
    createDayElement(date, isOtherMonth) {
        const dayEl = document.createElement('div');
        dayEl.className = 'calendar-day';
        
        if (isOtherMonth) {
            dayEl.classList.add('other-month');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º
        const today = new Date();
        if (date.toDateString() === today.toDateString()) {
            dayEl.classList.add('today');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –¥–µ–Ω—å
        if (this.selectedDate && date.toDateString() === this.selectedDate.toDateString()) {
            dayEl.classList.add('selected');
        }
        
        // –ù–æ–º–µ—Ä –¥–Ω—è
        const dayNumber = document.createElement('div');
        dayNumber.className = 'calendar-day-number';
        dayNumber.textContent = date.getDate();
        dayEl.appendChild(dayNumber);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
        const dayEvents = this.getEventsForDay(date);
        if (dayEvents.length > 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            dayEl.classList.add('has-events');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ —Å–æ–±—ã—Ç–∏–∏ —ç—Ç–æ–≥–æ –¥–Ω—è
            const currentUser = getCurrentUser();
            if (currentUser && currentUser.uid) {
                const isUserParticipant = dayEvents.some(event => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä–æ–º
                    if (event.leaderId === currentUser.uid) {
                        logger.log(`üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${currentUser.name} - –ª–∏–¥–µ—Ä —Å–æ–±—ã—Ç–∏—è ${event.name}`);
                        return true;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    if (event.participants && Array.isArray(event.participants)) {
                        const isParticipant = event.participants.some(p => p.id === currentUser.uid);
                        if (isParticipant) {
                            logger.log(`üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${currentUser.name} - —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è ${event.name}`);
                        }
                        return isParticipant;
                    }
                    
                    return false;
                });
                
                if (isUserParticipant) {
                    dayEl.classList.add('user-participant');
                    logger.log(`‚ú® –î–µ–Ω—å ${date.toDateString()} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –¥–µ–Ω—å —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–±—ã—Ç–∏–π
            const eventsEl = document.createElement('div');
            eventsEl.className = 'calendar-day-events';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π (–º–∞–∫—Å–∏–º—É–º 3)
            const dotsCount = Math.min(dayEvents.length, 3);
            for (let i = 0; i < dotsCount; i++) {
                const dot = document.createElement('span');
                dot.className = 'calendar-event-dot';
                eventsEl.appendChild(dot);
            }
            
            dayEl.appendChild(eventsEl);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏–π –≤ —ç–ª–µ–º–µ–Ω—Ç–µ
        dayEl.dataset.date = date.toISOString();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏–π, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ
        const fullEventsData = dayEvents.map(event => ({
            id: event.id,
            name: event.name,
            date: event.date,
            participants: event.participants || [],
            participantCount: event.participantCount || 0,
            leader: event.leader || '',
            branchId: event.branchId
        }));
        
        dayEl.dataset.events = JSON.stringify(fullEventsData);
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è ${date.toDateString()}:`, fullEventsData); // –û—Ç–ª–∞–¥–∫–∞
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        this.calendarDays.appendChild(dayEl);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
     */
    getEventsForDay(date) {
        const events = this.events.filter(event => {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
            let eventDate;
            
            if (event.date) {
                // –ï—Å–ª–∏ date - —Å—Ç—Ä–æ–∫–∞
                if (typeof event.date === 'string') {
                    eventDate = new Date(event.date);
                } 
                // –ï—Å–ª–∏ date - Firebase Timestamp
                else if (event.date.toDate) {
                    eventDate = event.date.toDate();
                }
                // –ï—Å–ª–∏ date - –æ–±—ä–µ–∫—Ç Date
                else if (event.date instanceof Date) {
                    eventDate = event.date;
                }
                // –ï—Å–ª–∏ date - –æ–±—ä–µ–∫—Ç —Å seconds (Firestore timestamp)
                else if (event.date.seconds) {
                    eventDate = new Date(event.date.seconds * 1000);
                }
            }
            
            if (!eventDate || isNaN(eventDate.getTime())) {
                logger.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è:', event);
                return false;
            }
            
            return eventDate.toDateString() === date.toDateString();
        });
        
        if (events.length > 0) {
            logger.log(`–°–æ–±—ã—Ç–∏—è –¥–ª—è ${date.toDateString()}:`, events);
        }
        
        return events;
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventHandlers() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        this.prevMonthBtn.addEventListener('click', () => this.navigateMonth(-1));
        this.nextMonthBtn.addEventListener('click', () => this.navigateMonth(1));
        
        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        const createEventBtn = document.getElementById('createEventBtn');
        if (createEventBtn) {
            createEventBtn.addEventListener('click', () => this.handleCreateEvent());
        }
        
        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞
        if (this.listViewBtn) {
            this.listViewBtn.style.display = 'block';
            this.listViewBtn.addEventListener('click', () => this.handleViewToggle());
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—è–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        this.calendarDays.addEventListener('click', (e) => {
            const dayEl = e.target.closest('.calendar-day');
            if (dayEl && !dayEl.classList.contains('other-month')) {
                this.handleDayClick({ target: dayEl });
            }
        });
    }
    
    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
     * @param {number} direction - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (-1 –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, 1 –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ)
     */
    navigateMonth(direction) {
        this.currentDate.setMonth(this.currentDate.getMonth() + direction);
        this.render();
    }
    
    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
     */
    handlePrevMonth() {
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
        this.render();
    }
    
    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
     */
    handleNextMonth() {
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
        this.render();
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—é
     */
    handleDayClick(event) {
        const dayEl = event.target.closest('.calendar-day');
        if (!dayEl || dayEl.classList.contains('other-month')) return;
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
        const prevSelected = this.calendarDays.querySelector('.calendar-day.selected');
        if (prevSelected) {
            prevSelected.classList.remove('selected');
        }
        
        // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
        dayEl.classList.add('selected');
        
        const date = new Date(dayEl.dataset.date);
        const events = JSON.parse(dayEl.dataset.events || '[]');
        
        this.selectedDate = date;
        
        logger.log(`üìÖ –í—ã–±—Ä–∞–Ω –¥–µ–Ω—å: ${date.toLocaleDateString()}, —Å–æ–±—ã—Ç–∏–π: ${events.length}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –Ω–∏–∂–Ω–µ–º –±–ª–æ–∫–µ
        this.showSelectedDateEvents(date, events);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
     */
    showSelectedDateEvents(date, events) {
        const container = this.selectedDateEvents;
        
        if (events.length === 0) {
            // –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π
            container.innerHTML = `
                <div class="selected-date-header">
                    <h3 class="selected-date-title">${this.formatDate(date)}</h3>
                    ${canManageEvents() ? `
                        <button class="icon-button" onclick="window.eventsCalendar.handleCreateEvent(new Date('${date.toISOString()}'))" title="–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ">
                            <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                                <path d="M10 5V15M5 10H15" stroke-width="2" stroke-linecap="round"/>
                            </svg>
                        </button>
                    ` : ''}
                </div>
                <div class="no-date-selected">
                    <p>–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</p>
                </div>
            `;
        } else {
            // –ï—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
            console.log('üìÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π:', events); // –û—Ç–ª–∞–¥–∫–∞
            
            const eventsHTML = events.map(event => {
                console.log(`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è ${event.id}:`, event); // –û—Ç–ª–∞–¥–∫–∞
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const currentUser = getCurrentUser();
                let isUserParticipant = false;
                
                if (currentUser && currentUser.uid) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä–æ–º
                    if (event.leaderId === currentUser.uid) {
                        isUserParticipant = true;
                        logger.log(`‚ú® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ª–∏–¥–µ—Ä —Å–æ–±—ã—Ç–∏—è ${event.name}`);
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    if (!isUserParticipant && event.participants && Array.isArray(event.participants)) {
                        isUserParticipant = event.participants.some(p => p.id === currentUser.uid);
                        if (isUserParticipant) {
                            logger.log(`‚ú® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è ${event.name}`);
                        }
                    }
                }
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                let participantsHTML = '';
                if (event.participants && Array.isArray(event.participants)) {
                    console.log(`  üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è:`, event.participants); // –û—Ç–ª–∞–¥–∫–∞
                    
                    // –ú–∞–ø–ø–∏–Ω–≥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —ç–º–æ–¥–∑–∏
                    const instrumentIcons = {
                        'vocals': 'üé§',
                        '–≤–æ–∫–∞–ª': 'üé§',
                        'guitar': 'üé∏',
                        '–≥–∏—Ç–∞—Ä–∞': 'üé∏',
                        'electric_guitar': 'üé∏',
                        '—ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä–∞': 'üé∏',
                        'acoustic_guitar': 'üé∏',
                        '–∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞': 'üé∏',
                        'bass': 'üé∏',
                        '–±–∞—Å': 'üé∏',
                        '–±–∞—Å-–≥–∏—Ç–∞—Ä–∞': 'üé∏',
                        'keys': 'üéπ',
                        'keyboard': 'üéπ',
                        'piano': 'üéπ',
                        '–∫–ª–∞–≤–∏—à–∏': 'üéπ',
                        'drums': 'ü•Å',
                        '–±–∞—Ä–∞–±–∞–Ω—ã': 'ü•Å',
                        'cajon': 'ü™ò',
                        '–∫–∞—Ö–æ–Ω': 'ü™ò',
                        'sound': 'üéõÔ∏è',
                        '–∑–≤—É–∫–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä': 'üéõÔ∏è',
                        '–∑–≤—É–∫': 'üéõÔ∏è',
                        'other': 'üéµ',
                        '–¥—Ä—É–≥–æ–µ': 'üéµ'
                    };
                    
                    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
                    const instrumentGroups = {};
                    
                    event.participants
                        .filter(p => p.userName || p.name)
                        .forEach(p => {
                            const instrumentName = p.instrumentName || p.instrument || '–£—á–∞—Å—Ç–Ω–∏–∫';
                            if (!instrumentGroups[instrumentName]) {
                                instrumentGroups[instrumentName] = {
                                    names: [],
                                    icon: instrumentIcons[(p.instrument || '').toLowerCase()] || 
                                          instrumentIcons[(p.instrumentName || '').toLowerCase()] || 
                                          'üéµ'
                                };
                            }
                            instrumentGroups[instrumentName].names.push(p.userName || p.name);
                        });
                    
                    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML
                    const instrumentLines = Object.entries(instrumentGroups).map(([instrument, data]) => {
                        const names = data.names.join(', ');
                        return `<div class="instrument-line">${data.icon}${instrument} - ${names}</div>`;
                    });
                    
                    if (instrumentLines.length > 0) {
                        participantsHTML = `<div class="event-participants-compact">${instrumentLines.join('')}</div>`;
                    }
                    
                    console.log(`  üìù –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã`); // –û—Ç–ª–∞–¥–∫–∞
                } else {
                    console.log(`  ‚ö†Ô∏è –ù–µ—Ç –º–∞—Å—Å–∏–≤–∞ participants`); // –û—Ç–ª–∞–¥–∫–∞
                }
                
                // –í–µ–¥—É—â–∏–π (—Ä–∞–Ω–µ–µ –ª–∏–¥–µ—Ä)
                const leaderHTML = event.leader ? `<div class="event-leader">üë§ –í–µ–¥—É—â–∏–π: ${event.leader}</div>` : '';
                console.log(`  üë§ –í–µ–¥—É—â–∏–π: ${event.leader || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`); // –û—Ç–ª–∞–¥–∫–∞
                
                // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                let actionButtons = '';
                if (canManageEvents()) {
                    actionButtons = `
                        <div class="event-actions">
                            <button class="action-btn edit-btn" onclick="window.eventsCalendar.handleEditEvent('${event.id}'); event.stopPropagation();" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                            </button>
                            <button class="action-btn delete-btn" onclick="window.eventsCalendar.handleDeleteEvent('${event.id}', '${event.name.replace(/'/g, "\\'")}'); event.stopPropagation();" title="–£–¥–∞–ª–∏—Ç—å">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M3 6H5H21" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M10 11V17" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M14 11V17" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                            </button>
                        </div>
                    `;
                }
                
                return `
                    <div class="event-card ${isUserParticipant ? 'user-participant' : ''}" onclick="window.location.href='/public/event/?id=${event.id}'">
                        <div class="event-info">
                            <div class="event-header">
                                <span class="event-time">${this.formatTime(event.date)}</span>
                                <span class="event-name">${event.name}</span>
                            </div>
                            ${leaderHTML}
                            ${participantsHTML}
                        </div>
                        <div class="event-footer">
                            <span class="event-count">${event.songCount || 0} –ø–µ—Å–µ–Ω</span>
                            ${actionButtons}
                        </div>
                    </div>
                `;
            }).join('');
            
            container.innerHTML = `
                <div class="selected-date-header">
                    <h3 class="selected-date-title">${this.formatDate(date)}</h3>
                    ${canManageEvents() ? `
                        <button class="icon-button" onclick="window.eventsCalendar.handleCreateEvent(new Date('${date.toISOString()}'))" title="–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ">
                            <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                                <path d="M10 5V15M5 10H15" stroke-width="2" stroke-linecap="round"/>
                            </svg>
                        </button>
                    ` : ''}
                </div>
                <div class="events-list">
                    ${eventsHTML}
                </div>
            `;
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     */
    formatDate(date) {
        const options = { day: 'numeric', month: 'long', year: 'numeric' };
        return date.toLocaleDateString('ru-RU', options);
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    formatTime(dateData) {
        let date;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if (typeof dateData === 'string') {
            date = new Date(dateData);
        } else if (dateData && dateData.toDate) {
            date = dateData.toDate();
        } else if (dateData instanceof Date) {
            date = dateData;
        } else if (dateData && dateData.seconds) {
            date = new Date(dateData.seconds * 1000);
        } else {
            return '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
        }
        
        if (isNaN(date.getTime())) {
            return '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
        }
        
        return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è
     */
    createEventCard(event, showDate = false) {
        const currentUser = getCurrentUser();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        let isUserParticipant = false;
        if (currentUser && currentUser.uid) {
            if (event.leaderId === currentUser.uid) {
                isUserParticipant = true;
            }
            if (!isUserParticipant && event.participants && Array.isArray(event.participants)) {
                isUserParticipant = event.participants.some(p => p.id === currentUser.uid);
            }
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
        const eventDate = event.date.toDate ? event.date.toDate() : new Date(event.date);
        const dateStr = showDate ? eventDate.toLocaleDateString('ru-RU', { 
            day: 'numeric', 
            month: 'short',
            weekday: 'short'
        }) : '';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–µ
        const leaderHTML = event.leader ? `
            <div class="event-leader">
                <i class="fas fa-user"></i>
                <span>${event.leader}</span>
            </div>
        ` : '';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
        const participantsHTML = event.participants && event.participants.length > 0 ? `
            <div class="event-participants">
                <i class="fas fa-users"></i>
                <span>${event.participants.length} —É—á–∞—Å—Ç.</span>
            </div>
        ` : '';
        
        return `
            <div class="event-card ${isUserParticipant ? 'user-participant' : ''}" onclick="window.location.href='/public/event/?id=${event.id}'">
                <div class="event-info">
                    <div class="event-header">
                        ${showDate ? `<span class="event-date">${dateStr}</span>` : ''}
                        <span class="event-time">${this.formatTime(event.date)}</span>
                        <span class="event-name">${event.name}</span>
                    </div>
                    ${leaderHTML}
                    ${participantsHTML}
                </div>
                <div class="event-footer">
                    <span class="event-count">${event.songCount || 0} –ø–µ—Å–µ–Ω</span>
                    ${canManageEvents() ? `
                        <div class="event-actions" onclick="event.stopPropagation();">
                            <button class="icon-button small" onclick="window.eventsCalendar.handleEditEvent('${event.id}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="icon-button small delete" onclick="window.eventsCalendar.handleDeleteEvent('${event.id}')" title="–£–¥–∞–ª–∏—Ç—å">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    ` : ''}
                </div>
            </div>
        `;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    renderListView() {
        logger.log('üìã –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞
        this.weekdays.style.display = 'none';
        this.calendarDays.style.display = 'none';
        
        // –û—á–∏—â–∞–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º selectedDateEvents –¥–ª—è —Å–ø–∏—Å–∫–∞
        this.selectedDateEvents.innerHTML = '';
        this.selectedDateEvents.style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        this.monthTitle.textContent = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è';
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
        const sortedEvents = [...this.events].sort((a, b) => {
            const dateA = a.date.toDate ? a.date.toDate() : new Date(a.date);
            const dateB = b.date.toDate ? b.date.toDate() : new Date(b.date);
            return dateA - dateB;
        });
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const futureEvents = sortedEvents.filter(event => {
            const eventDate = event.date.toDate ? event.date.toDate() : new Date(event.date);
            eventDate.setHours(0, 0, 0, 0);
            return eventDate >= today;
        });
        
        if (futureEvents.length === 0) {
            this.selectedDateEvents.innerHTML = `
                <div class="no-events-message">
                    <p>–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π</p>
                </div>
            `;
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        const eventsByMonth = {};
        futureEvents.forEach(event => {
            const eventDate = event.date.toDate ? event.date.toDate() : new Date(event.date);
            const monthKey = `${eventDate.getFullYear()}-${eventDate.getMonth()}`;
            const monthName = eventDate.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' });
            
            if (!eventsByMonth[monthKey]) {
                eventsByMonth[monthKey] = {
                    name: monthName,
                    events: []
                };
            }
            eventsByMonth[monthKey].events.push(event);
        });
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        let html = '<div class="events-list-view">';
        
        Object.values(eventsByMonth).forEach(monthData => {
            html += `
                <div class="month-section">
                    <h3 class="month-section-title">${monthData.name}</h3>
                    <div class="month-events">
            `;
            
            html += monthData.events.map(event => this.createEventCard(event, true)).join('');
            
            html += `
                    </div>
                </div>
            `;
        });
        
        html += '</div>';
        this.selectedDateEvents.innerHTML = html;
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     */
    handleViewToggle() {
        this.viewMode = this.viewMode === 'calendar' ? 'list' : 'calendar';
        logger.log(`üìÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞ –Ω–∞: ${this.viewMode}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏
        const icon = this.listViewBtn.querySelector('svg');
        if (this.viewMode === 'list') {
            // –ò–∫–æ–Ω–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤–∏–¥—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            icon.innerHTML = `
                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                <line x1="16" y1="2" x2="16" y2="6"></line>
                <line x1="8" y1="2" x2="8" y2="6"></line>
                <line x1="3" y1="10" x2="21" y2="10"></line>
            `;
            this.listViewBtn.title = '–í–∏–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è';
        } else {
            // –ò–∫–æ–Ω–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≤–∏–¥ —Å–ø–∏—Å–∫–∞
            icon.innerHTML = `
                <path d="M8 6H21M8 12H21M8 18H21M3 6H3.01M3 12H3.01M3 18H3.01" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            `;
            this.listViewBtn.title = '–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π';
        }
        
        // –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        if (this.viewMode === 'calendar') {
            this.weekdays.style.display = '';
            this.calendarDays.style.display = '';
            this.selectedDateEvents.style.display = 'none';
        }
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.render();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
     */
    async handleCreateEvent(preselectedDate = null) {
        logger.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è', preselectedDate);
        
        try {
            // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–ª–∏ —Ç–µ–∫—É—â—É—é
            const date = preselectedDate || this.selectedDate || new Date();
            
            // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ date —ç—Ç–æ –æ–±—ä–µ–∫—Ç Date
            const eventDate = date instanceof Date ? date : new Date(date);
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            const { openEventCreationModal } = await import('../src/modules/events/eventCreationModal.js');
            
            openEventCreationModal(eventDate, async (eventId) => {
                logger.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', eventId);
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è
                await this.loadEvents();
                this.render();
                
                // –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É —Å –Ω–æ–≤—ã–º —Å–æ–±—ã—Ç–∏–µ–º
                const dayElements = this.calendarDays.querySelectorAll('.calendar-day');
                for (const dayEl of dayElements) {
                    const dayDate = new Date(dayEl.dataset.date);
                    if (dayDate.toDateString() === eventDate.toDateString()) {
                        this.handleDayClick({ target: dayEl });
                        break;
                    }
                }
            });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è');
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
     */
    async handleEditEvent(eventId) {
        logger.log('üñäÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', eventId);
        try {
            const event = this.events.find(e => e.id === eventId);
            if (!event) {
                logger.warn('–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', eventId);
                return;
            }

            const { openEventCreationModal } = await import('../src/modules/events/eventCreationModal.js');
            openEventCreationModal(new Date(event.date), async (updatedEventId) => {
                if (updatedEventId === eventId) {
                    logger.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', eventId);
                    await this.loadEvents();
                    this.render();
                    this.handleDayClick({ target: this.calendarDays.querySelector(`.calendar-day[data-date="${event.date.toISOString()}"]`) });
                } else {
                    logger.warn('–°–æ–±—ã—Ç–∏–µ —Å –¥—Ä—É–≥–∏–º ID –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ:', updatedEventId);
                }
            });
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
     */
    async handleDeleteEvent(eventId, eventName) {
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ "${eventName}"?`)) {
            return;
        }
        
        logger.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', eventId);
        
        try {
            await deleteEvent(eventId);
            logger.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ:', eventId);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            await this.loadEvents();
            this.render();
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if (this.selectedDate) {
                const selectedDateStr = this.selectedDate.toDateString();
                const dayElements = this.calendarDays.querySelectorAll('.calendar-day');
                
                for (const dayEl of dayElements) {
                    if (dayEl.dataset.date) {
                        const dayDate = new Date(dayEl.dataset.date);
                        if (dayDate.toDateString() === selectedDateStr) {
                            this.handleDayClick({ target: dayEl });
                            break;
                        }
                    }
                }
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: ' + error.message);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoading(show) {
        if (show) {
            this.loadingIndicator.classList.add('active');
            this.container.style.display = 'none';
        } else {
            this.loadingIndicator.classList.remove('active');
            this.container.style.display = 'block';
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        this.container.innerHTML = `
            <div style="text-align: center; padding: 3rem; color: var(--text-secondary);">
                <p>${message}</p>
                <button class="btn-primary" onclick="location.reload()">–û–±–Ω–æ–≤–∏—Ç—å</button>
            </div>
        `;
    }
}

// –î–µ–ª–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ onclick
window.eventsCalendar = null;