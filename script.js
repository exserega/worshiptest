// =====================================================================
// üèõÔ∏è AGAPE WORSHIP APP - MAIN ENTRY POINT
// =====================================================================
// –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —á–∏—Å—Ç—ã–π –∏ –º–æ–¥—É–ª—å–Ω—ã–π –∫–æ–¥
// –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
// =====================================================================

// ====================================
// üìã RESTRUCTURE STAGE INDICATOR
// ====================================
// console.log('üéâ AGAPE WORSHIP - MODULAR ARCHITECTURE v2.0');

// ====================================
// üì¶ CORE IMPORTS
// ====================================
import * as state from './js/state.js';
import * as api from './js/api.js';
import * as ui from './ui.js';
import logger from './src/utils/logger.js';
import { canManageEvents } from './src/modules/permissions/permissions.js';

// ====================================
// üöÄ MAIN INITIALIZATION IMPORT
// ====================================
import { initializeApp, onDOMContentLoaded } from './src/main/initialization.js';

// ====================================
// üîó GLOBAL COMPATIBILITY EXPORTS
// ====================================
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
// –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ –º–æ–¥—É–ª–µ–π

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
import { 
    // Core functions
    eventBus,
    stateManager,
    
    // Search functions
    cleanLyricsForSearch,
    getHighlightedTextFragment,
    filterAndDisplaySongs as filterAndDisplaySongsModule,
    getNormalizedTitle,
    getNormalizedLyrics,
    getCleanedLyrics,
    
    // Setlist functions  
    startAddingSongs as startAddingSongsModule,
    closeAddSongsOverlay as closeAddSongsOverlayModule,
    addSongToSetlist as addSongToSetlistModule,
    
    // Modal functions
    showNotification as showNotificationModule,
    showSuccess as showSuccessModule,
    showError as showErrorModule,
    showWarning as showWarningModule,
    showConfirmDialog as showConfirmDialogModule,
    showToast as showToastModule,
    
    // Overlay functions
    showMobileSongPreview,
    hideMobileSongPreview
} from './src/core/index.js';

// ====================================
// üåê GLOBAL WINDOW EXPORTS
// ====================================
// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –º–æ–¥—É–ª–µ–π –∏ legacy –∫–æ–¥–∞

// Core state
window.eventBus = eventBus;
window.stateManager = stateManager;
window.state = state;
window.api = api;
window.ui = ui;

// Search functions
window.cleanLyricsForSearch = cleanLyricsForSearch;
window.getHighlightedTextFragment = getHighlightedTextFragment;
window.filterAndDisplaySongsModule = filterAndDisplaySongsModule;
window.getNormalizedTitle = getNormalizedTitle;
window.getNormalizedLyrics = getNormalizedLyrics;
window.getCleanedLyrics = getCleanedLyrics;

// Setlist functions
window.startAddingSongsModule = startAddingSongsModule;
window.closeAddSongsOverlayModule = closeAddSongsOverlayModule;
window.addSongToSetlistModule = addSongToSetlistModule;

// Modal functions  
window.showNotificationModule = showNotificationModule;
window.showSuccessModule = showSuccessModule;
window.showErrorModule = showErrorModule;
window.showWarningModule = showWarningModule;
window.showConfirmDialogModule = showConfirmDialogModule;
window.showToastModule = showToastModule;

// Overlay functions
window.showMobileSongPreview = showMobileSongPreview;
window.hideMobileSongPreview = hideMobileSongPreview;

// ====================================
// üéõÔ∏è FEATURE FLAGS
// ====================================
// –§–ª–∞–≥–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–∞—Ä—ã–º–∏ –∏ –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
window.USE_MODULE_FUNCTIONS = false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

// ====================================
// üîß LEGACY FUNCTION STUBS
// ====================================
// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è event handlers

// Font size functions
window.increaseFontSize = function() {
    logger.log('üî§ [Legacy] increaseFontSize called');
    if (window.state) {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        import('./js/constants.js').then(({ MAX_FONT_SIZE }) => {
            const newSize = Math.min(window.state.currentFontSize + 2, MAX_FONT_SIZE || 32);
            window.state.setCurrentFontSize(newSize);
            if (typeof ui.updateFontSize === 'function') {
                ui.updateFontSize();
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            localStorage.setItem('songFontSize', newSize.toString());
            logger.log(`üî§ Font size increased to: ${newSize}px`);
        });
    }
};

window.decreaseFontSize = function() {
    logger.log('üî§ [Legacy] decreaseFontSize called');
    if (window.state) {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        import('./js/constants.js').then(({ MIN_FONT_SIZE }) => {
            const newSize = Math.max(MIN_FONT_SIZE || 4, window.state.currentFontSize - 2);
            window.state.setCurrentFontSize(newSize);
            if (typeof ui.updateFontSize === 'function') {
                ui.updateFontSize();
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            localStorage.setItem('songFontSize', newSize.toString());
            logger.log(`üî§ Font size decreased to: ${newSize}px`);
        });
    }
};

// Theme toggle
window.toggleTheme = function() {
    console.log('üé® [Legacy] toggleTheme called');
    const currentTheme = document.body.dataset.theme;
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    if (typeof ui.applyTheme === 'function') {
        ui.applyTheme(newTheme);
    }
};

// Text manipulation
window.splitTextIntoColumns = function() {
    console.log('üìÑ [Legacy] splitTextIntoColumns called');
    if (ui.songContent) {
        ui.songContent.classList.toggle('split-columns');
        if (typeof ui.updateSplitButton === 'function') {
            ui.updateSplitButton();
        }
    }
};

window.toggleChords = function() {
    logger.log('üéµ [Legacy] toggleChords called');
    if (window.state) {
        window.state.setAreChordsVisible(!window.state.areChordsVisible);
        if (ui.songContent) {
            ui.songContent.classList.toggle('chords-hidden', !window.state.areChordsVisible);
            ui.updateToggleChordsButton();
        }
    }
};

window.showChordsOnly = function() {
    logger.log('üéº [Legacy] showChordsOnly called');
    if (window.state) {
        window.state.setIsChordsOnlyMode(!window.state.isChordsOnlyMode);
        if (ui.songContent) {
            ui.songContent.classList.toggle('chords-only-mode', window.state.isChordsOnlyMode);
            ui.updateChordsOnlyButton();
        }
    }
};

// –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ø–æ–∏—Å–∫ –û–°–¢–û–†–û–ñ–ù–û - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
window.handleMainSearch = function() {
    console.log('üîç [Legacy] handleMainSearch called');
    
    if (!ui.searchInput) {
        console.log('üîç [Legacy] No search input found');
        return;
    }
    
    const rawQuery = ui.searchInput.value.trim();
    console.log('üîç [Legacy] Search query:', rawQuery);
    
    if (!rawQuery) {
        if (ui.searchResults) ui.searchResults.innerHTML = '';
        return;
    }
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ Worker (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
    if (window.state && window.state.allSongs) {
        console.log('üîç [Legacy] Searching in allSongs:', window.state.allSongs.length);
        
        const results = window.state.allSongs.filter(song => {
            const titleMatch = song.name.toLowerCase().includes(rawQuery.toLowerCase());
            const lyricsMatch = song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] && 
                song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'].toLowerCase().includes(rawQuery.toLowerCase());
            return titleMatch || lyricsMatch;
        }).slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        console.log('üîç [Legacy] Found results:', results.length);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (typeof ui.displaySearchResults === 'function') {
            ui.displaySearchResults(results, (song) => {
                console.log('üîç [Legacy] Search result selected:', song.name);
                ui.searchInput.value = song.name;
                if (ui.searchResults) ui.searchResults.innerHTML = '';

                // –ù–æ–≤—ã–π –ø—É—Ç—å (—Å–µ–ª–µ–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã –≤ –Ω–æ–≤–æ–º UI): –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Å–Ω—é –Ω–∞–ø—Ä—è–º—É—é
                if (typeof ui.displaySongDetails === 'function') {
                    const fullSongData = window.state?.allSongs?.find(s => s.id === song.id) || song;
                    ui.displaySongDetails(fullSongData);
                    return;
                }

                // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤—Å–µ –∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                if (ui.sheetSelect && song.sheet) {
                    ui.sheetSelect.value = song.sheet;
                    ui.sheetSelect.dispatchEvent(new Event('change'));
                }
                if (ui.songSelect) {
                    ui.songSelect.value = song.id;
                    ui.songSelect.dispatchEvent(new Event('change'));
                }
            }, rawQuery);
        } else {
            console.log('üîç [Legacy] ui.displaySearchResults not available');
        }
    } else {
        console.log('üîç [Legacy] No songs data available');
    }
};

// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò–ó –û–†–ò–ì–ò–ù–ê–õ–ê - –¢–û–ß–ù–û –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –ö–û–î–ï
window.currentCreatedSetlistId = null;
window.currentCreatedSetlistName = '';
window.addedSongsToCurrentSetlist = new Map(); // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Å–µ–Ω —Å –∏—Ö —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—è–º–∏

/** –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–µ–π */
window.toggleSongControls = function(show) {
    logger.log(`üéõÔ∏è [Legacy] toggleSongControls called with show=${show}`);
    
    if (show) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.body.setAttribute('data-song-loaded', 'true');
    } else {
        // –£–¥–∞–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.body.removeAttribute('data-song-loaded');
    }
};

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω
window.updateAddedSongsCount = function() {
    const count = window.addedSongsToCurrentSetlist.size;
    
    if (ui.addedSongsCount) {
        ui.addedSongsCount.textContent = count;
    }
    
    if (ui.addedSongsCountBadge) {
        ui.addedSongsCountBadge.textContent = count;
        ui.addedSongsCountBadge.style.display = count > 0 ? 'inline-flex' : 'none';
    }
    
    console.log('üî¢ [Legacy] Updated counter to:', count);
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ overlay
window.populateCategoryFilter = function() {
    const categoryFilter = document.getElementById('category-filter');
    if (!categoryFilter) {
        console.error('‚ùå [Legacy] category-filter –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    categoryFilter.innerHTML = '<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ constants
    const SONG_CATEGORIES_ORDER = window.SONG_CATEGORIES_ORDER || [
        '–ü–æ–∫–ª–æ–Ω–µ–Ω–∏–µ', '–ü—Ä–æ—Å–ª–∞–≤–ª–µ–Ω–∏–µ', '–ü—Ä–∏—á–∞—Å—Ç–∏–µ', 
        '–ö—Ä–µ—â–µ–Ω–∏–µ', '–î–µ—Ç—Å–∫–∏–µ', '–†–∞–∑–Ω–æ–µ'
    ];
    
    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    SONG_CATEGORIES_ORDER.forEach(categoryName => {
        if (state.songsBySheet && state.songsBySheet[categoryName] && state.songsBySheet[categoryName].length > 0) {
            const option = document.createElement('option');
            option.value = categoryName;
            option.textContent = categoryName;
            categoryFilter.appendChild(option);
        }
    });
    
    // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (state.songsBySheet) {
        Object.keys(state.songsBySheet).forEach(categoryName => {
            if (!SONG_CATEGORIES_ORDER.includes(categoryName)) {
                const option = document.createElement('option');
                option.value = categoryName;
                option.textContent = categoryName;
                categoryFilter.appendChild(option);
            }
        });
    }
    
    console.log('üìÇ [Legacy] –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–∏–ª—å—Ç—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
};

// –î–û–ë–ê–í–õ–Ø–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–£–Æ –§–£–ù–ö–¶–ò–Æ displaySongsGrid –ò–ó –û–†–ò–ì–ò–ù–ê–õ–ê
window.displaySongsGrid = function(songs, searchTerm = '') {
    console.log('üéµ [Legacy] displaySongsGrid called with', songs.length, 'songs');
    
    if (!ui.songsGrid) {
        console.error('üéµ [Legacy] ui.songsGrid not found');
        return;
    }
    
    if (!songs || songs.length === 0) {
        ui.songsGrid.innerHTML = `
            <div class="loading-state">
                <i class="fas fa-music"></i>
                <p>–ü–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            </div>
        `;
        return;
    }
    
    ui.songsGrid.innerHTML = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ"
    const isShowingAddedOnly = ui.showAddedOnly && ui.showAddedOnly.classList.contains('active');
    
    songs.forEach(song => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ –ø–µ—Å–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é)
        const isAdded = window.addedSongsToCurrentSetlist && window.addedSongsToCurrentSetlist.has(song.id);
        const addedKey = isAdded ? window.addedSongsToCurrentSetlist.get(song.id) : null;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å–Ω–∏
        const originalKey = window.getSongKeyLocal ? window.getSongKeyLocal(song) : (song['–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'] || 'C');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        let textFragment = '';
        if (searchTerm) {
            const normalizedQuery = window.normalizeSearchQuery ? window.normalizeSearchQuery(searchTerm) : searchTerm.toLowerCase();
            const titleMatch = song.name.toLowerCase().includes(normalizedQuery);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
            if (!titleMatch) {
                const cleanedLyrics = song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '';
                
                if (cleanedLyrics) {
                    textFragment = window.getHighlightedTextFragment ? 
                        window.getHighlightedTextFragment(cleanedLyrics, searchTerm, 80) : 
                        cleanedLyrics.substring(0, 80) + '...';
                }
            }
        }
        
        const songCard = document.createElement('div');
        songCard.className = `song-card ${isAdded ? 'added' : ''}`;
        songCard.innerHTML = `
            <div class="song-card-header">
                <div class="song-info">
                    <div class="song-title-row">
                        <h4 class="song-title">${song.name}</h4>
                        ${song.BPM && song.BPM !== 'NA' ? `<span class=\"song-bpm\"><i class=\"fas fa-tachometer-alt\"></i>${song.BPM}</span>` : ''}
                        ${isAdded && addedKey ? `<span class=\"song-added-key\">${addedKey}</span>` : ''}
                    </div>
                    <div class="song-category-label">${song.sheet || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</div>
                    ${textFragment ? `<div class="song-text-fragment">${textFragment}</div>` : ''}
                </div>
                <button class="song-add-btn ${isAdded ? 'added' : ''}" data-song-id="${song.id}" aria-label="${isAdded ? (isShowingAddedOnly ? '–£–¥–∞–ª–∏—Ç—å' : '–î–æ–±–∞–≤–ª–µ–Ω–∞') : '–î–æ–±–∞–≤–∏—Ç—å'}">
                    <i class="fas fa-${isAdded ? (isShowingAddedOnly ? 'times' : 'check') : 'plus'}"></i>
                </button>
            </div>
        `;
        
        ui.songsGrid.appendChild(songCard);
    });
    
    console.log('üéµ [Legacy] displaySongsGrid completed, rendered', songs.length, 'songs');
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω –≤ overlay —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
window.refreshSongsDisplay = async function() {
    try {
        const searchInput = document.getElementById('song-search-input');
        const categorySelect = document.getElementById('category-filter');
        const showAddedOnlyBtn = document.getElementById('show-added-only');
        const searchTerm = (searchInput && searchInput.value) || '';
        const category = (categorySelect && categorySelect.value) || '';
        const showAddedOnly = !!(showAddedOnlyBtn && showAddedOnlyBtn.classList.contains('active'));

        if (typeof window.filterAndDisplaySongs === 'function') {
            await window.filterAndDisplaySongs(searchTerm, category, showAddedOnly);
        } else {
            const { filterAndDisplaySongs } = await import('./src/ui/search-manager.js');
            await filterAndDisplaySongs(searchTerm, category, showAddedOnly);
        }
    } catch (e) {
        console.error('‚ùå refreshSongsDisplay failed:', e);
    }
};

// –£–ë–†–ê–õ–ò toggleMyListPanel - –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏–π

// –£–ë–†–ê–õ–ò toggleRepertoirePanel - –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏–π

// –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –¢–û–ß–ù–û –ö–ê–ö –í –û–†–ò–ì–ò–ù–ê–õ–ï
window.refreshSetlists = async function() {
    console.log('üìã [Legacy] refreshSetlists called');
    
    try {
        const setlists = await api.loadSetlists();
        console.log('üìã [Legacy] Loaded setlists:', setlists.length);
        
        // –¢–û–ß–ù–û –ö–ê–ö –í –û–†–ò–ì–ò–ù–ê–õ–ï
        window.state.setSetlists(setlists);
        ui.renderSetlists(setlists, window.handleSetlistSelect, window.handleSetlistDelete);
        
    } catch (error) {
        console.error("üìã [Legacy] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤:", error);
        ui.renderSetlists([], window.handleSetlistSelect, window.handleSetlistDelete); // Render empty list on error
    }
};

// –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–û–ß–ù–û –ö–ê–ö –ë–´–õ–ò
window.handleSetlistSelect = function(setlist) {
    logger.log('üìã [Legacy] handleSetlistSelect:', setlist.name);
    window.state.setCurrentSetlistId(setlist.id);
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    window.state.setCurrentSetlistName(setlist.name);
    ui.displaySelectedSetlist(setlist, window.handleFavoriteOrRepertoireSelect, window.handleRemoveSongFromSetlist);
};

window.handleSetlistDelete = async function(setlistId, setlistName) {
    logger.log('üìã [Legacy] handleSetlistDelete:', setlistName);
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç "${setlistName}"?`)) {
        try {
            const wasSelected = window.state.currentSetlistId === setlistId;

            await api.deleteSetlist(setlistId);
            await window.refreshSetlists(); // This re-renders the list

            if (wasSelected) {
                window.state.setCurrentSetlistId(null);
                ui.clearSetlistSelection();
            }
        } catch (error) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ç-–ª–∏—Å—Ç–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç.");
        }
    }
};

window.handleFavoriteOrRepertoireSelect = function(song) {
    logger.log('üéµ [Legacy] Song selected from panel:', song.name);
    
    if (!song || !song.id) return;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Å–Ω–∏
    if (typeof ui.displaySongDetails === 'function') {
        // –ò—â–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏ –≤ state
        const fullSongData = window.state.allSongs?.find(s => s.id === song.id) || song;
        logger.log('üéµ [Legacy] Displaying song details for:', fullSongData.name);
        
        // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∞–∫–∂–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –ø–µ—Å–Ω–µ –∏–∑ —Å–µ—Ç-–ª–∏—Å—Ç–∞
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: preferredKey –∏–∑ —Å–µ—Ç–ª–∏—Å—Ç–∞, –∑–∞—Ç–µ–º defaultKey
        const keyToSelect = song.preferredKey || song.keyToSelect || song.defaultKey || fullSongData.defaultKey;
        logger.log('üéµ [Legacy] Key to select:', keyToSelect, 'preferredKey:', song.preferredKey);
        ui.displaySongDetails(fullSongData, keyToSelect);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª–∏
    if (typeof ui.closeAllSidePanels === 'function') {
        ui.closeAllSidePanels();
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–Ω–æ–ø–∫–∏ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞
    if (ui.toggleRepertoireButton) {
        ui.toggleRepertoireButton.classList.remove('loading');
        logger.log('üé≠ [Legacy] Repertoire loading animation removed');
    }
};

window.handleRemoveSongFromSetlist = async function(songId, songName) {
    console.log('üóëÔ∏è [Legacy] handleRemoveSongFromSetlist:', songName);
    const setlistId = window.state.currentSetlistId;
    if (!setlistId) return;

    if (confirm(`–£–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é "${songName}" –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞?`)) {
        try {
            await api.removeSongFromSetlist(setlistId, songId);

            // Refresh view
            const updatedSetlists = await api.loadSetlists();
            window.state.setSetlists(updatedSetlists);
            const updatedCurrentSetlist = updatedSetlists.find(s => s.id === setlistId);
            if (updatedCurrentSetlist) {
                window.state.setCurrentSetlistId(updatedCurrentSetlist.id); // Re-set state
                ui.displaySelectedSetlist(updatedCurrentSetlist, window.handleFavoriteOrRepertoireSelect, window.handleRemoveSongFromSetlist);
            } else {
                // This case handles if the setlist was somehow deleted in the process
                window.state.setCurrentSetlistId(null);
                ui.clearSetlistSelection();
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ –∏–∑ —Å–µ—Ç-–ª–∏—Å—Ç–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é.");
        }
    }
};

window.handleRepertoireUpdate = function(data) {
    logger.log('üé≠ [Legacy] handleRepertoireUpdate called:', data);
    
    if (data.error) {
        logger.error('üé≠ [Legacy] Repertoire error:', data.error);
        if (window.state && typeof window.state.setCurrentRepertoireSongsData === 'function') {
            window.state.setCurrentRepertoireSongsData([]);
        }
    } else {
        logger.log('üé≠ [Legacy] Repertoire data loaded:', data.data?.length || 0);
        logger.log('üé≠ [Legacy] Repertoire songs:', data.data);
        if (window.state && typeof window.state.setCurrentRepertoireSongsData === 'function') {
            window.state.setCurrentRepertoireSongsData(data.data || []);
        }
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä
    if (typeof ui.renderRepertoire === 'function') {
        ui.renderRepertoire(window.handleFavoriteOrRepertoireSelect);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏
    const currentSongId = ui.songSelect?.value;
    if (currentSongId && window.state && window.state.allSongs) {
        const currentSong = window.state.allSongs.find(s => s.id === currentSongId);
        if (currentSong && typeof ui.updateRepertoireButton === 'function') {
            ui.updateRepertoireButton(currentSong);
        }
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (ui.toggleRepertoireButton) {
                    ui.toggleRepertoireButton.classList.remove('loading');
            logger.log('üé≠ [Legacy] Repertoire loading animation removed after data update');
    }
};

// –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ï–ü–ï–†–¢–£–ê–†–ê - –û–¢–°–£–¢–°–¢–í–û–í–ê–õ–ê!
window.handleVocalistChange = function(vocalistId) {
    console.log('üé≠ [Legacy] handleVocalistChange called:', vocalistId);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–∫–∞–ª–∏—Å—Ç–∞ –≤ state
    if (window.state && typeof window.state.setCurrentVocalistId === 'function') {
        window.state.setCurrentVocalistId(vocalistId);
        console.log('üé≠ [Legacy] Current vocalist ID set:', vocalistId);
    }
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–æ–∫–∞–ª–∏—Å—Ç –∏ –ø–∞–Ω–µ–ª—å —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (vocalistId && ui.repertoirePanel && ui.repertoirePanel.classList.contains('open')) {
        console.log('üé≠ [Legacy] Repertoire panel is open, reloading data...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if (ui.toggleRepertoireButton) {
            ui.toggleRepertoireButton.classList.add('loading');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–∫–∞–ª–∏—Å—Ç–∞
        if (typeof api.loadRepertoire === 'function') {
            api.loadRepertoire(vocalistId, window.handleRepertoireUpdate);
        } else {
            console.error('üé≠ [Legacy] api.loadRepertoire not found');
            if (ui.toggleRepertoireButton) {
                ui.toggleRepertoireButton.classList.remove('loading');
            }
        }
    } else if (!vocalistId) {
        // –ï—Å–ª–∏ –≤–æ–∫–∞–ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –æ—á–∏—â–∞–µ–º —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä
        console.log('üé≠ [Legacy] No vocalist selected, clearing repertoire');
        if (window.state && typeof window.state.setCurrentRepertoireSongsData === 'function') {
            window.state.setCurrentRepertoireSongsData([]);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞
        if (ui.repertoirePanel && ui.repertoirePanel.classList.contains('open')) {
            if (typeof ui.renderRepertoire === 'function') {
                ui.renderRepertoire(window.handleFavoriteOrRepertoireSelect);
            }
        }
    }
};

// ====================================
// üéµ SONG EDITOR HANDLERS
// ====================================

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏
 */
window.handleSaveEdit = async function() {
    console.log('üíæ [Legacy] handleSaveEdit called');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        const editorTextarea = document.getElementById('song-edit-textarea');
        const currentSong = window.stateManager?.getCurrentSong?.() || window.currentSong;
        
        if (!editorTextarea || !currentSong) {
            console.error('‚ùå [Legacy] Editor elements or current song not found');
            return;
        }
        
        const songId = currentSong.id;
        const editedContent = editorTextarea.value;
        
        if (!songId) {
            console.error('‚ùå [Legacy] No song ID found');
            return;
        }
        
        console.log('üíæ [Legacy] Saving song:', songId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
        if (typeof api.saveSongEdit === 'function') {
            await api.saveSongEdit(songId, editedContent);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ –µ—Å–ª–∏ –æ–Ω–∞ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞
            const currentSelect = ui.songSelect?.value;
            if (currentSelect === songId) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Å–Ω—é –≤ state
                const updatedSong = window.state.allSongs.find(s => s.id === songId);
                if (updatedSong) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    if (!updatedSong.originalContent) {
                        updatedSong.originalContent = updatedSong['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '';
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    updatedSong['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] = editedContent;
                    updatedSong.hasWebEdits = true;
                    
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    const event = new Event('change');
                    ui.songSelect.dispatchEvent(event);
                }
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
            if (ui.songEditorOverlay) {
                ui.songEditorOverlay.classList.remove('visible');
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (typeof ui.showModal === 'function') {
                ui.showModal('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
            }
            
            console.log('‚úÖ [Legacy] Song saved successfully');
        } else {
            console.error('‚ùå [Legacy] api.saveSongEdit not found');
        }
    } catch (error) {
        console.error('‚ùå [Legacy] Error saving song:', error);
        if (typeof ui.showModal === 'function') {
            ui.showModal('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message, 'error');
        }
    }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞—Ç–∞ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–µ—Å–Ω–∏
 */
window.handleRevertToOriginal = async function() {
    console.log('üîÑ [Legacy] handleRevertToOriginal called');
    
    try {
        const currentSong = window.stateManager?.getCurrentSong?.() || window.currentSong;
        if (!currentSong) {
            console.error('‚ùå [Legacy] No current song found');
            return;
        }
        
        const songId = currentSong.id;
        if (!songId) {
            console.error('‚ùå [Legacy] No song ID found');
            return;
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        const confirmRevert = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞—Ç–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã?');
        if (!confirmRevert) {
            return;
        }
        
        console.log('üîÑ [Legacy] Reverting song:', songId);
        
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ API
        if (typeof api.revertToOriginal === 'function') {
            await api.revertToOriginal(songId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Å–Ω—é –≤ state
            const song = window.state.allSongs.find(s => s.id === songId);
            if (song) {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                const originalText = song.originalContent || song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '';
                song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] = '';
                song.hasWebEdits = false;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
                const editorTextarea = document.getElementById('song-edit-textarea');
                if (editorTextarea) {
                    editorTextarea.value = originalText;
                }
                
                // –ï—Å–ª–∏ –ø–µ—Å–Ω—è —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                const currentSelect = ui.songSelect?.value;
                if (currentSelect === songId) {
                    const event = new Event('change');
                    ui.songSelect.dispatchEvent(event);
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (typeof ui.showModal === 'function') {
                ui.showModal('–ü–µ—Å–Ω—è –æ—Ç–∫–∞—á–µ–Ω–∞ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏!', 'success');
            }
            
            console.log('‚úÖ [Legacy] Song reverted successfully');
        } else {
            console.error('‚ùå [Legacy] api.revertToOriginal not found');
        }
    } catch (error) {
        console.error('‚ùå [Legacy] Error reverting song:', error);
        if (typeof ui.showModal === 'function') {
            ui.showModal('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ: ' + error.message, 'error');
        }
    }
};

// ====================================
// üöÄ APPLICATION STARTUP
// ====================================
// –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!

console.log('üéØ [EntryPoint] script.js –∑–∞–≥—Ä—É–∂–µ–Ω - –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –º–æ–¥—É–ª–µ initialization.js
// –û–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM

// ====================================
// üìä ENTRY POINT METADATA
// ====================================
export const metadata = {
    name: 'AgapeWorshipApp',
    version: '2.0.0',
    description: '–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Agape Worship',
    architecture: 'Modular',
    modules: [
        'Core (Event Bus, State Manager, Utilities)',
        'UI (DOM, Search, Display, Utils, Overlays, Modals)',
        'API (Firebase operations)',
        'Main (Controller, Event Handlers, Initialization)'
    ],
    codeReduction: '2017 ‚Üí ~100 —Å—Ç—Ä–æ–∫ (95% —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ)',
    maintainability: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è - –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å < 500 —Å—Ç—Ä–æ–∫',
    cursorEfficiency: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤'
};

// –§–£–ù–ö–¶–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô - –ò–ó –†–ê–ë–û–ß–ï–ì–û –ö–û–î–ê
window.showNotification = function(message, type = 'info') {
    console.log('üì¢ [EntryPoint] showNotification:', message, type);
    console.log('üì¢ [EntryPoint] showNotificationModule type:', typeof showNotificationModule);
    console.log('üì¢ [EntryPoint] showNotificationModule:', showNotificationModule);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥—É–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é - –ò–°–ü–†–ê–í–õ–ï–ù–û!
    if (typeof showNotificationModule === 'function') {
        console.log('üì¢ [EntryPoint] Calling showNotificationModule...');
        showNotificationModule(message, type);
        return;
    }
    
    console.log('üì¢ [EntryPoint] Using fallback notification...');
    
    // Fallback - –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    notification.style.cssText = `
        position: fixed;
        top: 80px;
        right: 20px;
        background: var(--bg-secondary, #1f2937);
        color: var(--text-primary, #e5e7eb);
        border: 2px solid var(--border-color);
        border-radius: 12px;
        padding: 16px 24px;
        font-size: 0.95rem;
        z-index: 99999;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        transform: translateX(calc(100% + 40px));
        transition: transform 0.3s ease;
        max-width: 350px;
        word-wrap: break-word;
        min-width: 250px;
    `;
    
    document.body.appendChild(notification);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (type) {
        case 'success':
            notification.style.borderColor = '#10b981';
            notification.style.backgroundColor = '#065f46';
            notification.style.color = '#d1fae5';
            break;
        case 'error':
            notification.style.borderColor = '#ef4444';
            notification.style.backgroundColor = '#7f1d1d';
            notification.style.color = '#fee2e2';
            break;
        case 'warning':
            notification.style.borderColor = '#f59e0b';
            notification.style.backgroundColor = '#78350f';
            notification.style.color = '#fef3c7';
            break;
        case 'info':
        default:
            notification.style.borderColor = '#3b82f6';
            notification.style.backgroundColor = '#1e3a8a';
            notification.style.color = '#dbeafe';
            break;
    }
    
    console.log('üì¢ [EntryPoint] Fallback notification added to DOM');
    
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
        console.log('üì¢ [EntryPoint] Fallback transform set to translateX(0)');
    }, 100);
    
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
};

// –£–¥–∞–ª—è–µ–º –≤–µ—Å—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –∫–æ–¥

// –§–£–ù–ö–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–ï–°–ù–ò –í –°–ï–¢-–õ–ò–°–¢
window.handleAddSongToSetlist = async function() {
    logger.log('üìã [EntryPoint] handleAddSongToSetlist called');
    logger.log('üìã [EntryPoint] window.currentSong:', window.currentSong);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–µ—Å–Ω—é –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let currentSong = window.currentSong;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ stateManager
    if (!currentSong && window.stateManager && typeof window.stateManager.getCurrentSong === 'function') {
        currentSong = window.stateManager.getCurrentSong();
        logger.log('üìã [EntryPoint] Got song from stateManager:', currentSong);
    }
    
    if (!currentSong || !currentSong.id) {
        logger.error('‚ùå [EntryPoint] No current song found:', currentSong);
        window.showNotification('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é', 'error');
        return;
    }
    
    const songId = currentSong.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    const keySelect = ui.keySelect;
    logger.log('üìã [EntryPoint] keySelect element:', keySelect);
    logger.log('üìã [EntryPoint] keySelect value:', keySelect?.value);
    logger.log('üìã [EntryPoint] song keys:', currentSong.keys);
    
    const selectedKey = keySelect?.value || currentSong.keys?.[0] || 'C';
    
    logger.log('üìã [EntryPoint] Adding song to setlist:', currentSong.name, 'in key:', selectedKey);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º overlay –≤—ã–±–æ—Ä–∞ —Å–µ—Ç-–ª–∏—Å—Ç–∞ —Å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
    if (typeof window.openSetlistSelector === 'function') {
        await window.openSetlistSelector(currentSong, selectedKey);
    } else {
        console.error('openSetlistSelector function not found');
        window.showNotification('‚ùå –û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å –≤—ã–±–æ—Ä–∞ —Å–µ—Ç-–ª–∏—Å—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
    }
};

// –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –°–ï–¢–õ–ò–°–¢–ê - –¢–û–ß–ù–û –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –ö–û–î–ï
window.handleCreateSetlist = async function() {
    console.log('üéµ [EntryPoint] handleCreateSetlist called');
    const name = ui.newSetlistNameInput.value.trim();
    if (!name) {
        window.showNotification('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error');
        return;
    }
    
    try {
        ui.createSetlistButton.disabled = true;
        ui.createSetlistButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>–°–æ–∑–¥–∞–Ω–∏–µ...</span>';
        
        const docRef = await api.createSetlist(name);
        // api.createSetlist –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É ID, –Ω–µ –æ–±—ä–µ–∫—Ç - –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –ö–û–î–ï!
        window.currentCreatedSetlistId = docRef; // docRef —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ ID
        window.currentCreatedSetlistName = name;
        
        console.log('üéØ [DEBUG] Created setlist:', window.currentCreatedSetlistId, window.currentCreatedSetlistName);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª (—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ ui)
        if (typeof ui.closeCreateSetlistModal === 'function') {
            ui.closeCreateSetlistModal();
        } else if (ui.createSetlistModal) {
            ui.createSetlistModal.classList.remove('show');
            ui.newSetlistNameInput.value = '';
            window.addedSongsToCurrentSetlist.clear();
        }
        
        await window.refreshSetlists();
        
        if (ui.createdSetlistName) {
            ui.createdSetlistName.textContent = name;
        }
        
        window.showNotification('‚úÖ –°–µ—Ç-–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç-–ª–∏—Å—Ç–∞:', error);
        window.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ç-–ª–∏—Å—Ç–∞', 'error');
    } finally {
        ui.createSetlistButton.disabled = false;
        ui.createSetlistButton.innerHTML = '<i class="fas fa-arrow-right"></i><span>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>';
    }
};

console.log('‚ú® [EntryPoint] Agape Worship App v2.0 - Modular Architecture Ready!');

// ====================================
// üìÖ SETLIST TO EVENT INTEGRATION
// ====================================

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ—Ç-–ª–∏—Å—Ç –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π
 * @param {string} setlistId - ID —Å–µ—Ç-–ª–∏—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
 */
window.addSetlistToCalendar = async function(setlistId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!canManageEvents()) {
            window.showNotification('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏', 'error');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç-–ª–∏—Å—Ç–µ
        const setlists = state.setlists || [];
        const setlist = setlists.find(s => s.id === setlistId);
        
        if (!setlist) {
            window.showNotification('‚ùå –°–µ—Ç-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const { getDatePickerModal } = await import('./src/modules/integration/datePickerModal.js');
        const datePickerModal = getDatePickerModal();
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        datePickerModal.open(setlist, async (selectedDate, setlistData) => {
            logger.log('üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:', selectedDate, '–¥–ª—è —Å–µ—Ç-–ª–∏—Å—Ç–∞:', setlistData.name);
            
            let events = [];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            try {
                logger.log('üìÖ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–±—ã—Ç–∏–π...');
                const { checkEventsOnDate, getEventsDescription } = await import('./src/modules/integration/eventChecker.js');
                logger.log('üìÖ –ú–æ–¥—É–ª—å eventChecker –∑–∞–≥—Ä—É–∂–µ–Ω');
                
                events = await checkEventsOnDate(selectedDate);
                logger.log('üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', events);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
                const description = getEventsDescription(events);
                window.showNotification(`üìÖ ${description}`, 'info');
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (events.length === 0) {
                    // –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ
                    logger.log('üìÖ –ù–∞ –¥–∞—Ç—É –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ');
                    await handleCreateNewEvent(selectedDate, setlistData);
                } else if (events.length === 1) {
                    // –û–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
                    const event = events[0];
                    logger.log('üìÖ –ù–∞–π–¥–µ–Ω–æ –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ:', event.name, '–°–µ—Ç-–ª–∏—Å—Ç:', event.setlistId ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
                    await handleSingleEvent(event, setlistData, selectedDate);
                } else {
                    // –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
                    logger.log('üìÖ –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä');
                    await handleMultipleEvents(events, selectedDate, setlistData);
                }
            } catch (error) {
                logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π:', error);
                window.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π', 'error');
            }
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:', error);
        window.showNotification('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', 'error');
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –Ω–∞ –¥–∞—Ç—É –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π
     */
    async function handleCreateNewEvent(selectedDate, setlistData) {
        logger.log('üìÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∞—Ç—ã:', selectedDate);
        logger.log('üìã –°–µ—Ç-–ª–∏—Å—Ç:', setlistData);
        
        try {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            const EventCreationModal = (await import('./src/modules/events/eventCreationModal.js')).default;
            logger.log('‚úÖ EventCreationModal –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
            
            const newModal = new EventCreationModal();
            logger.log('‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω');
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–∞—Ç–æ–π –∏ –ø—Ä–µ–¥–≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–µ—Ç-–ª–∏—Å—Ç–æ–º
            newModal.open(new Date(selectedDate), async (eventId) => {
                logger.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', eventId);
                // –°–µ—Ç-–ª–∏—Å—Ç —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ, –Ω–µ –Ω—É–∂–Ω–æ –µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            }, setlistData.id);
            
            logger.log('‚úÖ –ú–µ—Ç–æ–¥ open() –≤—ã–∑–≤–∞–Ω');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
            window.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è', 'error');
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω–æ –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ
     */
    async function handleSingleEvent(event, setlistData, selectedDate) {
        const { formatEventInfo } = await import('./src/modules/integration/eventChecker.js');
        const { getEventActionModal } = await import('./src/modules/integration/eventActionModal.js');
        
        const eventInfo = formatEventInfo(event);
        const modal = getEventActionModal();
        
        modal.open(eventInfo, setlistData, async (action, eventData, setlistData) => {
            if (action === 'replace') {
                logger.log('üìÖ –ó–∞–º–µ–Ω—è–µ–º —Å–µ—Ç-–ª–∏—Å—Ç –≤ —Å–æ–±—ã—Ç–∏–∏');
                await updateEventSetlist(eventData.id, setlistData.id, setlistData.name);
            } else if (action === 'create') {
                logger.log('üìÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ');
                await handleCreateNewEvent(selectedDate, setlistData);
            }
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
     */
    async function handleMultipleEvents(events, selectedDate, setlistData) {
        logger.log('üìÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π');
        
        try {
            const { getEventSelectorModal } = await import('./src/modules/integration/eventSelectorModal.js');
            const selectorModal = getEventSelectorModal();
            
            selectorModal.open(events, selectedDate, setlistData, async (action, eventData, setlistData, selectedDate) => {
                if (action === 'create') {
                    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                    logger.log('üìÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö');
                    await handleCreateNewEvent(selectedDate, setlistData);
                }
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ eventSelectorModal
            });
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å–æ–±—ã—Ç–∏–π:', error);
            window.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–±—ã—Ç–∏—è', 'error');
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞ –≤ —Å–æ–±—ã—Ç–∏–∏
     */
    async function updateEventSetlist(eventId, setlistId, setlistName) {
        try {
            const { db } = await import('./firebase-init.js');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            await db.collection('events').doc(eventId).update({
                setlistId: setlistId,
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            
            window.showNotification(`‚úÖ –°–µ—Ç-–ª–∏—Å—Ç "${setlistName}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ–±—ã—Ç–∏–µ`, 'success');
            logger.log('‚úÖ –°–µ—Ç-–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–æ–±—ã—Ç–∏–∏');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error);
            window.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è', 'error');
        }
    }
};

// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–ê–ù–ï–õ–ï–ô –¢–ï–ü–ï–†–¨ –í event-handlers.js - –ú–û–î–£–õ–¨–ù–û –ò –ü–†–ê–í–ò–õ–¨–ù–û!

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤"
document.addEventListener('DOMContentLoaded', () => {
    const saveToArchiveBtn = document.getElementById('save-to-archive-btn');
    if (saveToArchiveBtn) {
        saveToArchiveBtn.addEventListener('click', async () => {
            logger.log('üì¶ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤"');
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç –∏–∑ state (–∫–∞–∫ –≤ –∫–Ω–æ–ø–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
            const currentSetlistId = window.state?.currentSetlistId;
            const currentSetlist = window.state?.setlists?.find(s => s.id === currentSetlistId);
            
            if (!currentSetlist) {
                window.showNotification('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç-–ª–∏—Å—Ç', 'warning');
                return;
            }
            
            logger.log('üì¶ –¢–µ–∫—É—â–∏–π —Å–µ—Ç-–ª–∏—Å—Ç:', currentSetlist);
            
            try {
                // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                const { getArchiveSaveModal } = await import('./src/modules/archive/archiveSaveModal.js');
                const modal = getArchiveSaveModal();
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                modal.open(currentSetlist, (archiveId) => {
                    window.showNotification('‚úÖ –°–µ—Ç-–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤', 'success');
                    logger.log('‚úÖ –°–µ—Ç-–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤ —Å ID:', archiveId);
                });
                
            } catch (error) {
                logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
                window.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∞—Ä—Ö–∏–≤', 'error');
            }
        });
    }
});