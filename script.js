// =====================================================================
// Agape Worship App - script.js (–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞)
// =====================================================================

import * as state from './state.js';
import { MIN_FONT_SIZE, SWIPE_THRESHOLD, SWIPE_VERTICAL_LIMIT } from './constants.js';
import * as api from './api.js';
import * as songsApi from './src/js/api/songs.js';
import * as core from './core.js';
import * as ui from './ui.js';
import * as metronomeUI from './metronome.js';
import searchWorkerManager from './src/js/workers/workerManager.js';

// --- UTILITY FUNCTIONS ---

/** –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */
function isMobileDevice() {
    return window.innerWidth <= 768;
}

/** –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Å–Ω–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π */
function getSongKey(song) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    // –í –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –∑–∞—Ç–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
    const key = song['–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'] || 
                song['–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'] || 
                song['originalKey'] || 
                song['key'] || 
                song.originalKey || 
                song.key || 
                'C'; // Fallback –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –í–†–ï–ú–ï–ù–ù–´–ô –õ–û–ì –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    if (Math.random() < 0.05) { // 5% –ø–µ—Å–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('=== getSongKey DEBUG ===');
        console.log('song.name:', song.name);
        console.log('Available keys:', Object.keys(song).filter(k => k.toLowerCase().includes('—Ç–æ–Ω–∞–ª—å') || k.toLowerCase().includes('key')));
        console.log('song["–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"]:', song['–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å']);
        console.log('song["–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"]:', song['–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å']);
        console.log('song.key:', song.key);
        console.log('song.originalKey:', song.originalKey);
        console.log('Resolved key:', key);
    }
    
    return key;
}

/**
 * –ü–æ–∏—Å–∫ –¥–ª—è dropdown –≤ overlay (–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
 */
async function performOverlayDropdownSearch(searchTerm) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Worker –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.searchWorkerManager && typeof window.searchWorkerManager.overlaySearch === 'function') {
            const { results } = await window.searchWorkerManager.overlaySearch(searchTerm, state.allSongs, {
                enablePrioritySearch: true
            });
            
            const allResults = [
                ...results.exactResults.map(r => r.song),
                ...results.fuzzyResults.map(r => r.song)
            ];
            
            showOverlaySearchResults(allResults, searchTerm);
        } else {
            // Fallback: –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            const query = normalizeSearchQuery(searchTerm);
            let matchingSongs = state.allSongs.filter(song => {
                const titleMatch = getNormalizedTitle(song).includes(query);
                const lyricsMatch = getNormalizedLyrics(song).includes(query);
                return titleMatch || lyricsMatch;
            });
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º smart sorting
            matchingSongs.sort((a, b) => {
                const aNormalizedTitle = getNormalizedTitle(a);
                const bNormalizedTitle = getNormalizedTitle(b);
                const aTitleMatch = aNormalizedTitle.includes(query);
                const bTitleMatch = bNormalizedTitle.includes(query);
                const aTitleStartsWith = aNormalizedTitle.startsWith(query);
                const bTitleStartsWith = bNormalizedTitle.startsWith(query);
                
                if (aTitleStartsWith && !bTitleStartsWith) return -1;
                if (!aTitleStartsWith && bTitleStartsWith) return 1;
                if (aTitleMatch && !aTitleStartsWith && (!bTitleMatch || bTitleStartsWith)) return -1;
                if (bTitleMatch && !bTitleStartsWith && (!aTitleMatch || aTitleStartsWith)) return 1;
                if (aTitleMatch && !bTitleMatch) return -1;
                if (!aTitleMatch && bTitleMatch) return 1;
                
                return 0;
            });
            
            showOverlaySearchResults(matchingSongs.slice(0, 10), searchTerm); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ dropdown:', error);
        showOverlaySearchResults([], searchTerm);
    }
}

/**
 * –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ dropdown overlay
 */
function showOverlaySearchResults(results, query) {
    const dropdown = document.getElementById('overlay-search-results');
    const container = dropdown.querySelector('.search-results-container');
    
    if (!dropdown || !container) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã dropdown –ø–æ–∏—Å–∫–∞');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';
    
    if (!results || results.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        container.innerHTML = `
            <div class="overlay-search-no-results">
                <i class="fas fa-search"></i>
                –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"
            </div>
        `;
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results.forEach(song => {
            const resultElement = createOverlaySearchResultElement(song, query);
            container.appendChild(resultElement);
        });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º dropdown
    dropdown.style.display = 'block';
    
    console.log(`üîç –ü–æ–∫–∞–∑–∞–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ dropdown`);
}

/**
 * –°–∫—Ä—ã—Ç–∏–µ dropdown —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
 */
function hideOverlaySearchResults() {
    const dropdown = document.getElementById('overlay-search-results');
    if (dropdown) {
        dropdown.style.display = 'none';
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è dropdown (–∫–∞–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)
 */
function createOverlaySearchResultElement(song, query) {
    const resultDiv = document.createElement('div');
    resultDiv.className = 'search-result'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª–∞—Å—Å —á—Ç–æ –∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const normalizedQuery = normalizeSearchQuery(query);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–æ –ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–µ
    const normalizedTitle = normalizeTextForSearch(song.name || '');
    const titleMatch = normalizedTitle.includes(normalizedQuery);
    
    const lyrics = song.hasWebEdits 
        ? (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] || '') 
        : (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '');
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const cleanedLyrics = lyrics.replace(/\[[^\]]*\]/g, ' ');
    const normalizedLyrics = normalizeTextForSearch(cleanedLyrics);
    const lyricsMatch = !titleMatch && normalizedLyrics.includes(normalizedQuery);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ö–ê–ö –í –ì–õ–ê–í–ù–û–ú –ú–ï–ù–Æ - –ë–ï–ó –ö–ê–¢–ï–ì–û–†–ò–ò –ò –ë–ï–ó –ü–û–î–°–í–ï–¢–ö–ò –í –ù–ê–ó–í–ê–ù–ò–ò!)
    let resultHTML = `
        <div class="search-result-title">${song.name}</div>
    `;
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ –ø–µ—Å–Ω–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –° –ü–û–î–°–í–ï–¢–ö–û–ô
    if (lyricsMatch && query) {
        const fragment = getHighlightedTextFragment(cleanedLyrics, query, 60);
        if (fragment) {
            resultHTML += `<div class="search-result-fragment">${fragment}</div>`;
        }
    }
    
    resultDiv.innerHTML = resultHTML;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    resultDiv.addEventListener('click', () => {
        console.log('üéµ –ö–ª–∏–∫ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', song.name);
        
        // –°–∫—Ä—ã–≤–∞–µ–º dropdown
        hideOverlaySearchResults();
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        const searchInput = document.getElementById('song-search-input');
        if (searchInput) {
            searchInput.value = '';
            searchInput.blur(); // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
        const clearBtn = document.getElementById('clear-search');
        if (clearBtn) {
            clearBtn.style.display = 'none';
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º preview –ø–µ—Å–Ω–∏ (–º–æ–±–∏–ª—å–Ω—ã–π overlay –∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ)
        if (isMobileDevice()) {
            showMobileSongPreview(song);
        } else {
            showKeySelectionModal(song);
        }
    });
    
    return resultDiv;
}



// --- HANDLERS ---

/** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Å–Ω–∏ –∏–∑ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞ –∏–ª–∏ "–ú–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞" */
function handleFavoriteOrRepertoireSelect(song) {
    if (!song || !song.id) return;
    ui.sheetSelect.value = song.sheet;
    ui.populateSongSelect();
    ui.songSelect.value = song.id;
    ui.displaySongDetails(song, song.preferredKey);
    ui.closeAllSidePanels();
}

/** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞ */
function handleRepertoireUpdate({ data, error }) {
    if (error) {
        state.setCurrentRepertoireSongsData([]);
    } else {
        state.setCurrentRepertoireSongsData(data);
    }
    ui.renderRepertoire(handleFavoriteOrRepertoireSelect);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏
    const currentSongId = ui.songSelect.value;
    if (currentSongId) {
        const currentSong = state.allSongs.find(s => s.id === currentSongId);
        if (currentSong) {
            ui.updateRepertoireButton(currentSong);
        }
    }
}

/** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ */
async function handleSaveNote() {
    const songDocId = ui.notesModal.dataset.songdocid;
    const newNoteText = ui.noteEditTextarea.value.trim();

    if (!state.currentSetlistId || !songDocId) {
        alert("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç –∏–ª–∏ –ø–µ—Å–Ω—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.");
        return;
    }

    ui.saveNoteButton.disabled = true;
    ui.saveNoteButton.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
    try {
        await api.saveNoteForSongInSetlist(state.currentSetlistId, songDocId, newNoteText);
        closeNotesModal();
    } catch (error) {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    } finally {
        if(ui.saveNoteButton) { // Check if element still exists
            ui.saveNoteButton.disabled = false;
            ui.saveNoteButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        }
    }
}

function closeNotesModal() {
    ui.notesModal.classList.remove('visible');
    setTimeout(() => {
        ui.notesModal.style.display = 'none';
        if (ui.noteEditTextarea) ui.noteEditTextarea.value = '';
        if (ui.notesModal) delete ui.notesModal.dataset.songdocid;
    }, 300);
}

// --- SETLIST HANDLERS ---

// –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç-–ª–∏—Å—Ç–∞
// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤
let currentCreatedSetlistId = null;
let currentCreatedSetlistName = '';
let addedSongsToCurrentSetlist = new Set();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
let currentSongForKey = null;
let currentSelectedKey = 'C';

function closeCreateSetlistModal() {
    ui.createSetlistModal.classList.remove('show');
    ui.newSetlistNameInput.value = '';
    if (ui.nameCharCount) {
        ui.nameCharCount.textContent = '0';
    }
}

function closeAddSongsConfirmModal() {
    if (ui.addSongsConfirmModal) {
        ui.addSongsConfirmModal.classList.remove('show');
    }
}

function closeAddSongsOverlay() {
    if (ui.addSongsOverlay) {
        ui.addSongsOverlay.classList.remove('show');
    }
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    addedSongsToCurrentSetlist.clear();
    if (ui.addedSongsCount) {
        ui.addedSongsCount.textContent = '0';
    }
    if (ui.songSearchInput) {
        ui.songSearchInput.value = '';
    }
    if (ui.categoryFilter) {
        ui.categoryFilter.value = '';
    }
    if (ui.showAddedOnly) {
        ui.showAddedOnly.classList.remove('active');
    }
}

function closeKeySelectionModal() {
    if (ui.keySelectionModal) {
        ui.keySelectionModal.classList.remove('show');
    }
    currentSongForKey = null;
    currentSelectedKey = 'C';
}

function showKeySelectionModal(song) {
    console.log('=== showKeySelectionModal START ===');
    console.log('song:', song);
    
    if (!ui.keySelectionModal) {
        console.error('keySelectionModal not found!');
        return;
    }
    
    currentSongForKey = song;
    const originalSongKey = getSongKey(song);
    currentSelectedKey = originalSongKey;
    
    console.log('Set currentSongForKey:', currentSongForKey);
    console.log('Set currentSelectedKey:', currentSelectedKey);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Å–Ω–µ
    if (ui.keySongName) {
        ui.keySongName.textContent = song.name;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä –∏ –±–µ–π–¥–∂
    const keySelector = document.getElementById('key-selector');
    const originalKeyBadge = document.getElementById('original-key-badge');
    
    if (keySelector) {
        keySelector.value = originalSongKey;
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        keySelector.onchange = (e) => {
            currentSelectedKey = e.target.value;
            updateSongTextInModal(song, currentSelectedKey);
        };
    }
    
    if (originalKeyBadge) {
        originalKeyBadge.textContent = `–û—Ä–∏–≥–∏–Ω–∞–ª: ${originalSongKey}`;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
    updateSongTextInModal(song, currentSelectedKey);
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–ë–´–¢–ò–Ø –ü–†–Ø–ú–û –ó–î–ï–°–¨
    const confirmBtn = document.getElementById('confirm-key-selection');
    console.log('Found confirm button:', confirmBtn);
    
    if (confirmBtn) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        confirmBtn.removeEventListener('click', confirmAddSongWithKey);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        confirmBtn.addEventListener('click', (e) => {
            console.log('=== CONFIRM BUTTON CLICKED IN MODAL ===');
            console.log('Event:', e);
            e.preventDefault();
            e.stopPropagation();
            confirmAddSongWithKey();
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        confirmBtn.addEventListener('mousedown', (e) => {
            console.log('=== CONFIRM BUTTON MOUSEDOWN ===', e);
        });
        
        confirmBtn.addEventListener('mouseup', (e) => {
            console.log('=== CONFIRM BUTTON MOUSEUP ===', e);
        });
        
        confirmBtn.addEventListener('touchstart', (e) => {
            console.log('=== CONFIRM BUTTON TOUCHSTART ===', e);
        });
        
        confirmBtn.addEventListener('touchend', (e) => {
            console.log('=== CONFIRM BUTTON TOUCHEND ===', e);
        });
        console.log('Event listener added to confirm button');
    } else {
        console.error('Confirm button not found!');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    ui.keySelectionModal.classList.add('show');
    console.log('Modal shown with class "show"');
    console.log('=== showKeySelectionModal END ===');
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ –≤ modal —Å —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
function updateSongTextInModal(song, selectedKey) {
    const songTextDisplay = document.getElementById('song-text-display');
    if (!songTextDisplay) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
    let songText = song.hasWebEdits 
        ? (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] || song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '') 
        : (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '');
    
    if (!songText) {
        songTextDisplay.innerHTML = `
            <div class="loading-text">
                <i class="fas fa-exclamation-triangle"></i>
                <p>–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
            </div>
        `;
        return;
    }
    
    // –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –∞–∫–∫–æ—Ä–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const originalKey = getSongKey(song);
    if (selectedKey !== originalKey) {
        songText = transposeChords(songText, originalKey, selectedKey);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–∫–∫–æ—Ä–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const formattedText = formatChordsInText(songText);
    
    songTextDisplay.innerHTML = formattedText;
    
    console.log(`üìù –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω (${originalKey} ‚Üí ${selectedKey})`);
}

/**
 * –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–æ—Ä–¥–æ–≤
 */
function transposeChords(text, fromKey, toKey) {
    // –ï—Å–ª–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    if (fromKey === toKey) {
        return text;
    }
    
    // –ö–∞—Ä—Ç–∞ –∞–∫–∫–æ—Ä–¥–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const chordMap = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
    
    const fromIndex = chordMap.indexOf(fromKey);
    const toIndex = chordMap.indexOf(toKey);
    
    if (fromIndex === -1 || toIndex === -1) {
        console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${fromKey} ‚Üí ${toKey}`);
        return text;
    }
    
    const semitones = (toIndex - fromIndex + 12) % 12;
    
    // –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –∞–∫–∫–æ—Ä–¥—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
    return text.replace(/\[([^\]]+)\]/g, (match, chord) => {
        const transposedChord = transposeChord(chord.trim(), semitones);
        return `[${transposedChord}]`;
    });
}

/**
 * –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞
 */
function transposeChord(chord, semitones) {
    const chordMap = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
    
    // –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –Ω–æ—Ç—É –∞–∫–∫–æ—Ä–¥–∞
    let rootNote = '';
    let suffix = '';
    
    if (chord.length >= 2 && chord[1] === '#') {
        rootNote = chord.substring(0, 2);
        suffix = chord.substring(2);
    } else {
        rootNote = chord[0];
        suffix = chord.substring(1);
    }
    
    const rootIndex = chordMap.indexOf(rootNote);
    if (rootIndex === -1) {
        return chord; // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    }
    
    const newRootIndex = (rootIndex + semitones) % 12;
    const newRootNote = chordMap[newRootIndex];
    
    return newRootNote + suffix;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function formatChordsInText(text) {
    // –ó–∞–º–µ–Ω—è–µ–º –∞–∫–∫–æ—Ä–¥—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –Ω–∞ span —Å –∫–ª–∞—Å—Å–æ–º chord
    return text.replace(/\[([^\]]+)\]/g, '<span class="chord">$1</span>');
}

function updateKeyButtons() {
    const keyButtons = document.querySelectorAll('.key-btn');
    keyButtons.forEach(btn => {
        btn.classList.remove('selected');
        if (btn.dataset.key === currentSelectedKey) {
            btn.classList.add('selected');
        }
    });
    
    // –ë–ª–æ–∫ "–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å" —É–¥–∞–ª–µ–Ω –∑–∞ –Ω–µ–Ω–∞–¥–æ–±–Ω–æ—Å—Ç—å—é
}

async function handleCreateSetlist() {
    const name = ui.newSetlistNameInput.value.trim();
    if (!name) {
        showNotification('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error');
        return;
    }
    
    try {
        ui.createSetlistButton.disabled = true;
        ui.createSetlistButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>–°–æ–∑–¥–∞–Ω–∏–µ...</span>';
        
        const docRef = await api.createSetlist(name);
        currentCreatedSetlistId = docRef.id;
        currentCreatedSetlistName = name;
        
        closeCreateSetlistModal();
        await refreshSetlists();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω
        if (ui.createdSetlistName) {
            ui.createdSetlistName.textContent = name;
        }
        if (ui.addSongsConfirmModal) {
            ui.addSongsConfirmModal.classList.add('show');
        }
        
        showNotification('‚úÖ –°–µ—Ç-–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ç-–ª–∏—Å—Ç–∞:", error);
        showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç', 'error');
    } finally {
        ui.createSetlistButton.disabled = false;
        ui.createSetlistButton.innerHTML = '<i class="fas fa-arrow-right"></i><span>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>';
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ overlay –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω
async function startAddingSongs(mode = 'create', targetSetlistId = null, targetSetlistName = '') {
    console.log('=== startAddingSongs START ===');
    console.log('Mode:', mode);
    console.log('targetSetlistId:', targetSetlistId);
    console.log('targetSetlistName:', targetSetlistName);
    
    closeAddSongsConfirmModal();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π setlist –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let activeSetlistId, activeSetlistName;
    
    if (mode === 'create') {
        // –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
        activeSetlistId = currentCreatedSetlistId;
        activeSetlistName = currentCreatedSetlistName;
        console.log('CREATE mode - using currentCreated:', activeSetlistId, activeSetlistName);
    } else if (mode === 'edit') {
        // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        activeSetlistId = targetSetlistId || state.currentSetlistId;
        activeSetlistName = targetSetlistName || state.currentSetlistName;
        console.log('EDIT mode - using current:', activeSetlistId, activeSetlistName);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
    window.activeOverlayMode = mode;
    window.activeSetlistId = activeSetlistId;
    window.activeSetlistName = activeSetlistName;
    
    // –û—á–∏—â–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    addedSongsToCurrentSetlist.clear();
    if (ui.addedSongsCount) {
        ui.addedSongsCount.textContent = '0';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π
    if (ui.targetSetlistName) {
        ui.targetSetlistName.textContent = activeSetlistName;
    }
    if (ui.addSongsOverlay) {
        ui.addSongsOverlay.classList.add('show');
    }
    
    console.log('Overlay shown, addedSongsToCurrentSetlist cleared');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–µ—Å–Ω–∏ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (state.allSongs.length === 0) {
        try {
            await songsApi.loadAllSongsFromFirestore();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–µ–Ω:', error);
            showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–µ–Ω', 'error');
        }
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    populateCategoryFilter();
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –ø–µ—Å–Ω–∏
    displaySongsGrid(state.allSongs, '');
}

function populateCategoryFilter() {
    if (!ui.categoryFilter) return;
    
    ui.categoryFilter.innerHTML = '<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
    
    const categories = [...new Set(state.allSongs.map(song => song.sheet).filter(Boolean))];
    categories.sort();
    
    categories.forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category;
        ui.categoryFilter.appendChild(option);
    });
}

function displaySongsGrid(songs, searchTerm = '') {
    if (!ui.songsGrid) return;
    
    if (!songs || songs.length === 0) {
        ui.songsGrid.innerHTML = `
            <div class="loading-state">
                <i class="fas fa-music"></i>
                <p>–ü–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            </div>
        `;
        return;
    }
    
    ui.songsGrid.innerHTML = '';
    
    songs.forEach(song => {
        const isAdded = addedSongsToCurrentSetlist.has(song.id);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å–Ω–∏
        const originalKey = getSongKey(song);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        let textFragment = '';
        if (searchTerm) {
            const normalizedQuery = normalizeSearchQuery(searchTerm);
            const titleMatch = getNormalizedTitle(song).includes(normalizedQuery);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
            if (!titleMatch) {
                const cleanedLyrics = getCleanedLyrics(song);
                
                if (cleanedLyrics) {
                    textFragment = getHighlightedTextFragment(cleanedLyrics, searchTerm, 80);
                }
            }
        }
        
        const songCard = document.createElement('div');
        songCard.className = `song-card ${isAdded ? 'added' : ''}`;
        songCard.innerHTML = `
            <div class="song-card-header">
                <div>
                    <h4 class="song-title">${song.name}</h4>
                    <div class="song-category">${song.sheet || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</div>
                    <div class="song-key-display">
                        –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: <span class="song-key-badge">${originalKey}</span>
                    </div>
                    ${textFragment ? `<div class="song-text-fragment">${textFragment}</div>` : ''}
                </div>
                <button class="song-add-btn ${isAdded ? 'added' : ''}" data-song-id="${song.id}">
                    <i class="fas fa-${isAdded ? 'check' : 'plus'}"></i>
                    <span>${isAdded ? '–î–æ–±–∞–≤–ª–µ–Ω–∞' : '–î–æ–±–∞–≤–∏—Ç—å'}</span>
                </button>
            </div>
        `;
        
        const addBtn = songCard.querySelector('.song-add-btn');
        addBtn.addEventListener('click', (e) => {
            console.log('=== Song add button clicked ===');
            console.log('song:', song);
            console.log('isAdded:', isAdded);
            console.log('currentCreatedSetlistId:', currentCreatedSetlistId);
            console.log('window.activeSetlistId:', window.activeSetlistId);
            console.log('window.activeOverlayMode:', window.activeOverlayMode);
            
            e.stopPropagation();
            if (isAdded) {
                // –ï—Å–ª–∏ –ø–µ—Å–Ω—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                console.log('Removing song from setlist...');
                removeSongFromSetlist(song);
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç (–≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ)
                const activeSetlistId = window.activeSetlistId || currentCreatedSetlistId;
                if (!activeSetlistId) {
                    console.error('No active setlist! activeSetlistId is null');
                    console.log('window.activeSetlistId:', window.activeSetlistId);
                    console.log('currentCreatedSetlistId:', currentCreatedSetlistId);
                    console.log('activeOverlayMode:', window.activeOverlayMode);
                    showNotification('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç-–ª–∏—Å—Ç', 'error');
                    return;
                }
                
                // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π overlay
                if (isMobileDevice()) {
                    console.log('üì± –ü–æ–∫–∞–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ overlay –¥–ª—è –ø–µ—Å–Ω–∏...');
                    showMobileSongPreview(song);
                } else {
                    // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                    console.log('üñ•Ô∏è –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...');
                    showKeySelectionModal(song);
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                setTimeout(() => {
                    const confirmBtn = document.getElementById('confirm-key-selection');
                    console.log('Confirm button after modal shown:', confirmBtn);
                    console.log('Modal visible:', ui.keySelectionModal?.classList.contains('show'));
                    
                    if (confirmBtn) {
                        console.log('Button rect:', confirmBtn.getBoundingClientRect());
                        console.log('Button parent:', confirmBtn.parentElement);
                        console.log('Button onclick:', confirmBtn.onclick);
                        console.log('Button addEventListener count:', confirmBtn.getEventListeners ? confirmBtn.getEventListeners() : 'Not available');
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞
                        const rect = confirmBtn.getBoundingClientRect();
                        const elementAtPoint = document.elementFromPoint(rect.left + rect.width/2, rect.top + rect.height/2);
                        console.log('Element at button center:', elementAtPoint);
                        console.log('Is same element?', elementAtPoint === confirmBtn || confirmBtn.contains(elementAtPoint));
                    }
                }, 100);
            }
        });
        
        ui.songsGrid.appendChild(songCard);
    });
}

async function addSongToSetlist(song, key) {
    console.log('=== addSongToSetlist START ===');
    console.log('song:', song);
    console.log('key:', key);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π setlist –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    const targetSetlistId = window.activeSetlistId || currentCreatedSetlistId;
    console.log('targetSetlistId:', targetSetlistId);
    console.log('activeOverlayMode:', window.activeOverlayMode);
    
    try {
        console.log('Calling API addSongToSetlist...');
        const result = await api.addSongToSetlist(targetSetlistId, song.id, key);
        console.log('API result:', result);
        
        if (result.status === 'added') {
            console.log('Song added successfully, updating UI...');
            addedSongsToCurrentSetlist.add(song.id);
            console.log('addedSongsToCurrentSetlist size after add:', addedSongsToCurrentSetlist.size);
            
            showNotification(`‚ûï "${song.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ${key}`, 'success');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            if (ui.addedSongsCount) {
                ui.addedSongsCount.textContent = addedSongsToCurrentSetlist.size;
                console.log('Updated counter to:', addedSongsToCurrentSetlist.size);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            console.log('Refreshing songs display...');
            refreshSongsDisplay();
        } else if (result.status === 'duplicate_same') {
            console.log('Song already exists with same key');
            showNotification(`‚ö†Ô∏è "${song.name}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Ç-–ª–∏—Å—Ç`, 'warning');
        } else if (result.status === 'duplicate_key') {
            console.log('Song already exists with different key:', result.existingKey);
            showNotification(`‚ö†Ô∏è "${song.name}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ${result.existingKey}`, 'warning');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏', 'error');
    }
    
    console.log('=== addSongToSetlist END ===');
}

async function removeSongFromSetlist(song) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π setlist –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        const targetSetlistId = window.activeSetlistId || currentCreatedSetlistId;
        await api.removeSongFromSetlist(targetSetlistId, song.id);
        addedSongsToCurrentSetlist.delete(song.id);
        showNotification(`‚ûñ "${song.name}" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–µ—Ç-–ª–∏—Å—Ç–∞`, 'info');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        if (ui.addedSongsCount) {
            ui.addedSongsCount.textContent = addedSongsToCurrentSetlist.size;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        refreshSongsDisplay();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏', 'error');
    }
}

function refreshSongsDisplay() {
    const currentSearch = ui.songSearchInput ? ui.songSearchInput.value.trim() : '';
    const currentCategory = ui.categoryFilter ? ui.categoryFilter.value : '';
    const showAddedOnly = ui.showAddedOnly ? ui.showAddedOnly.classList.contains('active') : false;
    
    filterAndDisplaySongs(currentSearch, currentCategory, showAddedOnly);
}

async function confirmAddSongWithKey() {
    console.log('=== confirmAddSongWithKey START ===');
    console.log('currentSongForKey:', currentSongForKey);
    console.log('currentSelectedKey:', currentSelectedKey);
    console.log('currentCreatedSetlistId:', currentCreatedSetlistId);
    console.log('addedSongsToCurrentSetlist size:', addedSongsToCurrentSetlist.size);
    
    if (!currentSongForKey) {
        console.error('No song selected for key');
        showNotification('‚ùå –ü–µ—Å–Ω—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞', 'error');
        return;
    }
    
    if (!currentSelectedKey) {
        console.error('No key selected');
        showNotification('‚ùå –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞', 'error');
        return;
    }
    
    const targetSetlistId = window.activeSetlistId || currentCreatedSetlistId;
    if (!targetSetlistId) {
        console.error('No setlist ID');
        showNotification('‚ùå –°–µ—Ç-–ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error');
        return;
    }
    
    console.log('Calling addSongToSetlist BEFORE closing modal...');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const songToAdd = currentSongForKey;
    const keyToAdd = currentSelectedKey;
    
    console.log('Saved song:', songToAdd);
    console.log('Saved key:', keyToAdd);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeKeySelectionModal();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await addSongToSetlist(songToAdd, keyToAdd);
    console.log('=== confirmAddSongWithKey END ===');
}

/**
 * –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –∞–∫–∫–æ—Ä–¥–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 * @param {string} text - –¢–µ–∫—Å—Ç —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏
 * @returns {string} –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function cleanLyricsForSearch(text) {
    if (!text) return '';
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö [C], [Am7], etc.
    let cleaned = text.replace(/\[[^\]]*\]/g, ' ');
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    cleaned = cleaned.replace(/\s+/g, ' ').trim();
    
    return cleaned;
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 * @param {string} query - –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
 */
function normalizeSearchQuery(query) {
    if (!query) return '';
    
    return query
        .toLowerCase()
        .trim()
        // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∫—Ä–æ–º–µ –¥–µ—Ñ–∏—Å–æ–≤ –≤ —Å–ª–æ–≤–∞—Ö
        .replace(/[^\w\s\u0400-\u04FF-]/g, ' ')
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        .replace(/\s+/g, ' ')
        .trim();
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º
 * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function normalizeTextForSearch(text) {
    if (!text) return '';
    
    return text
        .toLowerCase()
        // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∫—Ä–æ–º–µ –¥–µ—Ñ–∏—Å–æ–≤ –≤ —Å–ª–æ–≤–∞—Ö
        .replace(/[^\w\s\u0400-\u04FF-]/g, ' ')
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        .replace(/\s+/g, ' ')
        .trim();
}

/**
 * –ö—ç—à–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
 * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
 * @returns {Object} –ü–µ—Å–Ω—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
function cacheNormalizedSongData(song) {
    if (!song._searchCached) {
        // –ö—ç—à–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        song._normalizedTitle = normalizeTextForSearch(song.name || '');
        
        // –ö—ç—à–∏—Ä—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
        const lyrics = song.hasWebEdits 
            ? (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] || '') 
            : (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '');
        const cleanedLyrics = cleanLyricsForSearch(lyrics);
        song._cleanedLyrics = cleanedLyrics;
        song._normalizedLyrics = normalizeTextForSearch(cleanedLyrics);
        
        song._searchCached = true;
    }
    return song;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
 * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
 * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
 */
function getNormalizedTitle(song) {
    cacheNormalizedSongData(song);
    return song._normalizedTitle;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
 * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
 * @returns {string} –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function getCleanedLyrics(song) {
    cacheNormalizedSongData(song);
    return song._cleanedLyrics;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
 * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
 * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function getNormalizedLyrics(song) {
    cacheNormalizedSongData(song);
    return song._normalizedLyrics;
}

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å–Ω–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å–Ω–∏
 * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
 */
function invalidateSongCache(song) {
    if (song) {
        song._searchCached = false;
        delete song._normalizedTitle;
        delete song._cleanedLyrics;
        delete song._normalizedLyrics;
    }
}

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø–µ—Å–µ–Ω
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function invalidateAllSongsCache() {
    if (state.allSongs) {
        state.allSongs.forEach(song => invalidateSongCache(song));
    }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è state –∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
window.invalidateAllSongsCache = invalidateAllSongsCache;
window.getNormalizedTitle = getNormalizedTitle;
window.getNormalizedLyrics = getNormalizedLyrics;
window.getCleanedLyrics = getCleanedLyrics;

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¢–û–ß–ù–û –Ω–∞–π–¥–µ–Ω–Ω—É—é —á–∞—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
 * @param {string} text - –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å  
 * @param {number} contextLength - –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
 * @returns {string} HTML —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
 */
function getHighlightedTextFragment(text, query, contextLength = 100) {
    if (!text || !query) return '';
    
    const normalizedQuery = normalizeSearchQuery(query);
    const queryWords = normalizedQuery.split(' ').filter(w => w.length > 1);
    
    if (queryWords.length === 0) return '';
    
    // –ò—â–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    let bestMatch = { index: -1, length: 0, word: '' };
    
    queryWords.forEach(word => {
        // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –∞–∫–∫–æ—Ä–¥—ã –∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è)
        const cleanText = text.replace(/\[[^\]]*\]/g, ' '); // —É–±–∏—Ä–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã
        const textWords = cleanText.split(/\s+/);
        
        for (let i = 0; i < textWords.length; i++) {
            const cleanWord = normalizeTextForSearch(textWords[i]);
            if (cleanWord.includes(word) && word.length > bestMatch.length) {
                // –ù–∞–π–¥–µ–º –ø–æ–∑–∏—Ü–∏—é —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                const wordStart = cleanText.toLowerCase().indexOf(textWords[i].toLowerCase());
                if (wordStart !== -1) {
                    bestMatch = { index: wordStart, length: word.length, word: word };
                }
            }
        }
    });
    
    if (bestMatch.index === -1) {
        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–µ—Ä–≤–æ–µ —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω–æ–µ
        const firstWord = queryWords[0];
        const lowerText = text.toLowerCase();
        const searchIndex = lowerText.indexOf(firstWord);
        if (searchIndex !== -1) {
            bestMatch = { index: searchIndex, length: firstWord.length, word: firstWord };
        }
    }
    
    if (bestMatch.index === -1) {
        return text.slice(0, contextLength) + '...';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º –≤ –Ω–∞—á–∞–ª–µ
    const beforeContext = Math.min(30, bestMatch.index); // –Ω–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥
    const start = Math.max(0, bestMatch.index - beforeContext);
    const end = Math.min(text.length, bestMatch.index + contextLength);
    
    let fragment = text.slice(start, end);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    if (start > 0) fragment = '...' + fragment;
    if (end < text.length) fragment = fragment + '...';
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    queryWords.forEach(word => {
        if (word.length > 1) {
            const regex = new RegExp(`(${word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
            fragment = fragment.replace(regex, '<mark class="search-highlight">$1</mark>');
        }
    });
    
    return fragment;
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ overlay
let currentOverlaySearchRequest = null;

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Ç–µ–∫—Å—Ç—É –ø–µ—Å–Ω–∏ —Å Web Worker –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 * @param {string} searchTerm - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 * @param {boolean} showAddedOnly - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏
 */
async function filterAndDisplaySongs(searchTerm = '', category = '', showAddedOnly = false) {
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (currentOverlaySearchRequest) {
        searchWorkerManager.cancelSearch(currentOverlaySearchRequest);
        currentOverlaySearchRequest = null;
    }
    
    let filteredSongs = state.allSongs;
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É —á–µ—Ä–µ–∑ Web Worker (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å)
    if (searchTerm) {
        try {
            console.log(`üîç Overlay –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Worker: "${searchTerm}"`);
            
            const startTime = performance.now();
            const { results, metadata } = await searchWorkerManager.overlaySearch(searchTerm, state.allSongs, {
                category: category || undefined,
                enablePrioritySearch: true
            });
            const duration = performance.now() - startTime;
            
            console.log(`‚úÖ Overlay –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration.toFixed(2)}ms (Worker: ${metadata.duration.toFixed(2)}ms)`);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–æ—á–Ω—ã–µ –∏ –Ω–µ—á–µ—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            filteredSongs = [
                ...results.exactResults.map(r => r.song),
                ...results.fuzzyResults.map(r => r.song)
            ];
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Web Worker overlay –ø–æ–∏—Å–∫–∞, fallback:', error);
            
            // Fallback: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫
            const query = normalizeSearchQuery(searchTerm);
            filteredSongs = filteredSongs.filter(song => {
                // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
                const normalizedTitle = getNormalizedTitle(song);
                const titleMatch = normalizedTitle.includes(query);
                
                // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–µ—Å–Ω–∏ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
                const normalizedLyrics = getNormalizedLyrics(song);
                const lyricsMatch = normalizedLyrics.includes(query);
                
                return titleMatch || lyricsMatch;
            });
            
            // –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è fallback
            filteredSongs.sort((a, b) => {
                const aNormalizedTitle = getNormalizedTitle(a);
                const bNormalizedTitle = getNormalizedTitle(b);
                const aTitleMatch = aNormalizedTitle.includes(query);
                const bTitleMatch = bNormalizedTitle.includes(query);
                const aTitleStartsWith = aNormalizedTitle.startsWith(query);
                const bTitleStartsWith = bNormalizedTitle.startsWith(query);
                
                // 1. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Å–Ω–∏, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–ø—Ä–æ—Å–∞
                if (aTitleStartsWith && !bTitleStartsWith) return -1;
                if (!aTitleStartsWith && bTitleStartsWith) return 1;
                
                // 2. –ü–æ—Ç–æ–º –ø–µ—Å–Ω–∏, –≥–¥–µ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–Ω–æ –Ω–µ –≤ –Ω–∞—á–∞–ª–µ)
                if (aTitleMatch && !aTitleStartsWith && (!bTitleMatch || bTitleStartsWith)) return -1;
                if (bTitleMatch && !bTitleStartsWith && (!aTitleMatch || aTitleStartsWith)) return 1;
                
                // 3. –ù–∞–∫–æ–Ω–µ—Ü –ø–µ—Å–Ω–∏ –ø–æ —Ç–µ–∫—Å—Ç—É (–≥–¥–µ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)
                if (aTitleMatch && !bTitleMatch) return -1;
                if (!aTitleMatch && bTitleMatch) return 1;
                
                return 0;
            });
        }
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ Worker)
    if (category && searchTerm) {
        // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –±—ã–ª —á–µ—Ä–µ–∑ Worker —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π, —Ñ–∏–ª—å—Ç—Ä —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω
    } else if (category) {
        filteredSongs = filteredSongs.filter(song => song.sheet === category);
    }
    
    // –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ
    if (showAddedOnly) {
        filteredSongs = filteredSongs.filter(song => 
            addedSongsToCurrentSetlist.has(song.id)
        );
    }
    
    displaySongsGrid(filteredSongs, searchTerm);
}

function finishAddingSongs() {
    closeAddSongsOverlay();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤
    refreshSetlists();
    
    const mode = window.activeOverlayMode || 'create';
    const setlistName = window.activeSetlistName;
    
    if (addedSongsToCurrentSetlist.size > 0) {
        if (mode === 'create') {
            showNotification(`üéâ –°–µ—Ç-–ª–∏—Å—Ç "${setlistName}" —Å–æ–∑–¥–∞–Ω —Å ${addedSongsToCurrentSetlist.size} –ø–µ—Å–Ω—è–º–∏!`, 'success');
        } else {
            showNotification(`üéâ –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedSongsToCurrentSetlist.size} –ø–µ—Å–µ–Ω –≤ "${setlistName}"!`, 'success');
        }
    } else {
        if (mode === 'create') {
            showNotification(`‚úÖ –°–µ—Ç-–ª–∏—Å—Ç "${setlistName}" –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`, 'success');
        } else {
            showNotification(`‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ "${setlistName}" –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`, 'success');
        }
    }
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (mode === 'create') {
        currentCreatedSetlistId = null;
        currentCreatedSetlistName = '';
    }
    
    // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ overlay
    window.activeOverlayMode = null;
    window.activeSetlistId = null;
    window.activeSetlistName = null;
}

function handleSetlistSelect(setlist) {
    state.setCurrentSetlistId(setlist.id);
    ui.displaySelectedSetlist(setlist, handleFavoriteOrRepertoireSelect, handleRemoveSongFromSetlist);
}

async function handleSetlistDelete(setlistId, setlistName) {
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç "${setlistName}"?`)) {
        try {
            const wasSelected = state.currentSetlistId === setlistId;

            await api.deleteSetlist(setlistId);
            await refreshSetlists(); // This re-renders the list

            if (wasSelected) {
                state.setCurrentSetlistId(null);
                ui.clearSetlistSelection();
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ç-–ª–∏—Å—Ç–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç.");
        }
    }
}

async function handleAddSongToSetlist() {
    const songId = ui.songSelect.value;
    const key = ui.keySelect.value;
    const setlistId = state.currentSetlistId;

    if (!songId) {
        alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é.");
        return;
    }
    if (!setlistId) {
        alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç-–ª–∏—Å—Ç.");
        return;
    }

    try {
        const result = await api.addSongToSetlist(setlistId, songId, key);

        if (result.status === 'duplicate_key') {
            if (confirm(`–≠—Ç–∞ –ø–µ—Å–Ω—è —É–∂–µ –µ—Å—Ç—å –≤ —Å–µ—Ç-–ª–∏—Å—Ç–µ –≤ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ${result.existingKey}. –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ${key}?`)) {
                await api.updateSongKeyInSetlist(setlistId, songId, key);
                alert("–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Å–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
            }
        } else if (result.status === 'duplicate_same') {
            alert("–≠—Ç–∞ –ø–µ—Å–Ω—è —É–∂–µ –µ—Å—Ç—å –≤ —Å–µ—Ç-–ª–∏—Å—Ç–µ —Å —Ç–∞–∫–æ–π –∂–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.");
        } else if (result.status === 'added') {
            alert("–ü–µ—Å–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Ç-–ª–∏—Å—Ç.");
        }

        // Refresh view
        const updatedSetlists = await api.loadSetlists();
        state.setSetlists(updatedSetlists);
        const updatedCurrentSetlist = updatedSetlists.find(s => s.id === setlistId);
        if (updatedCurrentSetlist) {
            state.setCurrentSetlistId(updatedCurrentSetlist.id); // Re-set state
            ui.displaySelectedSetlist(updatedCurrentSetlist, handleFavoriteOrRepertoireSelect, handleRemoveSongFromSetlist);
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏:", error);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ —Å–µ—Ç-–ª–∏—Å—Ç.");
    }
}

async function handleRemoveSongFromSetlist(songId, songName) {
    const setlistId = state.currentSetlistId;
    if (!setlistId) return;

    if (confirm(`–£–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é "${songName}" –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞?`)) {
        try {
            await api.removeSongFromSetlist(setlistId, songId);

            // Refresh view
            const updatedSetlists = await api.loadSetlists();
            state.setSetlists(updatedSetlists);
            const updatedCurrentSetlist = updatedSetlists.find(s => s.id === setlistId);
            if (updatedCurrentSetlist) {
                 state.setCurrentSetlistId(updatedCurrentSetlist.id); // Re-set state
                 ui.displaySelectedSetlist(updatedCurrentSetlist, handleFavoriteOrRepertoireSelect, handleRemoveSongFromSetlist);
            } else {
                // This case handles if the setlist was somehow deleted in the process
                state.setCurrentSetlistId(null);
                ui.clearSetlistSelection();
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ –∏–∑ —Å–µ—Ç-–ª–∏—Å—Ç–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é.");
        }
    }
}

async function handleAddToRepertoire() {
    const vocalistId = state.currentVocalistId;
    const songId = ui.songSelect.value;
    const key = ui.keySelect.value;

    if (!vocalistId) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∫–∞–ª–∏—Å—Ç–∞.");
        return;
    }
    if (!songId) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é.");
        return;
    }

    const song = state.allSongs.find(s => s.id === songId);
    if (!song) {
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏.");
        return;
    }

    try {
        const vocalistName = state.currentVocalistName || '–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–∫–∞–ª–∏—Å—Ç–∞';
        const result = await api.addToRepertoire(vocalistId, song, key);

        if (result.status === 'added') {
            alert(`–ü–µ—Å–Ω—è "${song.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä –¥–ª—è "${vocalistName}".`);
        } else if (result.status === 'updated') {
            alert(`–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Å–Ω–∏ "${song.name}" –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–µ –¥–ª—è "${vocalistName}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${key}.`);
        } else if (result.status === 'exists') {
            alert(`–ü–µ—Å–Ω—è "${song.name}" —É–∂–µ –µ—Å—Ç—å –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–µ –¥–ª—è "${vocalistName}" —Å —Ç–æ–π –∂–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞
        ui.updateRepertoireButton(song);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä:", error);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä.");
    }
}

async function refreshSetlists() {
    try {
        const setlists = await api.loadSetlists();
        state.setSetlists(setlists);
        ui.renderSetlists(setlists, handleSetlistSelect, handleSetlistDelete);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤:", error);
        ui.renderSetlists([], handleSetlistSelect, handleSetlistDelete); // Render empty list on error
    }
}

// --- SWIPE TO CLOSE SETUP ---
function setupSwipeToClose() {
    const panels = document.querySelectorAll('.side-panel');
    let touchStartX = 0;
    let touchStartY = 0;
    
    panels.forEach(panel => {
        panel.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        }, { passive: true });
        
        panel.addEventListener('touchend', (e) => {
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;
            const diffX = touchEndX - touchStartX;
            const diffY = touchEndY - touchStartY;
            
            if (Math.abs(diffY) > SWIPE_VERTICAL_LIMIT) return;
            
            const isLeftPanel = panel.id === 'setlists-panel' || panel.id === 'my-list-panel';
            const isRightPanel = panel.id === 'repertoire-panel';
            const swipedLeft = diffX < -SWIPE_THRESHOLD;
            const swipedRight = diffX > SWIPE_THRESHOLD;
            
            if ((isLeftPanel && swipedLeft) || (isRightPanel && swipedRight)) {
                ui.closeAllSidePanels();
            }
        }, { passive: true });
    });
}

// --- –£—Ç–∏–ª–∏—Ç—ã ---

/** –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é */
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: var(--container-background-color);
        color: var(--text-color);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 12px 20px;
        font-size: 0.9rem;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        transform: translateX(100%);
        transition: transform 0.3s ease;
        max-width: 300px;
        word-wrap: break-word;
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
    document.body.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// --- EVENT LISTENER SETUP ---
function setupEventListeners() {
    console.log('=== setupEventListeners START ===');
    console.log('ui object:', ui);
    console.log('ui.confirmKeySelection:', ui.confirmKeySelection);
    
    // –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–†–ê–ó–£
    console.log('=== IMMEDIATE TEST ===');
    const testBtn = document.getElementById('confirm-key-selection');
    console.log('Button found immediately:', testBtn);
    
    if (testBtn) {
        console.log('Adding test click handler...');
        testBtn.addEventListener('click', () => {
            console.log('TEST CLICK HANDLER WORKED!');
        });
    }
    
    // --- –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
    ui.sheetSelect.addEventListener('change', () => {
        ui.searchInput.value = '';
        if(ui.searchResults) ui.searchResults.innerHTML = '';
        ui.populateSongSelect();
    });

    ui.songSelect.addEventListener('change', () => {
        const songId = ui.songSelect.value;
        const songData = songId ? state.allSongs.find(s => s.id === songId) : null;
        ui.displaySongDetails(songData);
    });

    ui.keySelect.addEventListener('change', () => {
        const songId = ui.keySelect.dataset.songId;
        const songData = songId ? state.allSongs.find(s => s.id === songId) : null;
        if(songData) {
            const newKey = ui.keySelect.value;
            const originalKey = songData['–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'];
            const title = songData.name;
            let finalHtml = core.getRenderedSongText(songData['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'], originalKey, newKey);
            
            // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –¥–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–æ–∫–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
            if (ui.songContent.classList.contains('split-columns')) {
                finalHtml = core.distributeSongBlocksToColumns(finalHtml);
            }
            
            const preElement = ui.songContent.querySelector('#song-display');
            const h2Element = ui.songContent.querySelector('h2');
            if (preElement) preElement.innerHTML = finalHtml;
            if (h2Element) h2Element.textContent = `${title} ‚Äî ${newKey}`;
        }
    });

    // –§—É–Ω–∫—Ü–∏—è debounce –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    let currentMainSearchRequest = null;
    
    // –°–æ–∑–¥–∞–µ–º debounced –≤–µ—Ä—Å–∏—é –ø–æ–∏—Å–∫–∞ —Å Web Worker –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    const performSearch = async (rawQuery) => {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (currentMainSearchRequest) {
            searchWorkerManager.cancelSearch(currentMainSearchRequest);
            currentMainSearchRequest = null;
        }
        
        if(!rawQuery) {
            if(ui.searchResults) ui.searchResults.innerHTML = '';
            return;
        }
        
        const query = normalizeSearchQuery(rawQuery);
        if(!query) {
            if(ui.searchResults) ui.searchResults.innerHTML = '';
            return;
        }
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Worker –¥–ª—è –ø–æ–∏—Å–∫–∞
            console.log(`üîç –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Worker: "${rawQuery}"`);
            
            const startTime = performance.now();
            const { results, metadata } = await searchWorkerManager.mainSearch(rawQuery, state.allSongs);
            const duration = performance.now() - startTime;
            
            console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration.toFixed(2)}ms (Worker: ${metadata.duration.toFixed(2)}ms)`);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–æ—á–Ω—ã–µ –∏ –Ω–µ—á–µ—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const allResults = [
                ...results.exactResults.map(r => r.song),
                ...results.fuzzyResults.map(r => r.song)
            ];
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞–ª–æ
            if (allResults.length === 0 && results.suggestions && results.suggestions.length > 0) {
                console.log('üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', results.suggestions);
                // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ UI
            }
            
            ui.displaySearchResults(allResults, (songMatch) => {
                ui.searchInput.value = songMatch.name;
                if(ui.searchResults) ui.searchResults.innerHTML = '';
                handleFavoriteOrRepertoireSelect(songMatch);
            }, rawQuery);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Web Worker –ø–æ–∏—Å–∫–∞, fallback:', error);
            
            // Fallback: –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ worker
            performFallbackSearch(rawQuery, query);
        }
    };
    
    // Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–µ–∑ Web Worker
    const performFallbackSearch = (rawQuery, query) => {
        let allResults = [];
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∑–∑–∏-–ø–æ–∏—Å–∫ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.searchEngine && typeof window.searchEngine.search === 'function') {
            const searchResults = window.searchEngine.search(rawQuery, state.allSongs);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–æ—á–Ω—ã–µ –∏ –Ω–µ—á–µ—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            allResults = [
                ...searchResults.exactResults.map(r => r.song),
                ...searchResults.fuzzyResults.map(r => r.song)
            ];
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞–ª–æ
            if (allResults.length === 0 && searchResults.suggestions.length > 0) {
                console.log('üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', searchResults.suggestions);
                // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ UI
            }
        } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫
            allResults = state.allSongs.filter(song => {
                // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
                const normalizedTitle = getNormalizedTitle(song);
                const titleMatch = normalizedTitle.includes(query);
                
                // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–µ—Å–Ω–∏ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
                const normalizedLyrics = getNormalizedLyrics(song);
                const lyricsMatch = normalizedLyrics.includes(query);
                
                return titleMatch || lyricsMatch;
            });
            
            // –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è ‚Üí —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ ‚Üí –ø–æ —Ç–µ–∫—Å—Ç—É
            allResults.sort((a, b) => {
                const aNormalizedTitle = getNormalizedTitle(a);
                const bNormalizedTitle = getNormalizedTitle(b);
                const aTitleMatch = aNormalizedTitle.includes(query);
                const bTitleMatch = bNormalizedTitle.includes(query);
                const aTitleStartsWith = aNormalizedTitle.startsWith(query);
                const bTitleStartsWith = bNormalizedTitle.startsWith(query);
                
                // 1. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Å–Ω–∏, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–ø—Ä–æ—Å–∞
                if (aTitleStartsWith && !bTitleStartsWith) return -1;
                if (!aTitleStartsWith && bTitleStartsWith) return 1;
                
                // 2. –ü–æ—Ç–æ–º –ø–µ—Å–Ω–∏, –≥–¥–µ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–Ω–æ –Ω–µ –≤ –Ω–∞—á–∞–ª–µ)
                if (aTitleMatch && !aTitleStartsWith && (!bTitleMatch || bTitleStartsWith)) return -1;
                if (bTitleMatch && !bTitleStartsWith && (!aTitleMatch || aTitleStartsWith)) return 1;
                
                // 3. –ù–∞–∫–æ–Ω–µ—Ü –ø–µ—Å–Ω–∏ –ø–æ —Ç–µ–∫—Å—Ç—É (–≥–¥–µ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)
                if (aTitleMatch && !bTitleMatch) return -1;
                if (!aTitleMatch && bTitleMatch) return 1;
                
                return 0;
            });
        }
        
        ui.displaySearchResults(allResults, (songMatch) => {
            ui.searchInput.value = songMatch.name;
            if(ui.searchResults) ui.searchResults.innerHTML = '';
            handleFavoriteOrRepertoireSelect(songMatch);
        }, rawQuery);
    };

    const debouncedSearch = debounce(performSearch, 150);

    ui.searchInput.addEventListener('input', () => {
        const rawQuery = ui.searchInput.value.trim();
        debouncedSearch(rawQuery);
    });
    
    ui.searchInput.addEventListener('blur', () => setTimeout(() => { if(ui.searchResults) ui.searchResults.innerHTML = '' }, 200));

    // --- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –ø–µ—Å–Ω–µ–π ---
    ui.zoomInButton.addEventListener('click', () => {
        state.setCurrentFontSize(Math.min(state.currentFontSize + 2, 30));
        ui.updateFontSize();
    });
    ui.zoomOutButton.addEventListener('click', () => {
        state.setCurrentFontSize(Math.max(MIN_FONT_SIZE, state.currentFontSize - 2));
        ui.updateFontSize();
    });

    ui.splitTextButton.addEventListener('click', () => {
        const lyricsElement = ui.songContent.querySelector('#song-display');
        if (lyricsElement && lyricsElement.textContent?.trim()) {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å –¥–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            ui.songContent.classList.toggle('split-columns');
            
            // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–µ—Å–Ω—é —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
            const songId = ui.songSelect.value;
            const songData = songId ? state.allSongs.find(s => s.id === songId) : null;
            if (songData) {
                const currentKey = ui.keySelect.value;
                const originalKey = songData['–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'];
                let finalHtml = core.getRenderedSongText(songData['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'], originalKey, currentKey);
                
                // –ï—Å–ª–∏ —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–µ–Ω –¥–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–æ–∫–∏
                if (ui.songContent.classList.contains('split-columns')) {
                    finalHtml = core.distributeSongBlocksToColumns(finalHtml);
                }
                
                lyricsElement.innerHTML = finalHtml;
            }
            
            ui.updateSplitButton();
        } else {
            alert('–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.');
        }
    });

    ui.toggleChordsButton.addEventListener('click', () => {
        if (!ui.songSelect.value) return;
        state.setAreChordsVisible(!state.areChordsVisible);
        ui.songContent.classList.toggle('chords-hidden', !state.areChordsVisible);
        
        // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫–∏ —Å —Ç–æ–ª—å–∫–æ –∞–∫–∫–æ—Ä–¥–∞–º–∏
        ui.toggleChordOnlyBlocks(!state.areChordsVisible);
        
        ui.updateToggleChordsButton();
    });

    ui.chordsOnlyButton.addEventListener('click', () => {
        if (!ui.songSelect.value) return;
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º "—Ç–æ–ª—å–∫–æ –∞–∫–∫–æ—Ä–¥—ã"
        state.setIsChordsOnlyMode(!state.isChordsOnlyMode);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –∫–ª–∞—Å—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        ui.songContent.classList.toggle('chords-only-mode', state.isChordsOnlyMode);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        const presentationContent = document.querySelector('.presentation-content');
        if (presentationContent) {
            presentationContent.classList.toggle('chords-only-mode', state.isChordsOnlyMode);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏
        ui.updateChordsOnlyButton();
        ui.updateToggleChordsButton();
    });

    // --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã ---
    ui.themeToggleButton.addEventListener('click', () => {
        const currentTheme = document.body.dataset.theme;
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        ui.applyTheme(newTheme);
    });

    // --- –ú–µ—Ç—Ä–æ–Ω–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ metronome.js ---

    // --- –ë–æ–∫–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏ ---
    ui.toggleSetlistsButton.addEventListener('click', async () => {
        const isAlreadyOpen = ui.setlistsPanel.classList.contains('open');
        ui.closeAllSidePanels();
        if (!isAlreadyOpen) {
            ui.toggleSetlistsButton.classList.add('loading');
            try {
                ui.setlistsPanel.classList.add('open');
                await refreshSetlists();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤:', error);
            } finally {
                ui.toggleSetlistsButton.classList.remove('loading');
            }
        }
    });

    ui.toggleMyListButton.addEventListener('click', async () => {
        const isAlreadyOpen = ui.myListPanel.classList.contains('open');
        ui.closeAllSidePanels();
        if (!isAlreadyOpen) {
            ui.toggleMyListButton.classList.add('loading');
            try {
                ui.myListPanel.classList.add('open');
                // Logic to load and render favorites
                const favoriteSongs = state.allSongs.filter(song => 
                    state.favorites.some(fav => fav.songId === song.id)
                ).map(song => {
                    const fav = state.favorites.find(f => f.songId === song.id);
                    return { ...song, preferredKey: fav.preferredKey };
                });
                ui.renderFavorites(favoriteSongs, handleFavoriteOrRepertoireSelect, async (songId) => {
                    if(confirm("–£–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é –∏–∑ '–ú–æ–∏—Ö'?")) {
                        try {
                            await api.removeFromFavorites(songId);
                            // Refresh list after deletion
                            ui.toggleMyListButton.click();
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
                            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞');
                        }
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
            } finally {
                ui.toggleMyListButton.classList.remove('loading');
            }
        }
    });

    ui.toggleRepertoireButton.addEventListener('click', async () => {
        const isAlreadyOpen = ui.repertoirePanel.classList.contains('open');
        ui.closeAllSidePanels();
        if (!isAlreadyOpen) {
            ui.toggleRepertoireButton.classList.add('loading');
            try {
                ui.repertoirePanel.classList.add('open');
                api.loadRepertoire(state.currentVocalistId, handleRepertoireUpdate);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞:', error);
            } finally {
                ui.toggleRepertoireButton.classList.remove('loading');
            }
        }
    });

    ui.vocalistSelect.addEventListener('change', (e) => {
        state.setCurrentVocalistId(e.target.value);
        const selectedOption = e.target.options[e.target.selectedIndex];
        state.setCurrentVocalistName(selectedOption.value ? selectedOption.text : null);
        api.loadRepertoire(state.currentVocalistId, handleRepertoireUpdate);
    });

    [ui.repertoireViewKeyBtn, ui.repertoireViewSheetBtn, ui.repertoireViewAllBtn].forEach(button => {
        button.addEventListener('click', () => {
            const newMode = button.id.includes('key') ? 'byKey' : button.id.includes('sheet') ? 'bySheet' : 'allAlphabetical';
            state.setCurrentRepertoireViewMode(newMode);
            ui.renderRepertoire(handleFavoriteOrRepertoireSelect);
        });
    });

    // --- –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è ---
    ui.presentationCloseBtn.addEventListener('click', () => {
        ui.presentationOverlay.classList.remove('visible');
    });
    ui.presPrevBtn.addEventListener('click', () => {
        state.setCurrentPresentationIndex(state.currentPresentationIndex - 1);
        ui.displayCurrentPresentationSong();
    });
    ui.presNextBtn.addEventListener('click', () => {
        state.setCurrentPresentationIndex(state.currentPresentationIndex + 1);
        ui.displayCurrentPresentationSong();
    });
    ui.presSplitTextBtn.addEventListener('click', () => {
        state.setIsPresentationSplit(!state.isPresentationSplit);
        ui.presentationContent.classList.toggle('split-columns', state.isPresentationSplit);
        
        // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–µ—Å–Ω—é –≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        ui.displayCurrentPresentationSong();
        
        ui.updatePresentationSplitButtonState();
    });
    
    // --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–º–µ—Ç–æ–∫ ---
    ui.saveNoteButton.addEventListener('click', handleSaveNote);
    ui.cancelNoteButton.addEventListener('click', closeNotesModal);
    ui.closeNoteModalX.addEventListener('click', closeNotesModal);
    ui.notesModal.addEventListener('click', (e) => { if (e.target === ui.notesModal) closeNotesModal(); });
    document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && ui.notesModal.classList.contains('visible')) closeNotesModal(); });

    // --- –°–µ—Ç-–ª–∏—Å—Ç—ã - –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è dropdown ---
    
    // Dropdown –∫–Ω–æ–ø–∫–∞
    ui.setlistDropdownBtn.addEventListener('click', async () => {
        const isOpen = ui.setlistDropdownMenu.classList.contains('show');
        if (isOpen) {
            ui.setlistDropdownMenu.classList.remove('show');
            ui.setlistDropdownBtn.classList.remove('active');
        } else {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ dropdown
            try {
                await refreshSetlists();
                ui.setlistDropdownMenu.classList.add('show');
                ui.setlistDropdownBtn.classList.add('active');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤:', error);
                ui.setlistDropdownMenu.classList.add('show');
                ui.setlistDropdownBtn.classList.add('active');
            }
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.modern-selector')) {
            ui.setlistDropdownMenu.classList.remove('show');
            ui.setlistDropdownBtn.classList.remove('active');
        }
    });

    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    ui.createNewSetlistHeaderBtn.addEventListener('click', () => {
        ui.createSetlistModal.classList.add('show');
        ui.newSetlistNameInput.value = '';
        ui.newSetlistNameInput.focus();
    });

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç-–ª–∏—Å—Ç–∞
    ui.closeCreateModal.addEventListener('click', closeCreateSetlistModal);
    ui.cancelCreateSetlist.addEventListener('click', closeCreateSetlistModal);
    ui.createSetlistButton.addEventListener('click', handleCreateSetlist);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    ui.createSetlistModal.addEventListener('click', (e) => {
        if (e.target === ui.createSetlistModal) {
            closeCreateSetlistModal();
        }
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞ –ø–æ Enter
    ui.newSetlistNameInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            handleCreateSetlist();
        } else if (e.key === 'Escape') {
            closeCreateSetlistModal();
        }
    });
    
    // –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
    if (ui.nameCharCount) {
        ui.newSetlistNameInput.addEventListener('input', (e) => {
            ui.nameCharCount.textContent = e.target.value.length;
        });
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω
    if (ui.closeConfirmModal) {
        ui.closeConfirmModal.addEventListener('click', closeAddSongsConfirmModal);
    }
    if (ui.skipAddSongs) {
        ui.skipAddSongs.addEventListener('click', closeAddSongsConfirmModal);
    }
    if (ui.startAddSongs) {
        ui.startAddSongs.addEventListener('click', startAddingSongs);
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å" –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ setlist
    if (ui.addSongBtn) {
        ui.addSongBtn.addEventListener('click', () => {
            console.log('=== ADD SONG BTN CLICKED ===');
            console.log('currentSetlistId:', state.currentSetlistId);
            
            if (!state.currentSetlistId) {
                showNotification('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç-–ª–∏—Å—Ç', 'error');
                return;
            }
            
            // –ù–∞—Ö–æ–¥–∏–º setlist –ø–æ ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
            const currentSetlist = state.setlists.find(s => s.id === state.currentSetlistId);
            const setlistName = currentSetlist ? currentSetlist.name : '–°–µ—Ç-–ª–∏—Å—Ç';
            
            console.log('Found setlist:', currentSetlist);
            console.log('setlistName:', setlistName);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º overlay –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            startAddingSongs('edit', state.currentSetlistId, setlistName);
        });
    }
    
    if (ui.addSongsConfirmModal) {
        ui.addSongsConfirmModal.addEventListener('click', (e) => {
            if (e.target === ui.addSongsConfirmModal) {
                closeAddSongsConfirmModal();
            }
        });
    }

    // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω
    if (ui.closeAddSongs) {
        ui.closeAddSongs.addEventListener('click', closeAddSongsOverlay);
    }
    if (ui.finishAddingSongs) {
        ui.finishAddingSongs.addEventListener('click', finishAddingSongs);
    }
    
    // –ü–æ–∏—Å–∫ –ø–µ—Å–µ–Ω
    if (ui.songSearchInput && ui.clearSearch && ui.categoryFilter && ui.showAddedOnly) {
        // –°–æ–∑–¥–∞–µ–º debounced –≤–µ—Ä—Å–∏—é –ø–æ–∏—Å–∫–∞ –¥–ª—è overlay (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫)
        const performOverlaySearch = (searchTerm) => {
            const category = ui.categoryFilter.value;
            const showAddedOnly = ui.showAddedOnly.classList.contains('active');
            filterAndDisplaySongs(searchTerm, category, showAddedOnly);
        };
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é performOverlayDropdownSearch
        
        const debouncedOverlaySearch = debounce(performOverlaySearch, 150);
        const debouncedOverlayDropdownSearch = debounce(performOverlayDropdownSearch, 200);
        
        ui.songSearchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.trim();
            ui.clearSearch.style.display = searchTerm ? 'flex' : 'none';
            
            if (searchTerm) {
                // –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º dropdown —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                debouncedOverlayDropdownSearch(searchTerm);
            } else {
                // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, —Å–∫—Ä—ã–≤–∞–µ–º dropdown –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
                hideOverlaySearchResults();
                debouncedOverlaySearch('');
            }
        });
        
        ui.clearSearch.addEventListener('click', () => {
            ui.songSearchInput.value = '';
            ui.clearSearch.style.display = 'none';
            
            // –°–∫—Ä—ã–≤–∞–µ–º dropdown
            hideOverlaySearchResults();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
            const category = ui.categoryFilter.value;
            const showAddedOnly = ui.showAddedOnly.classList.contains('active');
            filterAndDisplaySongs('', category, showAddedOnly);
        });
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        ui.categoryFilter.addEventListener('change', (e) => {
            const searchTerm = ui.songSearchInput.value.trim();
            const showAddedOnly = ui.showAddedOnly.classList.contains('active');
            filterAndDisplaySongs(searchTerm, e.target.value, showAddedOnly);
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ
        ui.showAddedOnly.addEventListener('click', () => {
            ui.showAddedOnly.classList.toggle('active');
            
            const searchTerm = ui.songSearchInput.value.trim();
            const category = ui.categoryFilter.value;
            const showAddedOnly = ui.showAddedOnly.classList.contains('active');
            filterAndDisplaySongs(searchTerm, category, showAddedOnly);
        });
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if (ui.closeKeyModal) {
        ui.closeKeyModal.addEventListener('click', closeKeySelectionModal);
    }
    if (ui.cancelKeySelection) {
        ui.cancelKeySelection.addEventListener('click', closeKeySelectionModal);
    }
    if (ui.confirmKeySelection) {
        console.log('Adding event listener to confirmKeySelection button');
        ui.confirmKeySelection.addEventListener('click', (e) => {
            console.log('confirmKeySelection button clicked!', e);
            confirmAddSongWithKey();
        });
    } else {
        console.error('confirmKeySelection button not found!');
    }
    
    if (ui.keySelectionModal) {
        ui.keySelectionModal.addEventListener('click', (e) => {
            if (e.target === ui.keySelectionModal) {
                closeKeySelectionModal();
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('key-btn')) {
            currentSelectedKey = e.target.dataset.key;
            updateKeyButtons();
        }
        
        // –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø
        if (e.target.id === 'confirm-key-selection' || e.target.closest('#confirm-key-selection')) {
            console.log('=== CONFIRM BUTTON CLICKED VIA DELEGATION ===');
            console.log('Target:', e.target);
            console.log('Target ID:', e.target.id);
            console.log('Target classes:', e.target.className);
            console.log('Closest button:', e.target.closest('#confirm-key-selection'));
            console.log('Event type:', e.type);
            console.log('Event bubbles:', e.bubbles);
            
            e.preventDefault();
            e.stopPropagation();
            
            console.log('Calling confirmAddSongWithKey...');
            confirmAddSongWithKey();
        }
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê –í–°–ï –ö–õ–ò–ö–ò –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï
        if (e.target.closest('#key-selection-modal')) {
            console.log('=== CLICK IN KEY SELECTION MODAL ===');
            console.log('Target:', e.target);
            console.log('Target tag:', e.target.tagName);
            console.log('Target ID:', e.target.id);
            console.log('Target classes:', e.target.className);
        }
    });

    // --- –†–µ–¥–∞–∫—Ç–æ—Ä –ø–µ—Å–µ–Ω ---
    ui.editSongButton.addEventListener('click', () => {
        console.log('–ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∞');
        const songData = ui.getCurrentSongData();
        console.log('–î–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏:', songData);
        if (songData) {
            console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –ø–µ—Å–Ω–∏:', songData.name);
            ui.openSongEditor(songData);
        } else {
            console.log('–î–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    });

    ui.saveEditButton.addEventListener('click', async () => {
        const songData = ui.getCurrentSongData();
        const newContent = ui.songEditTextarea.value.trim();
        
        if (!songData || !newContent) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç');
            return;
        }
        
        try {
            await api.saveSongEdit(songData.id, newContent);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            songData['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] = newContent;
            songData.hasWebEdits = true;
            songData.lastEditedInApp = new Date();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Å–Ω–∏
            ui.displaySongDetails(songData);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
            ui.closeSongEditor();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showNotification('‚úÖ –ü–µ—Å–Ω—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', 'success');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message);
        }
    });

    ui.cancelEditButton.addEventListener('click', () => {
        ui.closeSongEditor();
    });

    ui.closeEditorButton.addEventListener('click', () => {
        ui.closeSongEditor();
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
    ui.songEditorOverlay.addEventListener('click', (e) => {
        if (e.target === ui.songEditorOverlay) {
            ui.closeSongEditor();
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && ui.songEditorOverlay.classList.contains('visible')) {
            ui.closeSongEditor();
        }
    });

    ui.revertToOriginalButton.addEventListener('click', async () => {
        const songData = ui.getCurrentSongData();
        if (!songData) return;
        
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã? –í—Å–µ –≤–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
            return;
        }
        
        try {
            await api.revertToOriginal(songData.id);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏
            delete songData['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'];
            songData.hasWebEdits = false;
            delete songData.lastEditedInApp;
            delete songData.editedBy;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            ui.displaySongDetails(songData);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
            ui.closeSongEditor();
            
            showNotification('üîÑ –ü–µ—Å–Ω—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É', 'info');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É: ' + error.message);
        }
    });

    // --- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ ---
    document.addEventListener('click', (e) => {
        // –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
        if (e.target.id !== 'search-input') {
            if(ui.searchResults) ui.searchResults.innerHTML = '';
        }
        
        // –ö–ª–∏–∫ –ø–æ –∞–∫–∫–æ—Ä–¥—É –≤ —Ç–µ–∫—Å—Ç–µ –ø–µ—Å–Ω–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω—ã —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        // –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ "—Ç–æ–ª—å–∫–æ –∞–∫–∫–æ—Ä–¥—ã"
        if (e.target.closest('#song-content #song-display') && !state.isChordsOnlyMode) {
            const chordEl = e.target.closest('.chord');
            if (chordEl) {
                ui.keySelect.value = chordEl.textContent;
                ui.keySelect.dispatchEvent(new Event('change'));
            }
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        if(e.target.closest('#copy-text-button')) {
            const preElement = ui.songContent.querySelector('#song-display');
            if (preElement) {
                navigator.clipboard.writeText(preElement.innerText).then(() => {
                    const copyButton = e.target.closest('#copy-text-button');
                    if (copyButton) {
                        copyButton.innerHTML = '<i class="fas fa-check"></i>';
                        setTimeout(() => {
                            if (copyButton) {
                                copyButton.innerHTML = '<i class="far fa-copy"></i>';
                            }
                        }, 1500);
                    }
                });
            }
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–µ–π –ø–æ –∫–Ω–æ–ø–∫–µ-—Å—Ç—Ä–µ–ª–∫–µ
        const closeButton = e.target.closest('.side-panel-close-btn');
        if (closeButton) {
            ui.closeAllSidePanels();
            return;
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–µ –æ–±–ª–∞—Å—Ç–∏
        const openPanel = document.querySelector('.side-panel.open');
        if (openPanel && !openPanel.contains(e.target) && !e.target.closest('.mobile-nav-button')) {
            ui.closeAllSidePanels();
        }
    });

    ui.favoriteButton.addEventListener('click', async () => {
        const songId = ui.songSelect.value;
        const key = ui.keySelect.value;
        const songName = state.allSongs.find(s=>s.id === songId)?.name || '–≠—Ç—É –ø–µ—Å–Ω—é';
        if (!songId) { alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é."); return; }

        const result = await api.addToFavorites(songId, key);
        
        if (result.status === 'added') {
            alert(`–ü–µ—Å–Ω—è "${songName}" (${result.key}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ '–ú–æ–∏'.`);
        } else if (result.status === 'updated') {
            alert(`–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Å–Ω–∏ "${songName}" –≤ '–ú–æ–∏—Ö' –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${result.key}.`);
        } else if (result.status === 'exists') {
            alert(`–ü–µ—Å–Ω—è "${songName}" —É–∂–µ –µ—Å—Ç—å –≤ '–ú–æ–∏—Ö' —Å —Ç–æ–π –∂–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.`);
        }
    });

    ui.addToSetlistButton.addEventListener('click', handleAddSongToSetlist);

    ui.repertoireButton.addEventListener('click', handleAddToRepertoire);
}


// --- INITIALIZATION ---
document.addEventListener('DOMContentLoaded', async () => {
    console.log("=== DOM loaded ===");
    console.log("Checking key elements:");
    console.log("confirm-key-selection element:", document.getElementById('confirm-key-selection'));
    console.log("key-selection-modal element:", document.getElementById('key-selection-modal'));
    console.log("add-songs-overlay element:", document.getElementById('add-songs-overlay'));
    
    if(ui.loadingIndicator) ui.loadingIndicator.style.display = 'block';

    let initialTheme = 'dark';
    try {
        const savedTheme = localStorage.getItem('theme');
        initialTheme = (savedTheme === 'light' || savedTheme === 'dark') ? savedTheme : (window.matchMedia?.('(prefers-color-scheme: light)')?.matches ? 'light' : 'dark');
    } catch (e) { console.error(e); }
    ui.applyTheme(initialTheme);
    
    setupEventListeners();
    setupSwipeToClose();
    ui.updateFontSize();
    metronomeUI.initMetronomeUI().catch(console.error);
    
    // Make metronome UI available globally for backward compatibility
    window.metronomeUI = metronomeUI;
    
    // Make search worker manager available globally  
    window.searchWorkerManager = searchWorkerManager;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ui.songContent.classList.add('split-columns');
    ui.updateSplitButton();

    try {
        await api.loadAllSongsFromFirestore();
        ui.populateSheetSelect();
        ui.populateSongSelect();

        const vocalists = await api.loadVocalists();
        ui.populateVocalistSelect(vocalists);
        
        // core.loadAudioFile(); // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û - –≤—ã–∑—ã–≤–∞–µ—Ç CORS –æ—à–∏–±–∫–∏ –∏ –º–æ–∂–µ—Ç –ª–æ–º–∞—Ç—å layout

    } catch (error) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
        document.body.innerHTML = `<div style="color: red; padding: 20px;">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.</div>`;
    } finally {
        if(ui.loadingIndicator) ui.loadingIndicator.style.display = 'none';
    }

    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (window.innerWidth <= 480) {
        const observer = new MutationObserver(() => {
            document.querySelectorAll('.side-panel').forEach(panel => {
                if (panel.classList.contains('open')) {
                    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ï –†–ê–ó–ú–ï–†–´
                    const maxWidth = Math.min(280, window.innerWidth * 0.85);
                    panel.style.width = maxWidth + 'px';
                    panel.style.maxWidth = maxWidth + 'px';
                    
                    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï
                    panel.style.position = 'fixed';
                    panel.style.left = '0';
                    panel.style.right = 'auto';
                    panel.style.top = '0';
                    panel.style.bottom = '0';
                    panel.style.height = '100vh';
                    panel.style.transform = 'translateX(0)';
                    panel.style.zIndex = '1000';
                    
                    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–ï–†–ï–ü–û–õ–ù–ï–ù–ò–ï
                    panel.style.overflow = 'hidden';
                    panel.style.boxSizing = 'border-box';
                }
            });
        });
        observer.observe(document.body, { 
            attributes: true, 
            subtree: true, 
            attributeFilter: ['class'] 
        });
    }
    


// ===== –ú–û–ë–ò–õ–¨–ù–´–ô OVERLAY –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ü–ï–°–ù–ò =====
    
    let currentMobileSong = null;
    
    /**
     * –ü–æ–∫–∞–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ overlay –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Å–Ω–∏
     */
    function showMobileSongPreview(song) {
        console.log('üîç –ü–æ–∫–∞–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ overlay –¥–ª—è –ø–µ—Å–Ω–∏:', song.name);
        
        currentMobileSong = song;
        
        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        const overlay = document.getElementById('mobile-song-preview-overlay');
        const titleElement = document.getElementById('mobile-song-title');
        const keySelector = document.getElementById('mobile-key-selector');
        const songTextElement = document.getElementById('mobile-song-text');
        
        if (!overlay || !titleElement || !keySelector || !songTextElement) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–±–∏–ª—å–Ω–æ–≥–æ overlay');
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        titleElement.textContent = song.name;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        const originalKey = getSongKey(song);
        keySelector.value = originalKey;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
        displaySongTextInMobileOverlay(song, originalKey);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay
        overlay.classList.add('active');
        document.body.classList.add('overlay-active');
        
        console.log('‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–π overlay –ø–æ–∫–∞–∑–∞–Ω');
    }
    
    /**
     * –°–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ overlay
     */
    function hideMobileSongPreview() {
        console.log('üîí –°–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ overlay');
        
        const overlay = document.getElementById('mobile-song-preview-overlay');
        if (overlay) {
            overlay.classList.remove('active');
            document.body.classList.remove('overlay-active');
        }
        
        currentMobileSong = null;
        
        console.log('‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–π overlay —Å–∫—Ä—ã—Ç');
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–º overlay
     */
    function displaySongTextInMobileOverlay(song, selectedKey) {
        const songTextElement = document.getElementById('mobile-song-text');
        if (!songTextElement) return;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
        let songText = song.hasWebEdits 
            ? (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] || song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '') 
            : (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '');
        
        if (!songText) {
            songTextElement.innerHTML = '<div style="text-align: center; color: var(--label-color); font-style: italic;">–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>';
            return;
        }
        
        // –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –∞–∫–∫–æ—Ä–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const originalKey = getSongKey(song);
        if (selectedKey !== originalKey) {
            songText = transposeChords(songText, originalKey, selectedKey);
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–∫–∫–æ—Ä–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const formattedText = formatChordsInText(songText);
        
        songTextElement.innerHTML = formattedText;
        
        console.log(`üìù –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω (${originalKey} ‚Üí ${selectedKey})`);
    }
    
    /**
     * –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–æ—Ä–¥–æ–≤
     */
    function transposeChords(text, fromKey, toKey) {
        // –ï—Å–ª–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        if (fromKey === toKey) {
            return text;
        }
        
        // –ö–∞—Ä—Ç–∞ –∞–∫–∫–æ—Ä–¥–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const chordMap = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
        
        const fromIndex = chordMap.indexOf(fromKey);
        const toIndex = chordMap.indexOf(toKey);
        
        if (fromIndex === -1 || toIndex === -1) {
            console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${fromKey} ‚Üí ${toKey}`);
            return text;
        }
        
        const semitones = (toIndex - fromIndex + 12) % 12;
        
        // –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –∞–∫–∫–æ—Ä–¥—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
        return text.replace(/\[([^\]]+)\]/g, (match, chord) => {
            const transposedChord = transposeChord(chord.trim(), semitones);
            return `[${transposedChord}]`;
        });
    }
    
    /**
     * –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞
     */
    function transposeChord(chord, semitones) {
        const chordMap = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
        
        // –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –Ω–æ—Ç—É –∞–∫–∫–æ—Ä–¥–∞
        let rootNote = '';
        let suffix = '';
        
        if (chord.length >= 2 && chord[1] === '#') {
            rootNote = chord.substring(0, 2);
            suffix = chord.substring(2);
        } else {
            rootNote = chord[0];
            suffix = chord.substring(1);
        }
        
        const rootIndex = chordMap.indexOf(rootNote);
        if (rootIndex === -1) {
            return chord; // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        }
        
        const newRootIndex = (rootIndex + semitones) % 12;
        const newRootNote = chordMap[newRootIndex];
        
        return newRootNote + suffix;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    function formatChordsInText(text) {
        // –ó–∞–º–µ–Ω—è–µ–º –∞–∫–∫–æ—Ä–¥—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –Ω–∞ span —Å –∫–ª–∞—Å—Å–æ–º chord
        return text.replace(/\[([^\]]+)\]/g, '<span class="chord">$1</span>');
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ overlay
    document.addEventListener('DOMContentLoaded', () => {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ overlay
        const closeBtn = document.getElementById('close-mobile-song-preview');
        if (closeBtn) {
            closeBtn.addEventListener('click', hideMobileSongPreview);
        }
        
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        const keySelector = document.getElementById('mobile-key-selector');
        if (keySelector) {
            keySelector.addEventListener('change', (e) => {
                if (currentMobileSong) {
                    displaySongTextInMobileOverlay(currentMobileSong, e.target.value);
                }
            });
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ –≤ —Å–µ—Ç-–ª–∏—Å—Ç
        const addBtn = document.getElementById('add-song-to-setlist-mobile');
        if (addBtn) {
            addBtn.addEventListener('click', () => {
                if (currentMobileSong) {
                    const selectedKey = document.getElementById('mobile-key-selector').value;
                    confirmAddSongWithKey(currentMobileSong, selectedKey);
                    hideMobileSongPreview();
                }
            });
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay (–≤–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
        const overlay = document.getElementById('mobile-song-preview-overlay');
        if (overlay) {
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    hideMobileSongPreview();
                }
            });
        }
        
        // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø DROPDOWN –ü–û–ò–°–ö–ê =====
        
        // –°–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
        document.addEventListener('click', (e) => {
            const searchWrapper = document.querySelector('.search-input-wrapper');
            const dropdown = document.getElementById('overlay-search-results');
            
            if (searchWrapper && dropdown && !searchWrapper.contains(e.target)) {
                hideOverlaySearchResults();
            }
        });
        
        // –°–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤)
        const searchInput = document.getElementById('song-search-input');
        if (searchInput) {
            searchInput.addEventListener('blur', () => {
                // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —É—Å–ø–µ–ª —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∏–∫ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                setTimeout(() => {
                    const dropdown = document.getElementById('overlay-search-results');
                    if (dropdown && dropdown.style.display === 'block') {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞–¥ dropdown
                        const rect = dropdown.getBoundingClientRect();
                        const mouseX = event.clientX || 0;
                        const mouseY = event.clientY || 0;
                        
                        if (mouseX < rect.left || mouseX > rect.right || 
                            mouseY < rect.top || mouseY > rect.bottom) {
                            hideOverlaySearchResults();
                        }
                    }
                }, 150);
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º dropdown –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
            searchInput.addEventListener('focus', () => {
                const searchTerm = searchInput.value.trim();
                if (searchTerm) {
                    debouncedOverlayDropdownSearch(searchTerm);
                }
            });
        }
    });
});