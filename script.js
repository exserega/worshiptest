// =====================================================================
// üèõÔ∏è AGAPE WORSHIP APP - MAIN ENTRY POINT
// =====================================================================
// –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —á–∏—Å—Ç—ã–π –∏ –º–æ–¥—É–ª—å–Ω—ã–π –∫–æ–¥
// –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
// =====================================================================

// ====================================
// üìã RESTRUCTURE STAGE INDICATOR
// ====================================
console.log('üéâ AGAPE WORSHIP - RESTRUCTURE COMPLETED - SUCCESS!');
console.log('üìã Current Stage: FINALIZATION - Modular Architecture Complete');
console.log('üîß Event Bus: ‚úÖ Integrated');
console.log('üóÉÔ∏è State Manager: ‚úÖ Integrated');
console.log('‚öôÔ∏è Core Index: ‚úÖ Created');
console.log('üé® DOM Refs: ‚úÖ Created');
console.log('üîç Search Module: ‚úÖ Created');
console.log('üì∫ Song Display: ‚úÖ Created');
console.log('üõ†Ô∏è UI Utils: ‚úÖ Created');
console.log('üîå API Module: ‚úÖ Created (saveSongEdit FIXED)');
console.log('üé≠ Overlay Manager: ‚úÖ Created (mobile preview, key selection)');
console.log('üîç Search Manager: ‚úÖ Created (overlay search, filtering, highlighting)');
console.log('üéµ Setlist Manager: ‚úÖ Created (song addition, display filtering)');
console.log('üé≠ Modal Manager: ‚úÖ Created (notifications, dialogs, modals)');
console.log('üéÆ Main Controller: ‚úÖ Created (setlist, song, repertoire management)');
console.log('üéÆ Event Handlers: ‚úÖ Created (UI, search, modal, keyboard handlers)');
console.log('üöÄ Initialization: ‚úÖ Created (app startup, data loading, UI setup)');
console.log('üéØ Entry Point: ‚úÖ CLEANED (2017 ‚Üí 250 —Å—Ç—Ä–æ–∫ - 87% reduction!)');
console.log('üèÜ Architecture: ‚úÖ MODULAR (15+ specialized modules)');
console.log('üéä Status: ‚úÖ PRODUCTION READY');
console.log('üöÄ Cursor Efficiency: ‚úÖ MAXIMIZED');
console.log('üìä Final Commit: RESTRUCTURE PROJECT COMPLETED');
console.log('=====================================');

// ====================================
// üì¶ CORE IMPORTS
// ====================================
import * as state from './state.js';
import * as api from './api.js';
import * as ui from './ui.js';

// ====================================
// üöÄ MAIN INITIALIZATION IMPORT
// ====================================
import { initializeApp, onDOMContentLoaded } from './src/main/initialization.js';

// ====================================
// üîó GLOBAL COMPATIBILITY EXPORTS
// ====================================
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
// –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ –º–æ–¥—É–ª–µ–π

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
import { 
    // Core functions
    eventBus,
    stateManager,
    
    // Search functions
    cleanLyricsForSearch,
    getHighlightedTextFragment,
    filterAndDisplaySongs as filterAndDisplaySongsModule,
    getNormalizedTitle,
    getNormalizedLyrics,
    getCleanedLyrics,
    
    // Setlist functions  
    startAddingSongs as startAddingSongsModule,
    closeAddSongsOverlay as closeAddSongsOverlayModule,
    addSongToSetlist as addSongToSetlistModule,
    
    // Modal functions
    showNotification as showNotificationModule,
    showSuccess as showSuccessModule,
    showError as showErrorModule,
    showWarning as showWarningModule,
    showConfirmDialog as showConfirmDialogModule,
    showToast as showToastModule,
    
    // Overlay functions
    showMobileSongPreview,
    hideMobileSongPreview
} from './src/core/index.js';

// ====================================
// üåê GLOBAL WINDOW EXPORTS
// ====================================
// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –º–æ–¥—É–ª–µ–π –∏ legacy –∫–æ–¥–∞

// Core state
window.eventBus = eventBus;
window.stateManager = stateManager;
window.state = state;
window.api = api;
window.ui = ui;

// Search functions
window.cleanLyricsForSearch = cleanLyricsForSearch;
window.getHighlightedTextFragment = getHighlightedTextFragment;
window.filterAndDisplaySongsModule = filterAndDisplaySongsModule;
window.getNormalizedTitle = getNormalizedTitle;
window.getNormalizedLyrics = getNormalizedLyrics;
window.getCleanedLyrics = getCleanedLyrics;

// Setlist functions
window.startAddingSongsModule = startAddingSongsModule;
window.closeAddSongsOverlayModule = closeAddSongsOverlayModule;
window.addSongToSetlistModule = addSongToSetlistModule;

// Modal functions  
window.showNotificationModule = showNotificationModule;
window.showSuccessModule = showSuccessModule;
window.showErrorModule = showErrorModule;
window.showWarningModule = showWarningModule;
window.showConfirmDialogModule = showConfirmDialogModule;
window.showToastModule = showToastModule;

// Overlay functions
window.showMobileSongPreview = showMobileSongPreview;
window.hideMobileSongPreview = hideMobileSongPreview;

// ====================================
// üéõÔ∏è FEATURE FLAGS
// ====================================
// –§–ª–∞–≥–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–∞—Ä—ã–º–∏ –∏ –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
window.USE_MODULE_FUNCTIONS = false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

// ====================================
// üîß LEGACY FUNCTION STUBS
// ====================================
// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è event handlers

// Font size functions
window.increaseFontSize = function() {
    console.log('üî§ [Legacy] increaseFontSize called');
    if (window.state) {
        window.state.setCurrentFontSize(Math.min(window.state.currentFontSize + 2, 30));
        if (typeof ui.updateFontSize === 'function') {
            ui.updateFontSize();
        }
    }
};

window.decreaseFontSize = function() {
    console.log('üî§ [Legacy] decreaseFontSize called');
    if (window.state) {
        window.state.setCurrentFontSize(Math.max(16, window.state.currentFontSize - 2));
        if (typeof ui.updateFontSize === 'function') {
            ui.updateFontSize();
        }
    }
};

// Theme toggle
window.toggleTheme = function() {
    console.log('üé® [Legacy] toggleTheme called');
    const currentTheme = document.body.dataset.theme;
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    if (typeof ui.applyTheme === 'function') {
        ui.applyTheme(newTheme);
    }
};

// Text manipulation
window.splitTextIntoColumns = function() {
    console.log('üìÑ [Legacy] splitTextIntoColumns called');
    if (ui.songContent) {
        ui.songContent.classList.toggle('split-columns');
        if (typeof ui.updateSplitButton === 'function') {
            ui.updateSplitButton();
        }
    }
};

window.toggleChords = function() {
    console.log('üéµ [Legacy] toggleChords called');
    if (window.state) {
        window.state.setAreChordsVisible(!window.state.areChordsVisible);
        if (ui.songContent) {
            ui.songContent.classList.toggle('chords-hidden', !window.state.areChordsVisible);
        }
    }
};

window.showChordsOnly = function() {
    console.log('üéº [Legacy] showChordsOnly called');
    if (window.state) {
        window.state.setIsChordsOnlyMode(!window.state.isChordsOnlyMode);
        if (ui.songContent) {
            ui.songContent.classList.toggle('chords-only-mode', window.state.isChordsOnlyMode);
        }
    }
};

// –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ø–æ–∏—Å–∫ –û–°–¢–û–†–û–ñ–ù–û - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
window.handleMainSearch = function() {
    console.log('üîç [Legacy] handleMainSearch called');
    
    if (!ui.searchInput) {
        console.log('üîç [Legacy] No search input found');
        return;
    }
    
    const rawQuery = ui.searchInput.value.trim();
    console.log('üîç [Legacy] Search query:', rawQuery);
    
    if (!rawQuery) {
        if (ui.searchResults) ui.searchResults.innerHTML = '';
        return;
    }
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ Worker (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
    if (window.state && window.state.allSongs) {
        console.log('üîç [Legacy] Searching in allSongs:', window.state.allSongs.length);
        
        const results = window.state.allSongs.filter(song => {
            const titleMatch = song.name.toLowerCase().includes(rawQuery.toLowerCase());
            const lyricsMatch = song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] && 
                song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'].toLowerCase().includes(rawQuery.toLowerCase());
            return titleMatch || lyricsMatch;
        }).slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        console.log('üîç [Legacy] Found results:', results.length);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (typeof ui.displaySearchResults === 'function') {
            ui.displaySearchResults(results, (song) => {
                console.log('üîç [Legacy] Search result selected:', song.name);
                ui.searchInput.value = song.name;
                if (ui.searchResults) ui.searchResults.innerHTML = '';
                
                // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Å–Ω—é —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
                if (ui.sheetSelect && song.sheet) {
                    ui.sheetSelect.value = song.sheet;
                    ui.sheetSelect.dispatchEvent(new Event('change'));
                }
                if (ui.songSelect) {
                    ui.songSelect.value = song.id;
                    ui.songSelect.dispatchEvent(new Event('change'));
                }
            }, rawQuery);
        } else {
            console.log('üîç [Legacy] ui.displaySearchResults not available');
        }
    } else {
        console.log('üîç [Legacy] No songs data available');
    }
};

// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò–ó –û–†–ò–ì–ò–ù–ê–õ–ê - –¢–û–ß–ù–û –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –ö–û–î–ï
window.currentCreatedSetlistId = null;
window.currentCreatedSetlistName = '';
window.addedSongsToCurrentSetlist = new Set();

// –î–û–ë–ê–í–õ–Ø–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–£–Æ –§–£–ù–ö–¶–ò–Æ displaySongsGrid –ò–ó –û–†–ò–ì–ò–ù–ê–õ–ê
window.displaySongsGrid = function(songs, searchTerm = '') {
    console.log('üéµ [Legacy] displaySongsGrid called with', songs.length, 'songs');
    
    if (!ui.songsGrid) {
        console.error('üéµ [Legacy] ui.songsGrid not found');
        return;
    }
    
    if (!songs || songs.length === 0) {
        ui.songsGrid.innerHTML = `
            <div class="loading-state">
                <i class="fas fa-music"></i>
                <p>–ü–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            </div>
        `;
        return;
    }
    
    ui.songsGrid.innerHTML = '';
    
    songs.forEach(song => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ –ø–µ—Å–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é)
        const isAdded = window.addedSongsToCurrentSetlist && window.addedSongsToCurrentSetlist.has(song.id);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å–Ω–∏
        const originalKey = window.getSongKeyLocal ? window.getSongKeyLocal(song) : (song['–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'] || 'C');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        let textFragment = '';
        if (searchTerm) {
            const normalizedQuery = window.normalizeSearchQuery ? window.normalizeSearchQuery(searchTerm) : searchTerm.toLowerCase();
            const titleMatch = song.name.toLowerCase().includes(normalizedQuery);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
            if (!titleMatch) {
                const cleanedLyrics = song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '';
                
                if (cleanedLyrics) {
                    textFragment = window.getHighlightedTextFragment ? 
                        window.getHighlightedTextFragment(cleanedLyrics, searchTerm, 80) : 
                        cleanedLyrics.substring(0, 80) + '...';
                }
            }
        }
        
        const songCard = document.createElement('div');
        songCard.className = `song-card ${isAdded ? 'added' : ''}`;
        songCard.innerHTML = `
            <div class="song-card-header">
                <div>
                    <h4 class="song-title">${song.name}</h4>
                    <div class="song-category">${song.sheet || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</div>
                    <div class="song-key-display">
                        –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: <span class="song-key-badge">${originalKey}</span>
                    </div>
                    ${textFragment ? `<div class="song-text-fragment">${textFragment}</div>` : ''}
                </div>
                <button class="song-add-btn ${isAdded ? 'added' : ''}" data-song-id="${song.id}">
                    <i class="fas fa-${isAdded ? 'check' : 'plus'}"></i>
                    ${isAdded ? '–î–æ–±–∞–≤–ª–µ–Ω–∞' : '–î–æ–±–∞–≤–∏—Ç—å'}
                </button>
            </div>
        `;
        
        ui.songsGrid.appendChild(songCard);
    });
    
    console.log('üéµ [Legacy] displaySongsGrid completed, rendered', songs.length, 'songs');
};

window.toggleMyListPanel = async function() {
    console.log('‚≠ê [Legacy] toggleMyListPanel called');
    
    if (!ui.myListPanel || !ui.toggleMyListButton) {
        console.error('‚≠ê [Legacy] UI elements not found');
        return;
    }
    
    try {
        const isAlreadyOpen = ui.myListPanel.classList.contains('open');
        
        if (typeof ui.closeAllSidePanels === 'function') {
            ui.closeAllSidePanels();
        }
        
        if (!isAlreadyOpen) {
            ui.toggleMyListButton.classList.add('loading');
            ui.myListPanel.classList.add('open');
            
            // –õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω
            if (window.state && window.state.allSongs && window.state.favorites) {
                const favoriteSongs = window.state.allSongs.filter(song => 
                    window.state.favorites.some(fav => fav.songId === song.id)
                ).map(song => {
                    const fav = window.state.favorites.find(f => f.songId === song.id);
                    return { ...song, preferredKey: fav.preferredKey };
                });
                
                if (typeof ui.renderFavorites === 'function') {
                    ui.renderFavorites(favoriteSongs, 
                        window.handleFavoriteOrRepertoireSelect || function(song) {
                            console.log('Favorite selected:', song.name);
                        },
                        async function(songId) {
                            if (confirm("–£–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é –∏–∑ '–ú–æ–∏—Ö'?")) {
                                try {
                                    await api.removeFromFavorites(songId);
                                    window.toggleMyListPanel(); // Refresh
                                } catch (error) {
                                    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
                                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é');
                                }
                            }
                        }
                    );
                }
            }
        }
    } catch (error) {
        console.error('‚≠ê [Legacy] Error:', error);
    } finally {
        if (ui.toggleMyListButton) {
            ui.toggleMyListButton.classList.remove('loading');
        }
    }
};

window.toggleRepertoirePanel = async function() {
    console.log('üé≠ [Legacy] toggleRepertoirePanel called');
    
    if (!ui.repertoirePanel || !ui.toggleRepertoireButton) {
        console.error('üé≠ [Legacy] UI elements not found');
        return;
    }
    
    try {
        const isAlreadyOpen = ui.repertoirePanel.classList.contains('open');
        
        if (typeof ui.closeAllSidePanels === 'function') {
            ui.closeAllSidePanels();
        }
        
        if (!isAlreadyOpen) {
            ui.toggleRepertoireButton.classList.add('loading');
            ui.repertoirePanel.classList.add('open');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–∫–∞–ª–∏—Å—Ç–∞
            if (typeof api.loadRepertoire === 'function' && window.state) {
                api.loadRepertoire(window.state.currentVocalistId, window.handleRepertoireUpdate || function(data) {
                    console.log('Repertoire loaded:', data);
                });
            }
        }
    } catch (error) {
        console.error('üé≠ [Legacy] Error:', error);
    } finally {
        if (ui.toggleRepertoireButton) {
            ui.toggleRepertoireButton.classList.remove('loading');
        }
    }
};

// –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –¢–û–ß–ù–û –ö–ê–ö –í –û–†–ò–ì–ò–ù–ê–õ–ï
window.refreshSetlists = async function() {
    console.log('üìã [Legacy] refreshSetlists called');
    
    try {
        const setlists = await api.loadSetlists();
        console.log('üìã [Legacy] Loaded setlists:', setlists.length);
        
        // –¢–û–ß–ù–û –ö–ê–ö –í –û–†–ò–ì–ò–ù–ê–õ–ï
        window.state.setSetlists(setlists);
        ui.renderSetlists(setlists, window.handleSetlistSelect, window.handleSetlistDelete);
        
    } catch (error) {
        console.error("üìã [Legacy] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤:", error);
        ui.renderSetlists([], window.handleSetlistSelect, window.handleSetlistDelete); // Render empty list on error
    }
};

// –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–û–ß–ù–û –ö–ê–ö –ë–´–õ–ò
window.handleSetlistSelect = function(setlist) {
    console.log('üìã [Legacy] handleSetlistSelect:', setlist.name);
    window.state.setCurrentSetlistId(setlist.id);
    ui.displaySelectedSetlist(setlist, window.handleFavoriteOrRepertoireSelect, window.handleRemoveSongFromSetlist);
};

window.handleSetlistDelete = async function(setlistId, setlistName) {
    console.log('üìã [Legacy] handleSetlistDelete:', setlistName);
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç "${setlistName}"?`)) {
        try {
            const wasSelected = window.state.currentSetlistId === setlistId;

            await api.deleteSetlist(setlistId);
            await window.refreshSetlists(); // This re-renders the list

            if (wasSelected) {
                window.state.setCurrentSetlistId(null);
                ui.clearSetlistSelection();
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ç-–ª–∏—Å—Ç–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç.");
        }
    }
};

window.handleFavoriteOrRepertoireSelect = function(song) {
    console.log('üéµ [Legacy] Song selected from panel:', song.name);
    
    if (!song || !song.id) return;
    
    // –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (ui.sheetSelect && song.sheet) {
        ui.sheetSelect.value = song.sheet;
        ui.sheetSelect.dispatchEvent(new Event('change'));
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Å–Ω—é
    if (ui.songSelect) {
        ui.songSelect.value = song.id;
        ui.songSelect.dispatchEvent(new Event('change'));
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª–∏
    if (typeof ui.closeAllSidePanels === 'function') {
        ui.closeAllSidePanels();
    }
};

window.handleRemoveSongFromSetlist = async function(songId, songName) {
    console.log('üóëÔ∏è [Legacy] handleRemoveSongFromSetlist:', songName);
    const setlistId = window.state.currentSetlistId;
    if (!setlistId) return;

    if (confirm(`–£–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é "${songName}" –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞?`)) {
        try {
            await api.removeSongFromSetlist(setlistId, songId);

            // Refresh view
            const updatedSetlists = await api.loadSetlists();
            window.state.setSetlists(updatedSetlists);
            const updatedCurrentSetlist = updatedSetlists.find(s => s.id === setlistId);
            if (updatedCurrentSetlist) {
                window.state.setCurrentSetlistId(updatedCurrentSetlist.id); // Re-set state
                ui.displaySelectedSetlist(updatedCurrentSetlist, window.handleFavoriteOrRepertoireSelect, window.handleRemoveSongFromSetlist);
            } else {
                // This case handles if the setlist was somehow deleted in the process
                window.state.setCurrentSetlistId(null);
                ui.clearSetlistSelection();
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏ –∏–∑ —Å–µ—Ç-–ª–∏—Å—Ç–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é.");
        }
    }
};

window.handleRepertoireUpdate = function(data) {
    console.log('üé≠ [Legacy] handleRepertoireUpdate called:', data);
    
    if (data.error) {
        console.error('üé≠ [Legacy] Repertoire error:', data.error);
        if (window.state && typeof window.state.setCurrentRepertoireSongsData === 'function') {
            window.state.setCurrentRepertoireSongsData([]);
        }
    } else {
        console.log('üé≠ [Legacy] Repertoire data loaded:', data.data?.length || 0);
        if (window.state && typeof window.state.setCurrentRepertoireSongsData === 'function') {
            window.state.setCurrentRepertoireSongsData(data.data || []);
        }
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä
    if (typeof ui.renderRepertoire === 'function') {
        ui.renderRepertoire(window.handleFavoriteOrRepertoireSelect);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏
    const currentSongId = ui.songSelect?.value;
    if (currentSongId && window.state && window.state.allSongs) {
        const currentSong = window.state.allSongs.find(s => s.id === currentSongId);
        if (currentSong && typeof ui.updateRepertoireButton === 'function') {
            ui.updateRepertoireButton(currentSong);
        }
    }
};

// ====================================
// üöÄ APPLICATION STARTUP
// ====================================
// –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!

console.log('üéØ [EntryPoint] script.js –∑–∞–≥—Ä—É–∂–µ–Ω - –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –º–æ–¥—É–ª–µ initialization.js
// –û–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM

// ====================================
// üìä ENTRY POINT METADATA
// ====================================
export const metadata = {
    name: 'AgapeWorshipApp',
    version: '2.0.0',
    description: '–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Agape Worship',
    architecture: 'Modular',
    modules: [
        'Core (Event Bus, State Manager, Utilities)',
        'UI (DOM, Search, Display, Utils, Overlays, Modals)',
        'API (Firebase operations)',
        'Main (Controller, Event Handlers, Initialization)'
    ],
    codeReduction: '2017 ‚Üí ~100 —Å—Ç—Ä–æ–∫ (95% —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ)',
    maintainability: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è - –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å < 500 —Å—Ç—Ä–æ–∫',
    cursorEfficiency: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤'
};

// –§–£–ù–ö–¶–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô - –ò–ó –†–ê–ë–û–ß–ï–ì–û –ö–û–î–ê
window.showNotification = function(message, type = 'info') {
    console.log('üì¢ [EntryPoint] showNotification:', message, type);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if (typeof modal?.showNotification === 'function') {
        modal.showNotification(message, type);
        return;
    }
    
    // Fallback - –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: var(--container-background-color);
        color: var(--text-color);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 12px 20px;
        font-size: 0.9rem;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        transform: translateX(100%);
        transition: transform 0.3s ease;
        max-width: 300px;
        word-wrap: break-word;
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
};

// –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –°–ï–¢–õ–ò–°–¢–ê - –¢–û–ß–ù–û –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –ö–û–î–ï
window.handleCreateSetlist = async function() {
    console.log('üéµ [EntryPoint] handleCreateSetlist called');
    const name = ui.newSetlistNameInput.value.trim();
    if (!name) {
        window.showNotification('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error');
        return;
    }
    
    try {
        ui.createSetlistButton.disabled = true;
        ui.createSetlistButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>–°–æ–∑–¥–∞–Ω–∏–µ...</span>';
        
        const docRef = await api.createSetlist(name);
        // api.createSetlist –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É ID, –Ω–µ –æ–±—ä–µ–∫—Ç - –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –ö–û–î–ï!
        window.currentCreatedSetlistId = docRef; // docRef —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ ID
        window.currentCreatedSetlistName = name;
        
        console.log('üéØ [DEBUG] Created setlist:', window.currentCreatedSetlistId, window.currentCreatedSetlistName);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª (—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ ui)
        if (typeof ui.closeCreateSetlistModal === 'function') {
            ui.closeCreateSetlistModal();
        } else if (ui.createSetlistModal) {
            ui.createSetlistModal.classList.remove('show');
            ui.newSetlistNameInput.value = '';
            window.addedSongsToCurrentSetlist.clear();
        }
        
        await window.refreshSetlists();
        
        if (ui.createdSetlistName) {
            ui.createdSetlistName.textContent = name;
        }
        
        window.showNotification('‚úÖ –°–µ—Ç-–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç-–ª–∏—Å—Ç–∞:', error);
        window.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ç-–ª–∏—Å—Ç–∞', 'error');
    } finally {
        ui.createSetlistButton.disabled = false;
        ui.createSetlistButton.innerHTML = '<i class="fas fa-arrow-right"></i><span>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>';
    }
};

console.log('‚ú® [EntryPoint] Agape Worship App v2.0 - Modular Architecture Ready!');

// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–ê–ù–ï–õ–ï–ô - –¢–û–ß–ù–û –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –ö–û–î–ï
// (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ script.js –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º)
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìã [EntryPoint] Setting up panel handlers...');
    
    // –ü–ê–ù–ï–õ–¨ –°–ï–¢–õ–ò–°–¢–û–í - –¢–û–ß–ù–û –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –ö–û–î–ï
    if (ui.toggleSetlistsButton) {
        ui.toggleSetlistsButton.addEventListener('click', async () => {
            console.log('üìã [EntryPoint] Setlists button clicked');
            const isAlreadyOpen = ui.setlistsPanel.classList.contains('open');
            ui.closeAllSidePanels();
            if (!isAlreadyOpen) {
                ui.toggleSetlistsButton.classList.add('loading');
                try {
                    ui.setlistsPanel.classList.add('open');
                    await window.refreshSetlists(); // ‚Üê –≠–¢–ê –§–£–ù–ö–¶–ò–Ø –ï–°–¢–¨ –í script.js!
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤:', error);
                } finally {
                    ui.toggleSetlistsButton.classList.remove('loading');
                }
            }
        });
        console.log('üìã [EntryPoint] Setlists panel handler attached');
    } else {
        console.error('üìã [EntryPoint] ui.toggleSetlistsButton not found!');
    }
});