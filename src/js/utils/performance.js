/**
 * –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
 */
class PerformanceMonitor {
    constructor() {
        this.measurements = [];
        this.isEnabled = false;
    }
    
    /**
     * –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    enable() {
        this.isEnabled = true;
        console.log('üîç Performance Monitor –í–ö–õ–Æ–ß–ï–ù');
    }
    
    /**
     * –í—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    disable() {
        this.isEnabled = false;
        console.log('üîç Performance Monitor –í–´–ö–õ–Æ–ß–ï–ù');
    }
    
    /**
     * –ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
     */
    async measure(name, fn) {
        if (!this.isEnabled) {
            return await fn();
        }
        
        const startTime = performance.now();
        const startMemory = this.getMemoryUsage();
        
        try {
            const result = await fn();
            const endTime = performance.now();
            const endMemory = this.getMemoryUsage();
            
            const measurement = {
                name,
                duration: endTime - startTime,
                memoryDelta: endMemory - startMemory,
                timestamp: new Date().toISOString()
            };
            
            this.measurements.push(measurement);
            this.logMeasurement(measurement);
            
            return result;
        } catch (error) {
            const endTime = performance.now();
            console.error(`‚ùå Error in ${name}: ${error.message} (${endTime - startTime}ms)`);
            throw error;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
     */
    getMemoryUsage() {
        if (performance.memory) {
            return performance.memory.usedJSHeapSize;
        }
        return 0;
    }
    
    /**
     * –ó–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
     */
    logMeasurement(measurement) {
        const { name, duration, memoryDelta } = measurement;
        const durationColor = duration < 10 ? 'üü¢' : duration < 50 ? 'üü°' : 'üî¥';
        const memoryColor = memoryDelta < 1000 ? 'üü¢' : memoryDelta < 10000 ? 'üü°' : 'üî¥';
        
        console.log(
            `‚ö° ${name}: ${durationColor} ${duration.toFixed(2)}ms ${memoryColor} ${this.formatMemory(memoryDelta)}`
        );
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏
     */
    formatMemory(bytes) {
        if (bytes === 0) return '0B';
        if (Math.abs(bytes) < 1024) return `${bytes}B`;
        if (Math.abs(bytes) < 1024 * 1024) return `${(bytes / 1024).toFixed(1)}KB`;
        return `${(bytes / (1024 * 1024)).toFixed(1)}MB`;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    getStats() {
        if (this.measurements.length === 0) {
            return { message: '–ò–∑–º–µ—Ä–µ–Ω–∏–π –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å' };
        }
        
        const durations = this.measurements.map(m => m.duration);
        const memoryDeltas = this.measurements.map(m => m.memoryDelta);
        
        return {
            totalMeasurements: this.measurements.length,
            avgDuration: this.average(durations),
            minDuration: Math.min(...durations),
            maxDuration: Math.max(...durations),
            avgMemoryDelta: this.average(memoryDeltas),
            lastMeasurements: this.measurements.slice(-5)
        };
    }
    
    /**
     * –í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    average(arr) {
        return arr.length > 0 ? arr.reduce((a, b) => a + b, 0) / arr.length : 0;
    }
    
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è
     */
    clear() {
        this.measurements = [];
        console.log('üßπ –ò–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã');
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    showDetailedStats() {
        console.group('üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò');
        
        const stats = this.getStats();
        if (stats.message) {
            console.log(stats.message);
        } else {
            console.log(`üìà –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: ${stats.totalMeasurements}`);
            console.log(`‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${stats.avgDuration.toFixed(2)}ms`);
            console.log(`üöÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${stats.minDuration.toFixed(2)}ms`);
            console.log(`üêå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${stats.maxDuration.toFixed(2)}ms`);
            console.log(`üíæ –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${this.formatMemory(stats.avgMemoryDelta)}`);
            
            if (window.searchEngine && typeof window.searchEngine.getPerformanceStats === 'function') {
                console.log('üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞:');
                console.table(window.searchEngine.getPerformanceStats());
            }
        }
        
        console.groupEnd();
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
const performanceMonitor = new PerformanceMonitor();

// –í–∫–ª—é—á–∞–µ–º –≤ development —Ä–µ–∂–∏–º–µ
if (location.hostname === 'localhost' || location.hostname === '127.0.0.1') {
    performanceMonitor.enable();
}

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
 */
function measureSearchPerformance(searchFn) {
    return async (query, ...args) => {
        return await performanceMonitor.measure(
            `Search: "${query}"`,
            () => searchFn(query, ...args)
        );
    };
}

/**
 * –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
 */
function enablePerformanceMonitoring() {
    performanceMonitor.enable();
}

function disablePerformanceMonitoring() {
    performanceMonitor.disable();
}

function getPerformanceStats() {
    return performanceMonitor.getStats();
}

function showPerformanceStats() {
    performanceMonitor.showDetailedStats();
}

function clearPerformanceStats() {
    performanceMonitor.clear();
}

// –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (typeof window !== 'undefined') {
    window.searchPerformance = {
        enable: enablePerformanceMonitoring,
        disable: disablePerformanceMonitoring,
        stats: getPerformanceStats,
        show: showPerformanceStats,
        clear: clearPerformanceStats
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è batch —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    window.searchBatch = {
        stats: () => {
            try {
                const { getBatchStats } = require('./search/batchProcessor.js');
                return getBatchStats();
            } catch (e) {
                return { error: 'Batch processor –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' };
            }
        },
        worship: () => {
            try {
                const { WORSHIP_KEYWORDS } = require('./search/batchProcessor.js');
                return WORSHIP_KEYWORDS;
            } catch (e) {
                return { error: 'Worship keywords –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã' };
            }
        }
    };
}

export {
    performanceMonitor,
    measureSearchPerformance,
    enablePerformanceMonitoring,
    disablePerformanceMonitoring,
    getPerformanceStats,
    showPerformanceStats,
    clearPerformanceStats
};