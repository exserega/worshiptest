/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä Web Workers –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –¥–≤—É—Ö –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–æ–∏—Å–∫–æ–≤: –≥–ª–∞–≤–Ω–∞—è + overlay
 */

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä Web Worker –¥–ª—è –ø–æ–∏—Å–∫–∞
 */
class SearchWorkerManager {
    constructor() {
        this.worker = null;
        this.isWorkerSupported = typeof Worker !== 'undefined';
        this.isWorkerReady = false;
        this.requestCounter = 0;
        this.pendingRequests = new Map();
        this.fallbackMode = false;
        
        // –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
        this.mainSearchQueue = [];
        this.overlaySearchQueue = [];
        
        this.initWorker();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web Worker
     */
    async initWorker() {
        if (!this.isWorkerSupported) {
            console.warn('‚ö†Ô∏è Web Workers –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            this.fallbackMode = true;
            return;
        }
        
        try {
            // –°–æ–∑–¥–∞–µ–º Web Worker
            this.worker = new Worker('/src/js/workers/searchWorker.js', { 
                type: 'module',
                name: 'SearchWorker'
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç worker
            this.worker.addEventListener('message', (event) => {
                this.handleWorkerMessage(event.data);
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ worker
            this.worker.addEventListener('error', (error) => {
                console.error('‚ùå Worker error:', error);
                this.fallbackToMainThread();
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º worker
            this.worker.postMessage({ type: 'init' });
            
            console.log('üßµ SearchWorkerManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Worker:', error);
            this.fallbackToMainThread();
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å worker
     */
    async fallbackToMainThread() {
        console.warn('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫');
        this.fallbackMode = true;
        this.isWorkerReady = false;
        
        if (this.worker) {
            this.worker.terminate();
            this.worker = null;
        }
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º search engine –¥–ª—è fallback
        if (!window.searchEngine) {
            try {
                const { default: engine } = await import('../search/searchEngine.js');
                window.fallbackSearchEngine = engine;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ fallback search engine:', error);
            }
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Web Worker
     */
    handleWorkerMessage(message) {
        const { type, requestId } = message;
        
        switch (type) {
            case 'worker-ready':
                this.isWorkerReady = true;
                console.log('‚úÖ Search Worker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
                this.processQueuedRequests();
                break;
                
            case 'search-results':
                this.handleSearchResults(message);
                break;
                
            case 'search-error':
                this.handleSearchError(message);
                break;
                
            case 'search-started':
                this.handleSearchStarted(message);
                break;
                
            case 'search-cancelled':
                this.handleSearchCancelled(message);
                break;
                
            case 'database-updated':
                console.log(`üìä Worker: –±–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (${message.songsCount} –ø–µ—Å–µ–Ω)`);
                break;
                
            case 'worker-error':
                console.error('‚ùå Worker error:', message.error);
                this.fallbackToMainThread();
                break;
                
            case 'stats-response':
                this.handleStatsResponse(message);
                break;
                
            default:
                console.log(`‚ÑπÔ∏è Worker message: ${type}`, message);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    handleSearchResults(message) {
        const { requestId, results, duration, searchType, query } = message;
        
        if (this.pendingRequests.has(requestId)) {
            const request = this.pendingRequests.get(requestId);
            this.pendingRequests.delete(requestId);
            
            // –í—ã–∑—ã–≤–∞–µ–º callback —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            if (request.callback) {
                request.callback(null, results, { duration, searchType, query });
            }
            
            console.log(`‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω (${searchType}): "${query}" –∑–∞ ${duration.toFixed(2)}ms`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–∏—Å–∫–∞
     */
    handleSearchError(message) {
        const { requestId, error, searchType, query } = message;
        
        if (this.pendingRequests.has(requestId)) {
            const request = this.pendingRequests.get(requestId);
            this.pendingRequests.delete(requestId);
            
            // –í—ã–∑—ã–≤–∞–µ–º callback —Å –æ—à–∏–±–∫–æ–π
            if (request.callback) {
                request.callback(new Error(error), null, { searchType, query });
            }
            
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ (${searchType}): "${query}" - ${error}`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
     */
    handleSearchStarted(message) {
        const { requestId, query, searchType } = message;
        console.log(`üîç –ü–æ–∏—Å–∫ –Ω–∞—á–∞—Ç (${searchType}): "${query}"`);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
     */
    handleSearchCancelled(message) {
        const { requestId, query, searchType } = message;
        
        if (this.pendingRequests.has(requestId)) {
            const request = this.pendingRequests.get(requestId);
            this.pendingRequests.delete(requestId);
            
            console.log(`üö´ –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω (${searchType}): "${query}"`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    handleStatsResponse(message) {
        const { requestId, stats } = message;
        
        if (this.pendingRequests.has(requestId)) {
            const request = this.pendingRequests.get(requestId);
            this.pendingRequests.delete(requestId);
            
            if (request.callback) {
                request.callback(null, stats);
            }
        }
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞
     */
    async search(query, songs, options = {}, searchType = 'main') {
        return new Promise((resolve, reject) => {
            const requestId = this.generateRequestId();
            const callback = (error, results, metadata) => {
                if (error) {
                    reject(error);
                } else {
                    resolve({ results, metadata });
                }
            };
            
            const searchRequest = {
                requestId,
                query,
                songs,
                options: { ...options, searchType },
                searchType,
                callback,
                timestamp: Date.now()
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            this.pendingRequests.set(requestId, searchRequest);
            
            if (this.fallbackMode) {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                this.performFallbackSearch(searchRequest);
            } else if (this.isWorkerReady) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Web Worker
                this.sendSearchToWorker(searchRequest);
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                this.queueSearchRequest(searchRequest);
            }
        });
    }
    
    /**
     * –ü–æ–∏—Å–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async mainSearch(query, songs, options = {}) {
        return this.search(query, songs, options, 'main');
    }
    
    /**
     * –ü–æ–∏—Å–∫ –¥–ª—è overlay –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω
     */
    async overlaySearch(query, songs, options = {}) {
        return this.search(query, songs, options, 'overlay');
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Web Worker
     */
    sendSearchToWorker(searchRequest) {
        const { requestId, query, songs, options, searchType } = searchRequest;
        
        this.worker.postMessage({
            type: 'search',
            data: {
                requestId,
                query,
                songs,
                options,
                searchType
            }
        });
    }
    
    /**
     * Fallback –ø–æ–∏—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
     */
    async performFallbackSearch(searchRequest) {
        const { requestId, query, songs, options, searchType, callback } = searchRequest;
        
        try {
            const startTime = performance.now();
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback search engine –∏–ª–∏ window.searchEngine
            const engine = window.fallbackSearchEngine || window.searchEngine;
            if (!engine) {
                throw new Error('Search engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
            
            const results = await engine.search(query, songs, options);
            const duration = performance.now() - startTime;
            
            callback(null, results, { duration, searchType, query });
            
        } catch (error) {
            callback(error, null, { searchType, query });
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å
     */
    queueSearchRequest(searchRequest) {
        const { searchType } = searchRequest;
        
        if (searchType === 'overlay') {
            this.overlaySearchQueue.push(searchRequest);
        } else {
            this.mainSearchQueue.push(searchRequest);
        }
        
        console.log(`üìã –ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (${searchType}): ${searchRequest.query}`);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ worker
     */
    processQueuedRequests() {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        while (this.mainSearchQueue.length > 0) {
            const request = this.mainSearchQueue.shift();
            this.sendSearchToWorker(request);
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º overlay –∑–∞–ø—Ä–æ—Å—ã
        while (this.overlaySearchQueue.length > 0) {
            const request = this.overlaySearchQueue.shift();
            this.sendSearchToWorker(request);
        }
    }
    
    /**
     * –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞
     */
    cancelSearch(requestId) {
        if (this.pendingRequests.has(requestId)) {
            this.pendingRequests.delete(requestId);
            
            if (!this.fallbackMode && this.worker) {
                this.worker.postMessage({
                    type: 'cancel-search',
                    data: { requestId }
                });
            }
        }
    }
    
    /**
     * –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–æ–∏—Å–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     */
    cancelSearchesByType(searchType) {
        const toCancel = [];
        
        for (const [requestId, request] of this.pendingRequests) {
            if (request.searchType === searchType) {
                toCancel.push(requestId);
            }
        }
        
        toCancel.forEach(requestId => this.cancelSearch(requestId));
        console.log(`üö´ –û—Ç–º–µ–Ω–µ–Ω–æ ${toCancel.length} –ø–æ–∏—Å–∫–æ–≤ —Ç–∏–ø–∞: ${searchType}`);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω
     */
    updateSongsDatabase(songs) {
        if (!this.fallbackMode && this.worker) {
            this.worker.postMessage({
                type: 'update-songs',
                data: { songs }
            });
        }
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º fallback engine
        if (window.fallbackSearchEngine && window.fallbackSearchEngine.initializeDictionary) {
            window.fallbackSearchEngine.initializeDictionary(songs);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async getStats() {
        return new Promise((resolve, reject) => {
            const requestId = this.generateRequestId();
            
            this.pendingRequests.set(requestId, {
                callback: (error, stats) => {
                    if (error) reject(error);
                    else resolve(stats);
                }
            });
            
            if (!this.fallbackMode && this.worker) {
                this.worker.postMessage({
                    type: 'get-stats',
                    data: { requestId }
                });
            } else {
                // Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                resolve({
                    fallbackMode: true,
                    pendingRequests: this.pendingRequests.size,
                    isWorkerReady: this.isWorkerReady
                });
            }
        });
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–ø—Ä–æ—Å–∞
     */
    generateRequestId() {
        return `search_${Date.now()}_${++this.requestCounter}`;
    }
    
    /**
     * Cleanup –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    destroy() {
        // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        for (const requestId of this.pendingRequests.keys()) {
            this.cancelSearch(requestId);
        }
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º worker
        if (this.worker) {
            this.worker.terminate();
            this.worker = null;
        }
        
        this.isWorkerReady = false;
        console.log('üóëÔ∏è SearchWorkerManager —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const searchWorkerManager = new SearchWorkerManager();

// –≠–∫—Å–ø–æ—Ä—Ç
export default searchWorkerManager;
export { SearchWorkerManager };