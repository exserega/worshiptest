/**
 * Web Worker –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ UI
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ –ø–æ–∏—Å–∫–∞: –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ + overlay –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ–∏—Å–∫–∞ –≤ worker
// –ò—Å–ø–æ–ª—å–∑—É–µ–º importScripts –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
let searchEngine = null;
let isInitialized = false;
let songsDatabase = null;
let searchRequests = new Map(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è worker –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
 */
async function initializeWorker() {
    if (isInitialized) return;
    
    try {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ (–≤ worker –Ω—É–∂–µ–Ω –æ—Å–æ–±—ã–π –ø–æ–¥—Ö–æ–¥)
        const { default: engine } = await import('../search/searchEngine.js');
        searchEngine = engine;
        
        console.log('üßµ Search Worker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        isInitialized = true;
        
        // –°–æ–æ–±—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –ø–æ—Ç–æ–∫—É –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        self.postMessage({
            type: 'worker-ready',
            timestamp: Date.now()
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Search Worker:', error);
        self.postMessage({
            type: 'worker-error',
            error: error.message,
            timestamp: Date.now()
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 */
async function handleSearchRequest(data) {
    const { requestId, query, songs, options = {}, searchType } = data;
    
    try {
        // –û—Ç–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        searchRequests.set(requestId, {
            query,
            startTime: Date.now(),
            searchType
        });
        
        // –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        self.postMessage({
            type: 'search-started',
            requestId,
            query,
            searchType,
            timestamp: Date.now()
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        if (!isInitialized || !searchEngine) {
            throw new Error('Search engine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        const startTime = performance.now();
        const results = await searchEngine.search(query, songs, options);
        const duration = performance.now() - startTime;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.postMessage({
            type: 'search-results',
            requestId,
            query,
            searchType,
            results,
            duration,
            timestamp: Date.now()
        });
        
        // –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        searchRequests.delete(requestId);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ (${requestId}):`, error);
        
        self.postMessage({
            type: 'search-error',
            requestId,
            query,
            searchType,
            error: error.message,
            timestamp: Date.now()
        });
        
        searchRequests.delete(requestId);
    }
}

/**
 * –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 */
function cancelSearchRequest(requestId) {
    if (searchRequests.has(requestId)) {
        const request = searchRequests.get(requestId);
        searchRequests.delete(requestId);
        
        self.postMessage({
            type: 'search-cancelled',
            requestId,
            query: request.query,
            searchType: request.searchType,
            timestamp: Date.now()
        });
        
        console.log(`üö´ –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω: ${requestId}`);
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω
 */
function updateSongsDatabase(songs) {
    songsDatabase = songs;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ search engine
    if (searchEngine && searchEngine.initializeDictionary) {
        searchEngine.initializeDictionary(songs);
    }
    
    self.postMessage({
        type: 'database-updated',
        songsCount: songs.length,
        timestamp: Date.now()
    });
    
    console.log(`üìä –ë–∞–∑–∞ –ø–µ—Å–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${songs.length} –ø–µ—Å–µ–Ω`);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
function getPerformanceStats() {
    const stats = {
        isInitialized,
        songsCount: songsDatabase ? songsDatabase.length : 0,
        activeRequests: searchRequests.size,
        activeRequestsList: Array.from(searchRequests.entries()).map(([id, req]) => ({
            requestId: id,
            query: req.query,
            searchType: req.searchType,
            duration: Date.now() - req.startTime
        }))
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É search engine –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if (searchEngine && searchEngine.getPerformanceStats) {
        stats.engine = searchEngine.getPerformanceStats();
    }
    
    return stats;
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
function resetWorkerState() {
    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    for (const requestId of searchRequests.keys()) {
        cancelSearchRequest(requestId);
    }
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if (typeof clearSimilarityCache === 'function') {
        clearSimilarityCache();
    }
    
    self.postMessage({
        type: 'worker-reset',
        timestamp: Date.now()
    });
    
    console.log('üßπ Worker —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ');
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
self.addEventListener('message', async function(event) {
    const { type, data } = event.data;
    
    try {
        switch (type) {
            case 'init':
                await initializeWorker();
                break;
                
            case 'search':
                await handleSearchRequest(data);
                break;
                
            case 'cancel-search':
                cancelSearchRequest(data.requestId);
                break;
                
            case 'update-songs':
                updateSongsDatabase(data.songs);
                break;
                
            case 'get-stats':
                const stats = getPerformanceStats();
                self.postMessage({
                    type: 'stats-response',
                    requestId: data.requestId,
                    stats,
                    timestamp: Date.now()
                });
                break;
                
            case 'reset':
                resetWorkerState();
                break;
                
            default:
                console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${type}`);
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${type}:`, error);
        self.postMessage({
            type: 'worker-error',
            error: error.message,
            originalType: type,
            timestamp: Date.now()
        });
    }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ worker
 */
self.addEventListener('error', function(error) {
    console.error('‚ùå Worker error:', error);
    self.postMessage({
        type: 'worker-error',
        error: error.message,
        filename: error.filename,
        lineno: error.lineno,
        timestamp: Date.now()
    });
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
 */
self.addEventListener('unhandledrejection', function(event) {
    console.error('‚ùå Worker unhandled rejection:', event.reason);
    self.postMessage({
        type: 'worker-error',
        error: `Unhandled promise rejection: ${event.reason}`,
        timestamp: Date.now()
    });
});

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ worker
initializeWorker();