/**
 * –ü–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ—á–Ω–æ–≥–æ –∏ –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞ –≤ –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */

import { 
    fuzzyMatch, 
    fuzzyMatchWithScore,
    calculateTextSimilarity, 
    generateSuggestions,
    getAlgorithmStats
} from '../utils/fuzzySearch.js';

import {
    performBatchSearch,
    getBatchStats,
    searchByCategory,
    prioritySearch,
    WORSHIP_KEYWORDS
} from './batchProcessor.js';

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
 */
const SEARCH_CONFIG = {
    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    FUZZY_THRESHOLD_HIGH: 0.8,    // –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    FUZZY_THRESHOLD_MEDIUM: 0.7,  // –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å
    FUZZY_THRESHOLD_LOW: 0.6,     // –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    MIN_WORD_LENGTH: 3,           // –ú–∏–Ω–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–ª–æ–≤–µ –¥–ª—è —Ñ–∞–∑–∑–∏-–ø–æ–∏—Å–∫–∞
    MIN_WORD_SIMILARITY: 0.5,     // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è —É—á–µ—Ç–∞
    MIN_OVERALL_SCORE: 0.3,       // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—â–∏–π –±–∞–ª–ª –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    MAX_EXACT_RESULTS: 50,        // –ú–∞–∫—Å–∏–º—É–º —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    MAX_FUZZY_RESULTS: 20,        // –ú–∞–∫—Å–∏–º—É–º –Ω–µ—á–µ—Ç–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    MAX_SUGGESTIONS: 3,           // –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    FUZZY_TRIGGER_THRESHOLD: 10,  // –ó–∞–ø—É—Å–∫–∞—Ç—å —Ñ–∞–∑–∑–∏-–ø–æ–∏—Å–∫ –µ—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö < —ç—Ç–æ–≥–æ
    
    // –í–µ—Å–∞ –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ)
    WEIGHT_TITLE_EXACT: 1.0,      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    WEIGHT_TITLE_START: 0.9,      // –ù–∞—á–∞–ª–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    WEIGHT_TITLE_CONTAIN: 0.8,    // –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    WEIGHT_LYRICS_EXACT: 0.7,     // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ
    WEIGHT_TITLE_FUZZY: 0.6,      // –ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    WEIGHT_LYRICS_FUZZY: 0.5,     // –ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ
};

/**
 * –ö–ª–∞—Å—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
 */
class SearchEngine {
    constructor() {
        this.dictionary = new Set(); // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        this.lastResults = [];       // –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.lastQuery = '';         // –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –∏–∑ –ø–µ—Å–µ–Ω
     * @param {Array} songs - –ú–∞—Å—Å–∏–≤ –ø–µ—Å–µ–Ω
     */
    initializeDictionary(songs) {
        this.dictionary.clear();
        
        songs.forEach(song => {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π
            if (song.name) {
                const titleWords = song.name.toLowerCase()
                    .split(/\s+/)
                    .filter(word => word.length >= 3);
                titleWords.forEach(word => this.dictionary.add(word));
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏)
            const lyrics = song.hasWebEdits 
                ? (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] || '') 
                : (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '');
                
            if (lyrics) {
                const firstLines = lyrics.split('\n').slice(0, 10).join(' ');
                const cleanText = firstLines.replace(/\[[^\]]*\]/g, ' ');
                const lyricsWords = cleanText.toLowerCase()
                    .split(/\s+/)
                    .filter(word => word.length >= 4 && !/\d/.test(word));
                    
                lyricsWords.slice(0, 20).forEach(word => this.dictionary.add(word));
            }
        });
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (—Ç–æ—á–Ω—ã–π + –Ω–µ—á–µ—Ç–∫–∏–π)
     * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
     * @param {Array} songs - –ú–∞—Å—Å–∏–≤ –ø–µ—Å–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     */
    search(query, songs, options = {}) {
        if (!query || !songs) {
            return { 
                exactResults: [], 
                fuzzyResults: [], 
                suggestions: [],
                totalFound: 0 
            };
        }

        const config = { ...SEARCH_CONFIG, ...options };
        this.lastQuery = query;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤
        if (songs.length > 200 && options.enableBatch !== false) {
            return this.batchSearch(query, songs, options);
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        let filteredSongs = songs;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if (options.category) {
            filteredSongs = searchByCategory(filteredSongs, query, options.category);
        }
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è spiritual –∑–∞–ø—Ä–æ—Å–æ–≤
        if (options.enablePrioritySearch !== false) {
            const prioritySongs = prioritySearch(filteredSongs, query);
            if (prioritySongs.length < filteredSongs.length) {
                console.log(`‚≠ê –ò—Å–ø–æ–ª—å–∑—É–µ–º priority –ø–æ–∏—Å–∫: ${prioritySongs.length} –∏–∑ ${filteredSongs.length}`);
                filteredSongs = prioritySongs;
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const normalizedQuery = this.normalizeSearchQuery(query);
        
        // –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
        const exactResults = this.performExactSearch(normalizedQuery, filteredSongs, config);
        
        // –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞–ª–æ)
        let fuzzyResults = [];
        if (exactResults.length < config.FUZZY_TRIGGER_THRESHOLD) {
            fuzzyResults = this.performFuzzySearch(normalizedQuery, filteredSongs, exactResults, config);
        }

        // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—á–µ–Ω—å –º–∞–ª–æ)
        let suggestions = [];
        if (exactResults.length === 0 && fuzzyResults.length < 3) {
            suggestions = generateSuggestions(
                normalizedQuery, 
                Array.from(this.dictionary), 
                config.MAX_SUGGESTIONS
            );
        }

        const results = {
            exactResults: exactResults.slice(0, config.MAX_EXACT_RESULTS),
            fuzzyResults: fuzzyResults.slice(0, config.MAX_FUZZY_RESULTS),
            suggestions,
            totalFound: exactResults.length + fuzzyResults.length,
            hasMore: exactResults.length > config.MAX_EXACT_RESULTS || fuzzyResults.length > config.MAX_FUZZY_RESULTS
        };

        this.lastResults = results;
        return results;
    }
    
    /**
     * Batch –ø–æ–∏—Å–∫ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
     * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
     * @param {Array} songs - –ú–∞—Å—Å–∏–≤ –ø–µ—Å–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
     * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã batch –ø–æ–∏—Å–∫–∞
     */
    async batchSearch(query, songs, options = {}) {
        console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ batch –ø–æ–∏—Å–∫ –¥–ª—è ${songs.length} –ø–µ—Å–µ–Ω`);
        
        // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å batch –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
        const searchWrapper = (q, songList, opts) => {
            return this.search(q, songList, { ...opts, enableBatch: false });
        };
        
        try {
            const results = await performBatchSearch(songs, searchWrapper, query, options);
            
            // –†–∞–∑–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ exact –∏ fuzzy
            const exactResults = results.filter(r => r.searchType === 'exact');
            const fuzzyResults = results.filter(r => r.searchType === 'fuzzy');
            
            const batchResults = {
                exactResults: exactResults.slice(0, SEARCH_CONFIG.MAX_EXACT_RESULTS),
                fuzzyResults: fuzzyResults.slice(0, SEARCH_CONFIG.MAX_FUZZY_RESULTS),
                suggestions: [],
                totalFound: exactResults.length + fuzzyResults.length,
                hasMore: exactResults.length > SEARCH_CONFIG.MAX_EXACT_RESULTS || fuzzyResults.length > SEARCH_CONFIG.MAX_FUZZY_RESULTS
            };
            
            this.lastResults = batchResults;
            return batchResults;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ batch –ø–æ–∏—Å–∫–µ:', error);
            // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            return this.search(query, songs, { ...options, enableBatch: false });
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
     * @param {string} query - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
     * @param {Array} songs - –ú–∞—Å—Å–∏–≤ –ø–µ—Å–µ–Ω
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     * @returns {Array} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
     */
    performExactSearch(query, songs, config) {
        const results = [];

        songs.forEach(song => {
            const normalizedTitle = this.getNormalizedTitle(song);
            const normalizedLyrics = this.getNormalizedLyrics(song);
            
            let score = 0;
            let matchType = null;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if (normalizedTitle.includes(query)) {
                if (normalizedTitle.startsWith(query)) {
                    score = config.WEIGHT_TITLE_START;
                    matchType = 'title-start';
                } else {
                    score = config.WEIGHT_TITLE_CONTAIN;
                    matchType = 'title-contain';
                }
            } else if (normalizedLyrics.includes(query)) {
                score = config.WEIGHT_LYRICS_EXACT;
                matchType = 'lyrics-exact';
            }

            if (score > 0) {
                results.push({
                    song,
                    score,
                    matchType,
                    searchType: 'exact'
                });
            }
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        return results.sort((a, b) => {
            if (b.score !== a.score) return b.score - a.score;
            return a.song.name.localeCompare(b.song.name);
        });
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫
     * @param {string} query - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
     * @param {Array} songs - –ú–∞—Å—Å–∏–≤ –ø–µ—Å–µ–Ω
     * @param {Array} exactResults - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è)
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     * @returns {Array} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
     */
    performFuzzySearch(query, songs, exactResults, config) {
        const exactSongIds = new Set(exactResults.map(r => r.song.id));
        const results = [];

        songs.forEach(song => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Å–Ω–∏, —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—á–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
            if (exactSongIds.has(song.id)) return;

            const normalizedTitle = this.getNormalizedTitle(song);
            const normalizedLyrics = this.getNormalizedLyrics(song);
            
            let score = 0;
            let matchType = null;

            // –ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
            const titleFuzzyResult = fuzzyMatchWithScore(query, normalizedTitle, config.FUZZY_THRESHOLD_MEDIUM);
            let lyricsFuzzyResult = null; // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –Ω—É–∂–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
            
            if (titleFuzzyResult.isMatch) {
                score = config.WEIGHT_TITLE_FUZZY * titleFuzzyResult.similarity;
                matchType = `title-${titleFuzzyResult.matchType}`;
            }
            // –ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)
            else {
                lyricsFuzzyResult = fuzzyMatchWithScore(query, normalizedLyrics, config.FUZZY_THRESHOLD_LOW);
                if (lyricsFuzzyResult.isMatch) {
                    score = config.WEIGHT_LYRICS_FUZZY * lyricsFuzzyResult.similarity;
                    matchType = `lyrics-${lyricsFuzzyResult.matchType}`;
                }
            }

            if (score > config.MIN_OVERALL_SCORE) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results.push({
                    song,
                    score,
                    matchType,
                    searchType: 'fuzzy',
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ UI
                    fuzzyDetails: {
                        titleResult: titleFuzzyResult.isMatch ? titleFuzzyResult : null,
                        lyricsResult: lyricsFuzzyResult?.isMatch ? lyricsFuzzyResult : null
                    }
                });
            }
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        return results.sort((a, b) => {
            if (b.score !== a.score) return b.score - a.score;
            return a.song.name.localeCompare(b.song.name);
        });
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
     * @param {string} query - –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
     * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
     */
    normalizeSearchQuery(query) {
        if (!query) return '';
        
        return query
            .toLowerCase()
            .trim()
            .replace(/[^\w\s\u0400-\u04FF-]/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à)
     * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
     * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
     */
    getNormalizedTitle(song) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        if (typeof window !== 'undefined' && window.getNormalizedTitle) {
            return window.getNormalizedTitle(song);
        }
        
        // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        return this.normalizeText(song.name || '');
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à)
     * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
     * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     */
    getNormalizedLyrics(song) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        if (typeof window !== 'undefined' && window.getNormalizedLyrics) {
            return window.getNormalizedLyrics(song);
        }
        
        // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        const lyrics = song.hasWebEdits 
            ? (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] || '') 
            : (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '');
        const cleanedLyrics = lyrics.replace(/\[[^\]]*\]/g, ' ');
        return this.normalizeText(cleanedLyrics);
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç (fallback —Ñ—É–Ω–∫—Ü–∏—è)
     * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
     * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     */
    normalizeText(text) {
        if (!text) return '';
        
        return text
            .toLowerCase()
            .replace(/[^\w\s\u0400-\u04FF-]/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     * @returns {Object} –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
     */
    getLastResults() {
        return this.lastResults;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å
     * @returns {string} –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å
     */
    getLastQuery() {
        return this.lastQuery;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
     */
    getPerformanceStats() {
        return {
            engine: {
                lastQuery: this.lastQuery,
                dictionarySize: this.dictionary.length,
                lastResultsCount: this.lastResults ? 
                    (this.lastResults.exactResults.length + this.lastResults.fuzzyResults.length) : 0,
                worshipKeywords: Object.keys(WORSHIP_KEYWORDS).length
            },
            algorithms: getAlgorithmStats(),
            batch: getBatchStats()
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
const searchEngine = new SearchEngine();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –∫–ª–∞—Å—Å
export default searchEngine;
export { SearchEngine, SEARCH_CONFIG };