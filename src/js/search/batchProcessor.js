/**
 * –ú–æ–¥—É–ª—å –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–µ—Å–µ–Ω –ø—Ä–æ—Å–ª–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–∫–ª–æ–Ω–µ–Ω–∏—è
 */

/**
 * –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Å–µ–Ω –ø—Ä–æ—Å–ª–∞–≤–ª–µ–Ω–∏—è (–¥–ª—è smart-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
 */
const WORSHIP_KEYWORDS = {
    // –ò–º–µ–Ω–∞ –ë–æ–≥–∞
    divine: ['–±–æ–≥', '–≥–æ—Å–ø–æ–¥—å', '–∏–∏—Å—É—Å', '—Ö—Ä–∏—Å—Ç–æ—Å', '–¥—É—Ö —Å–≤—è—Ç–æ–π', '—è—Ö–≤–µ', '–∞–ª—å—Ñ–∞', '–æ–º–µ–≥–∞', '—Ü–∞—Ä—å', '–ª–µ–≤ –∏—É–¥–∏–Ω'],
    
    // –°–ª–æ–≤–∞ –ø–æ–∫–ª–æ–Ω–µ–Ω–∏—è  
    worship: ['—Å–ª–∞–≤–∞', '—Ö–≤–∞–ª–∞', '–ø—Ä–æ—Å–ª–∞–≤–ª—è–µ–º', '—Å–ª–∞–≤–ª—é', '–¥–æ—Å—Ç–æ–∏–Ω', '—Å–≤—è—Ç–æ–π', '–ø—Ä–µ–∫—Ä–∞—Å–µ–Ω', '–≤–µ–ª–∏—á–∏–µ'],
    
    // –î—É—Ö–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è
    spiritual: ['–ª—é–±–æ–≤—å', '–±–ª–∞–≥–æ–¥–∞—Ç—å', '–ø–æ–±–µ–¥–∞', '–≤–µ—Ä–Ω–æ—Å—Ç—å', '—Å–ø–∞—Å–µ–Ω–∏–µ', '—Å–∏–ª–∞', '–≤–ª–∞—Å—Ç—å', '–ø—Ä–µ—Å—Ç–æ–ª'],
    
    // –≠–º–æ—Ü–∏–∏ –ø–æ–∫–ª–æ–Ω–µ–Ω–∏—è
    emotions: ['—Ç—Ä–µ–ø–µ—Ç', '–≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ', '–≤–µ—Ä—é', '–¥–æ–≤–µ—Ä—è—é', '–Ω–∞–¥–µ—é—Å—å', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '—Å–ø–∞—Å–∏–±–æ'],
    
    // –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ –æ–±—Ä–∞–∑—ã (—á–∞—Å—Ç–æ –≤ –ø—Ä–æ—Å–ª–∞–≤–ª–µ–Ω–∏–∏)
    nature: ['—Å–≤–µ—Ç', '–≤–µ—Ç–µ—Ä', '–Ω–µ–±–æ', '–∑–≤–µ–∑–¥—ã', '–º–æ—Ä–µ', '–≥–æ—Ä–∞', '—Ä–µ–∫–∞', '–æ–≥–æ–Ω—å'],
    
    // –î–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–ª–æ–Ω–µ–Ω–∏—è
    actions: ['–ø–æ—é', '–ø–æ–µ—Ç', '—Å–ª–∞–≤—å', '–≤–æ–∑–≤—ã—Å—è—Ç', '–Ω–∞–ø–æ–ª–Ω—è–π', '–¥–≤–∏–≥–∞–π—Å—è', '—Ü–∞—Ä—Å—Ç–≤—É–π', '–∏—Å–ø–æ–ª—å–∑—É–π']
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 */
function createWorshipDictionary() {
    const dictionary = new Set();
    
    Object.values(WORSHIP_KEYWORDS).forEach(category => {
        category.forEach(word => {
            dictionary.add(word.toLowerCase());
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–∫–ª–æ–Ω–µ–Ω–∏–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            if (word.endsWith('—å') || word.endsWith('–π')) {
                dictionary.add(word.slice(0, -1) + '—è');
                dictionary.add(word.slice(0, -1) + '–µ');
            }
            if (word.endsWith('–∞')) {
                dictionary.add(word.slice(0, -1) + '—ã');
                dictionary.add(word.slice(0, -1) + '–µ');
            }
            if (word.endsWith('–æ')) {
                dictionary.add(word.slice(0, -1) + '–∞');
            }
        });
    });
    
    return dictionary;
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–∫–ª–æ–Ω–µ–Ω–∏—è
 */
const WORSHIP_DICTIONARY = createWorshipDictionary();

/**
 * Batch-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
 */
class BatchProcessor {
    constructor(batchSize = 50) {
        this.batchSize = batchSize;
        this.processingQueue = [];
        this.isProcessing = false;
        this.results = [];
        this.callbacks = [];
        this.stats = {
            totalProcessed: 0,
            batchesProcessed: 0,
            averageTime: 0,
            filtered: 0,
            prefiltered: 0
        };
    }
    
    /**
     * –£–º–Ω–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –ø–µ—Å–µ–Ω –ø—Ä–æ—Å–ª–∞–≤–ª–µ–Ω–∏—è
     */
    smartPrefilter(songs, query) {
        const normalizedQuery = query.toLowerCase().trim();
        const queryWords = normalizedQuery.split(/\s+/);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ —Å–ª–æ–≤–∞ –ø–æ–∫–ª–æ–Ω–µ–Ω–∏—è
        const hasWorshipWords = queryWords.some(word => 
            WORSHIP_DICTIONARY.has(word) || 
            Array.from(WORSHIP_DICTIONARY).some(worshipWord => 
                worshipWord.includes(word) || word.includes(worshipWord)
            )
        );
        
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –ø–æ–∫–ª–æ–Ω–µ–Ω–∏—è, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
        if (hasWorshipWords) {
            const filtered = songs.filter(song => {
                const title = (song.name || '').toLowerCase();
                const lyrics = song.hasWebEdits 
                    ? (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] || '') 
                    : (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '');
                const cleanLyrics = this.cleanLyricsForSearch(lyrics).toLowerCase();
                
                // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                return queryWords.some(word => 
                    title.includes(word) || cleanLyrics.includes(word)
                );
            });
            
            this.stats.prefiltered += songs.length - filtered.length;
            return filtered;
        }
        
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–µ—Å–Ω–∏
        return songs;
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–∑ script.js)
     */
    cleanLyricsForSearch(text) {
        if (!text) return '';
        
        return text
            .replace(/\[.*?\]/g, '') // —É–±–∏—Ä–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã
            .replace(/\n\s*\n/g, '\n') // —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            .replace(/[^\w\s–∞-—è—ë]/gi, ' ') // —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
            .replace(/\s+/g, ' ') // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
            .trim();
    }
    
    /**
     * –†–∞–∑–±–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ –±–∞—Ç—á–∏
     */
    createBatches(items, size = this.batchSize) {
        const batches = [];
        for (let i = 0; i < items.length; i += size) {
            batches.push(items.slice(i, i + size));
        }
        return batches;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á
     */
    async processBatch(batch, searchFunction, query, options = {}) {
        const startTime = performance.now();
        
        try {
            const results = [];
            
            for (const item of batch) {
                const result = await searchFunction(query, [item], options);
                if (result && result.length > 0) {
                    results.push(...result);
                }
            }
            
            const endTime = performance.now();
            const duration = endTime - startTime;
            
            this.updateStats(batch.length, duration);
            
            return results;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ batch –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
            return [];
        }
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è batch –ø–æ–∏—Å–∫–∞
     */
    async batchSearch(songs, searchFunction, query, options = {}) {
        if (!songs || songs.length === 0) return [];
        
        const startTime = performance.now();
        
        // –£–º–Ω–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        const prefiltered = this.smartPrefilter(songs, query);
        
        // –°–æ–∑–¥–∞–µ–º –±–∞—Ç—á–∏
        const batches = this.createBatches(prefiltered);
        
        console.log(`üîç Batch –ø–æ–∏—Å–∫: ${prefiltered.length} –ø–µ—Å–µ–Ω –≤ ${batches.length} –±–∞—Ç—á–∞—Ö`);
        
        const allResults = [];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)
        const concurrency = options.concurrency || 3;
        for (let i = 0; i < batches.length; i += concurrency) {
            const currentBatches = batches.slice(i, i + concurrency);
            
            const batchPromises = currentBatches.map(batch => 
                this.processBatch(batch, searchFunction, query, options)
            );
            
            const batchResults = await Promise.all(batchPromises);
            batchResults.forEach(results => allResults.push(...results));
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –±–∞—Ç—á–µ–π –¥–ª—è UI responsiveness
            if (i + concurrency < batches.length) {
                await this.sleep(1);
            }
        }
        
        const endTime = performance.now();
        console.log(`‚ö° Batch –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${endTime - startTime}ms, –Ω–∞–π–¥–µ–Ω–æ ${allResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        
        return allResults;
    }
    
    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStats(processed, duration) {
        this.stats.totalProcessed += processed;
        this.stats.batchesProcessed++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
        const totalTime = this.stats.averageTime * (this.stats.batchesProcessed - 1) + duration;
        this.stats.averageTime = totalTime / this.stats.batchesProcessed;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    getStats() {
        return {
            ...this.stats,
            efficiency: this.stats.prefiltered > 0 
                ? ((this.stats.prefiltered / this.stats.totalProcessed) * 100).toFixed(1) + '%'
                : 'N/A'
        };
    }
    
    /**
     * –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    resetStats() {
        this.stats = {
            totalProcessed: 0,
            batchesProcessed: 0,
            averageTime: 0,
            filtered: 0,
            prefiltered: 0
        };
    }
    
    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    searchByCategory(songs, query, category) {
        if (!category) return songs;
        
        const filtered = songs.filter(song => {
            const songCategory = (song.sheet || '').toLowerCase();
            return songCategory.includes(category.toLowerCase());
        });
        
        console.log(`üìÇ –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}": ${filtered.length} –∏–∑ ${songs.length}`);
        return filtered;
    }
    
    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö/–∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω (priority search)
     */
    prioritySearch(songs, query) {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Å–µ–Ω –ø—Ä–æ—Å–ª–∞–≤–ª–µ–Ω–∏—è
        const priorityWords = [
            '–∏–∏—Å—É—Å', '–±–æ–≥', '–≥–æ—Å–ø–æ–¥—å', '—Å–ª–∞–≤–∞', '—Å–≤—è—Ç–æ–π', '–ø—Ä–µ–∫—Ä–∞—Å–µ–Ω', 
            '–¥–æ—Å—Ç–æ–∏–Ω', '—Ü–∞—Ä—å', '–ª—é–±–æ–≤—å', '–±–ª–∞–≥–æ–¥–∞—Ç—å'
        ];
        
        const queryLower = query.toLowerCase();
        const hasPriorityWord = priorityWords.some(word => queryLower.includes(word));
        
        if (hasPriorityWord) {
            // –î–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—â–µ–º –≤ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–µ—Å–Ω—è—Ö
            const prioritySongs = songs.filter(song => {
                const title = (song.name || '').toLowerCase();
                return priorityWords.some(word => title.includes(word));
            });
            
            console.log(`‚≠ê Priority –ø–æ–∏—Å–∫: ${prioritySongs.length} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–µ—Å–µ–Ω`);
            return prioritySongs;
        }
        
        return songs;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä batch-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
const globalBatchProcessor = new BatchProcessor(30); // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏

/**
 * –ü—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è batch –ø–æ–∏—Å–∫–∞
 */
async function performBatchSearch(songs, searchFunction, query, options = {}) {
    return await globalBatchProcessor.batchSearch(songs, searchFunction, query, options);
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
function getBatchStats() {
    return globalBatchProcessor.getStats();
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
function clearBatchStats() {
    globalBatchProcessor.resetStats();
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function searchByCategory(songs, query, category) {
    return globalBatchProcessor.searchByCategory(songs, query, category);
}

/**
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫
 */
function prioritySearch(songs, query) {
    return globalBatchProcessor.prioritySearch(songs, query);
}

// –≠–∫—Å–ø–æ—Ä—Ç
export {
    BatchProcessor,
    performBatchSearch,
    getBatchStats,
    clearBatchStats,
    searchByCategory,
    prioritySearch,
    WORSHIP_KEYWORDS,
    WORSHIP_DICTIONARY
};