// Agape Worship App - API: Song Editing

import {
    db,
    doc,
    updateDoc,
    deleteField,
    getDoc,
    serverTimestamp
} from '../../utils/firebase-v8-adapter.js';

// Auth –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ firebase v8
const auth = window.firebase?.auth?.() || null;

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Å–Ω–∏ –≤ Firebase
 * @param {string} songId - ID –ø–µ—Å–Ω–∏
 * @param {string} editedContent - –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏
 * @returns {Promise<void>}
 */
async function saveSongEdit(songId, editedContent) {
    if (!songId || editedContent === null || editedContent === undefined) {
        throw new Error('songId –∏ editedContent –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }
    
    const songRef = doc(db, 'songs', songId);
    
    try {
        await updateDoc(songRef, {
            '–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)': editedContent,
            'hasWebEdits': true,
            'lastEditedInApp': serverTimestamp(),
            'editedBy': 'web-user' // TODO: –¥–æ–±–∞–≤–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        });
        console.log(`‚úÖ –ü–µ—Å–Ω—è "${songId}" —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è "${songId}":`, error);
        throw error;
    }
}

/**
 * –û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Å–Ω—é –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã
 * @param {string} songId - ID –ø–µ—Å–Ω–∏
 * @returns {Promise<void>}
 */
async function revertToOriginal(songId) {
    if (!songId) {
        throw new Error('songId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    
    const songRef = doc(db, 'songs', songId);
    
    try {
        await updateDoc(songRef, {
            'hasWebEdits': false,
            '–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)': deleteField(),
            'lastEditedInApp': deleteField(),
            'editedBy': deleteField()
        });
        console.log(`üîÑ –ü–µ—Å–Ω—è "${songId}" –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –¥–ª—è "${songId}":`, error);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏
 * @param {string} songId - ID –ø–µ—Å–Ω–∏
 * @returns {Promise<{hasWebEdits: boolean, lastEditedInApp: any, editedBy: string}>}
 */
async function getSongEditStatus(songId) {
    if (!songId) {
        throw new Error('songId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    
    const songRef = doc(db, 'songs', songId);
    
    try {
        const docSnap = await getDoc(songRef);
        if (!docSnap.exists) {
            throw new Error(`–ü–µ—Å–Ω—è "${songId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
        
        const data = docSnap.data();
        return {
            hasWebEdits: data.hasWebEdits || false,
            lastEditedInApp: data.lastEditedInApp || null,
            editedBy: data.editedBy || null,
            editedContent: data['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] || null,
            originalContent: data['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || ''
        };
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è "${songId}":`, error);
        throw error;
    }
}

export {
    saveSongEdit,
    revertToOriginal,
    getSongEditStatus
}; 