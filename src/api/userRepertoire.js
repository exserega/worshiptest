/**
 * @fileoverview API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @module UserRepertoireAPI
 */

import logger from '../utils/logger.js';
import { 
    db, 
    collection, 
    doc,
    setDoc,
    deleteDoc,
    getDoc,
    getDocs,
    query,
    where,
    serverTimestamp 
} from '../utils/firebase-v8-adapter.js';
import { auth } from '../../firebase-init.js';

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Å–Ω—é –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
 * @param {string} preferredKey - –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function addToUserRepertoire(song, preferredKey) {
    try {
        const user = auth.currentUser;
        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        }
        
        // –í Firebase v8 –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –µ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        const userDocRef = doc(db, 'users', user.uid);
        const repertoireRef = userDocRef.collection('repertoire');
        const songDoc = repertoireRef.doc(song.id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ –ø–µ—Å–Ω—è
        const existingDoc = await getDoc(songDoc);
        
        if (existingDoc.exists) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, BPM –∏ –≤—Ä–µ–º—è
            const bpmValue = song.BPM || song.bpm || song['–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π BPM'] || null;
            
            await setDoc(songDoc, {
                preferredKey: preferredKey,
                BPM: bpmValue,
                updatedAt: serverTimestamp()
            }, { merge: true });
            
            logger.log(`‚úÖ –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Å–Ω–∏ "${song.name}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${preferredKey}, BPM: ${bpmValue}`);
            return { status: 'updated', key: preferredKey };
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–µ—Å–Ω—é
            const bpmValue = song.BPM || song.bpm || song['–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π BPM'] || null;
            logger.log(`üéµ –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é —Å BPM: ${bpmValue}, –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏:`, song);
            
            await setDoc(songDoc, {
                name: song.name,
                category: song.sheet || song.category,
                preferredKey: preferredKey,
                BPM: bpmValue,
                addedAt: serverTimestamp(),
                updatedAt: serverTimestamp()
            });
            
            logger.log(`‚úÖ –ü–µ—Å–Ω—è "${song.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä —Å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é ${preferredKey} –∏ BPM ${bpmValue}`);
            return { status: 'added', key: preferredKey };
        }
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏ –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä:', error);
        throw error;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –ø–µ—Å–Ω—é –∏–∑ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} songId - ID –ø–µ—Å–Ω–∏
 * @returns {Promise<void>}
 */
export async function removeFromUserRepertoire(songId) {
    try {
        const user = auth.currentUser;
        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        }
        
        // –í Firebase v8 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É –≤ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏–∏
        const userDocRef = doc(db, 'users', user.uid);
        const songDoc = userDocRef.collection('repertoire').doc(songId);
        await deleteDoc(songDoc);
        
        logger.log(`‚úÖ –ü–µ—Å–Ω—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞`);
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏ –∏–∑ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞:', error);
        throw error;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–µ—Å–Ω—è –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} songId - ID –ø–µ—Å–Ω–∏
 * @returns {Promise<Object|null>} –î–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ null
 */
export async function checkSongInUserRepertoire(songId) {
    try {
        const user = auth.currentUser;
        if (!user) {
            return null;
        }
        
        // –í Firebase v8 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É –≤ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏–∏
        const userDocRef = doc(db, 'users', user.uid);
        const songDoc = userDocRef.collection('repertoire').doc(songId);
        const docSnap = await getDoc(songDoc);
        
        if (docSnap.exists) {
            return docSnap.data();
        }
        
        return null;
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Å–Ω–∏ –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–µ:', error);
        return null;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Å—å —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –ø–µ—Å–µ–Ω
 */
export async function getUserRepertoire() {
    try {
        const user = auth.currentUser;
        if (!user) {
            return [];
        }
        
        // –í Firebase v8 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏–∏
        const userDocRef = doc(db, 'users', user.uid);
        const repertoireRef = userDocRef.collection('repertoire');
        const snapshot = await repertoireRef.get();
        
        const songs = [];
        snapshot.forEach(doc => {
            songs.push({
                id: doc.id,
                ...doc.data()
            });
        });
        
        return songs;
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞:', error);
        return [];
    }
}