/**
 * ===================================================================
 * MAIN CONTROLLER MODULE
 * ===================================================================
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–ª–∏—Å—Ç–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –≤—ã–±–æ—Ä)
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–Ω—è–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –∑–∞–º–µ—Ç–∫–∏)
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–æ–º
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
 */

// –ò–º–ø–æ—Ä—Ç—ã
import { eventBus, stateManager } from '../core/index.js';
import { showNotification, showConfirmDialog } from '../core/index.js';
import * as api from '../api/index.js';
import * as state from '../../js/state.js';
import * as ui from '../../ui.js';

// ====================================
// SETLIST MANAGEMENT
// ====================================

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ç–ª–∏—Å—Ç
 * @param {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–ª–∏—Å—Ç–∞
 */
export async function handleCreateSetlist(name) {
    console.log('üéµ [Controller] handleCreateSetlist:', name);
    
    if (!name || !name.trim()) {
        showNotification('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error');
        return;
    }
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if (ui.createSetlistButton) {
            ui.createSetlistButton.disabled = true;
            ui.createSetlistButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>–°–æ–∑–¥–∞–Ω–∏–µ...</span>';
        }
        
        const setlistId = await api.createSetlist(name.trim());
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–µ—Ç–ª–∏—Å—Ç –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
        eventBus.setState('currentCreatedSetlistId', setlistId);
        eventBus.setState('currentCreatedSetlistName', name.trim());
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å window –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        window.currentCreatedSetlistId = setlistId;
        window.currentCreatedSetlistName = name.trim();
        console.log('üéØ [Controller] Synced with window:', window.currentCreatedSetlistId, window.currentCreatedSetlistName);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–ª–∏—Å—Ç–æ–≤
        const setlists = await refreshSetlists();
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç
        const createdSetlist = setlists.find(s => s.id === setlistId);
        if (createdSetlist) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ç-–ª–∏—Å—Ç
            handleSetlistSelect(createdSetlist);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞
            if (typeof ui.displaySelectedSetlist === 'function') {
                ui.displaySelectedSetlist(createdSetlist, 
                    window.handleFavoriteOrRepertoireSelect,
                    window.handleRemoveSongFromSetlist
                );
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ
            const dropdownBtnText = document.querySelector('#setlist-dropdown-btn .selector-text');
            if (dropdownBtnText) {
                dropdownBtnText.textContent = name.trim();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞
            const selectedSetlistControl = document.getElementById('selected-setlist-control');
            if (selectedSetlistControl) {
                selectedSetlistControl.style.display = 'block';
            }
            
            const currentSetlistName = document.getElementById('current-setlist-name');
            if (currentSetlistName) {
                currentSetlistName.textContent = name.trim();
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω
        if (ui.createdSetlistName) {
            ui.createdSetlistName.textContent = name.trim();
        }
        if (ui.addSongsConfirmModal) {
            ui.addSongsConfirmModal.classList.add('show');
        }
        
        showNotification('‚úÖ –°–µ—Ç-–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
        
        return setlistId;
        
    } catch (error) {
        console.error('‚ùå [Controller] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–ª–∏—Å—Ç–∞:', error);
        showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç', 'error');
        throw error;
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        if (ui.createSetlistButton) {
            ui.createSetlistButton.disabled = false;
            ui.createSetlistButton.innerHTML = '<i class="fas fa-arrow-right"></i><span>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>';
        }
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–ª–∏—Å—Ç–æ–≤
 */
export async function refreshSetlists() {
    console.log('üîÑ [Controller] refreshSetlists');
    
    try {
        const setlists = await api.loadSetlists();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        stateManager.setAllSetlists(setlists);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if (typeof window.updateSetlistsUI === 'function') {
            window.updateSetlistsUI(setlists);
        }
        
        // –ï—Å–ª–∏ –ø–∞–Ω–µ–ª—å —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (ui.setlistsPanel?.classList.contains('open')) {
            if (typeof ui.renderSetlists === 'function') {
                await ui.renderSetlists(setlists, 
                    window.handleSetlistSelect,
                    window.handleSetlistDelete
                );
            }
        }
        
        return setlists;
        
    } catch (error) {
        console.error('‚ùå [Controller] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–ª–∏—Å—Ç–æ–≤:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–ª–∏—Å—Ç–æ–≤', 'error');
        throw error;
    }
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç —Å–µ—Ç–ª–∏—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {Object} setlist - –û–±—ä–µ–∫—Ç —Å–µ—Ç–ª–∏—Å—Ç–∞
 */
export function handleSetlistSelect(setlist) {
    console.log('üéØ [Controller] handleSetlistSelect:', setlist.name);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç–ª–∏—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    state.setCurrentSetlistId(setlist.id);
    state.setCurrentSetlistName(setlist.name);
    state.setCurrentSetlistSongs(setlist.songs || []);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º Event Bus
    eventBus.setState('currentSetlistId', setlist.id);
    eventBus.setState('currentSetlistName', setlist.name);
    eventBus.setState('currentSetlistSongs', setlist.songs || []);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    console.log('üîÑ [Controller] –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞');
    ui.displaySelectedSetlist(
        setlist,
        window.handleFavoriteOrRepertoireSelect || function() {},
        window.handleRemoveSongFromSetlist || function() {}
    );
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å–µ—Ç–ª–∏—Å—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
 * @param {string} setlistId - ID —Å–µ—Ç–ª–∏—Å—Ç–∞
 * @param {string} setlistName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–ª–∏—Å—Ç–∞
 */
export async function handleSetlistDelete(setlistId, setlistName) {
    console.log('üóëÔ∏è [Controller] handleSetlistDelete:', setlistName);
    
    const confirmed = await showConfirmDialog(
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç "${setlistName}"?`,
        {
            title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è',
            confirmText: '–£–¥–∞–ª–∏—Ç—å',
            cancelText: '–û—Ç–º–µ–Ω–∞'
        }
    );
    
    if (!confirmed) {
        return false;
    }
    
    try {
        await api.deleteSetlist(setlistId);
        
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ç–ª–∏—Å—Ç, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (state.currentSetlistId === setlistId) {
            state.currentSetlistId = null;
            state.currentSetlistName = '';
            state.currentSetlistSongs = [];
            
            eventBus.setState('currentSetlistId', null);
            eventBus.setState('currentSetlistName', '');
            eventBus.setState('currentSetlistSongs', []);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–ª–∏—Å—Ç–æ–≤
        await refreshSetlists();
        
        showNotification(`üóëÔ∏è –°–µ—Ç-–ª–∏—Å—Ç "${setlistName}" —É–¥–∞–ª–µ–Ω`, 'info');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå [Controller] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ç–ª–∏—Å—Ç–∞:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ç-–ª–∏—Å—Ç–∞', 'error');
        throw error;
    }
}

// ====================================
// SONG MANAGEMENT
// ====================================

/**
 * –£–¥–∞–ª—è–µ—Ç –ø–µ—Å–Ω—é –∏–∑ —Å–µ—Ç–ª–∏—Å—Ç–∞
 * @param {string} songId - ID –ø–µ—Å–Ω–∏
 * @param {string} songName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
 */
export async function handleRemoveSongFromSetlist(songId, songName) {
    console.log('‚ûñ [Controller] handleRemoveSongFromSetlist:', songName);
    
    if (!state.currentSetlistId) {
        showNotification('‚ùå –°–µ—Ç–ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error');
        return false;
    }
    
    const confirmed = await showConfirmDialog(
        `–£–¥–∞–ª–∏—Ç—å "${songName}" –∏–∑ —Å–µ—Ç-–ª–∏—Å—Ç–∞?`,
        {
            title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è',
            confirmText: '–£–¥–∞–ª–∏—Ç—å',
            cancelText: '–û—Ç–º–µ–Ω–∞'
        }
    );
    
    if (!confirmed) {
        return false;
    }
    
    try {
        await api.removeSongFromSetlist(state.currentSetlistId, songId);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞
        const setlists = await api.loadSetlists();
        const updatedSetlist = setlists.find(s => s.id === state.currentSetlistId);
        
        if (updatedSetlist) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state.currentSetlistSongs = updatedSetlist.songs || [];
            eventBus.setState('currentSetlistSongs', state.currentSetlistSongs);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            console.log('üîÑ [Controller] –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏');
            ui.displaySelectedSetlist(
                updatedSetlist,
                window.handleFavoriteOrRepertoireSelect || function() {},
                window.handleRemoveSongFromSetlist || function() {}
            );
        }
        
        showNotification(`‚ûñ "${songName}" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–µ—Ç-–ª–∏—Å—Ç–∞`, 'info');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå [Controller] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏', 'error');
        throw error;
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –∫ –ø–µ—Å–Ω–µ
 * @param {string} songId - ID –ø–µ—Å–Ω–∏
 * @param {string} note - –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
 */
export async function handleSaveNote(songId, note) {
    console.log('üìù [Controller] handleSaveNote:', songId);
    
    try {
        await api.saveSongNote(songId, note);
        
        showNotification('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–º–µ—Ç–æ–∫
        if (ui.notesModal) {
            ui.notesModal.classList.remove('show');
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå [Controller] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏', 'error');
        throw error;
    }
}

// ====================================
// REPERTOIRE MANAGEMENT
// ====================================

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞
 * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
 */
export function handleFavoriteOrRepertoireSelect(song) {
    console.log('‚≠ê [Controller] handleFavoriteOrRepertoireSelect:', song.name);
    
    // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç UI
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —ç–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ
    eventBus.emit('favoriteOrRepertoireSelect', { song });
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –ø–µ—Å–Ω—é –∏–∑ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
 */
export async function handleAddToRepertoire(song) {
    console.log('üìö [Controller] handleAddToRepertoire:', song.name);
    
    try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { 
            addToUserRepertoire, 
            removeFromUserRepertoire, 
            checkSongInUserRepertoire,
            replaceKeyInRepertoire 
        } = await import('../api/userRepertoire.js');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        const keySelect = document.getElementById('key-select');
        const currentKey = keySelect?.value || song.defaultKey || song.keys?.[0] || 'C';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        const result = await addToUserRepertoire(song, currentKey);
        
        if (result.status === 'exists') {
            // –ü–µ—Å–Ω—è —É–∂–µ –µ—Å—Ç—å –≤ —Ç–æ–π –∂–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            const action = confirm(
                `–ü–µ—Å–Ω—è "${song.name}" —É–∂–µ –µ—Å—Ç—å –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–µ –≤ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ${currentKey}.\n\n` +
                `–£–¥–∞–ª–∏—Ç—å –µ—ë –∏–∑ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞?`
            );
            
            if (action) {
                await removeFromUserRepertoire(song.id);
                showNotification(`üé§ "${song.name}" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞`, 'info');
            }
        } else if (result.status === 'different_key') {
            // –ü–µ—Å–Ω—è –µ—Å—Ç—å –≤ –¥—Ä—É–≥–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            const action = confirm(
                `–ü–µ—Å–Ω—è "${song.name}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä –≤ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ${result.key}.\n\n` +
                `–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ${currentKey}?`
            );
            
            if (action) {
                await replaceKeyInRepertoire(song.id, currentKey);
                showNotification(`üé§ –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ${result.key} –Ω–∞ ${currentKey}`, 'success');
            }
        } else if (result.status === 'added') {
            // –ü–µ—Å–Ω—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞
            showNotification(`üé§ "${song.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä (${currentKey})`, 'success');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞
        if (typeof ui.updateRepertoireButton === 'function') {
            await ui.updateRepertoireButton(song);
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå [Controller] –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–æ–º:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–æ–º', 'error');
        throw error;
    }
}

// ====================================
// UTILITY FUNCTIONS
// ====================================

/**
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω
 */
export async function finishAddingSongs() {
    console.log('üèÅ [Controller] finishAddingSongs');
    
    const addedCount = window.addedSongsToCurrentSetlist?.size || 0;
    const setlistName = eventBus.getState('currentCreatedSetlistName') || 
                       eventBus.getState('currentSetlistName') || 
                       state.currentSetlistName;
    
    const currentSetlistId = eventBus.getState('currentSetlistId') || state.currentSetlistId;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º overlay
    if (ui.addSongsOverlay) {
        ui.addSongsOverlay.classList.remove('show');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    if (addedCount > 0) {
        if (eventBus.getState('activeOverlayMode') === 'create') {
            showNotification(`üéâ –°–µ—Ç-–ª–∏—Å—Ç "${setlistName}" —Å–æ–∑–¥–∞–Ω —Å ${addedCount} –ø–µ—Å–Ω—è–º–∏!`, 'success');
        } else {
            showNotification(`üéâ –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –ø–µ—Å–µ–Ω –≤ "${setlistName}"!`, 'success');
        }
    } else {
        if (eventBus.getState('activeOverlayMode') === 'create') {
            showNotification(`‚úÖ –°–µ—Ç-–ª–∏—Å—Ç "${setlistName}" –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`, 'success');
        } else {
            showNotification(`‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ "${setlistName}" –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`, 'success');
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞ –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞
    if (currentSetlistId && ui.setlistsPanel && ui.setlistsPanel.classList.contains('open')) {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞
            const setlists = await api.loadSetlists();
            const updatedSetlist = setlists.find(s => s.id === currentSetlistId);
            
            if (updatedSetlist) {
                console.log('üîÑ [Controller] –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞:', updatedSetlist.name);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–æ –∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞
                ui.displaySelectedSetlist(
                    updatedSetlist,
                    window.handleFavoriteOrRepertoireSelect || function() {},
                    window.handleRemoveSongFromSetlist || function() {}
                );
            }
        } catch (error) {
            console.error('‚ùå [Controller] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç-–ª–∏—Å—Ç–∞:', error);
        }
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    eventBus.setState('activeOverlayMode', null);
    eventBus.setState('activeSetlistId', null);
    eventBus.setState('activeSetlistName', null);
    
    // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if (window.addedSongsToCurrentSetlist) {
        window.addedSongsToCurrentSetlist.clear();
    }
}

// ====================================
// MODULE METADATA
// ====================================

export const metadata = {
    name: 'MainController',
    version: '1.0.0',
    description: '–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π',
    functions: [
        'handleCreateSetlist',
        'refreshSetlists',
        'handleSetlistSelect',
        'handleSetlistDelete',
        'handleRemoveSongFromSetlist',
        'handleSaveNote',
        'handleFavoriteOrRepertoireSelect',
        'handleAddToRepertoire',
        'finishAddingSongs'
    ]
};