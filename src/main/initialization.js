/**
 * ===================================================================
 * INITIALIZATION MODULE
 * ===================================================================
 * –ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - initializeApp() - –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 * - loadInitialData() - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase
 * - setupUI() - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * - setupTheme() - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
 * - setupMobileOptimizations() - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
 */

// –ò–º–ø–æ—Ä—Ç—ã
import { setupEventListeners } from './event-handlers.js';
import * as api from '../api/index.js';
import * as ui from '../../ui.js';
import * as metronomeUI from '../../metronome.js';
import searchWorkerManager from '../../src/js/workers/workerManager.js';

// ====================================
// PANEL HANDLERS SETUP - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!
// ====================================

function setupPanelHandlers() {
    console.log('üìã [Initialization] Setting up panel handlers...');
    
    // –ü–ê–ù–ï–õ–¨ –°–ï–¢–õ–ò–°–¢–û–í - –¢–û–ß–ù–û –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –ö–û–î–ï
    if (ui.toggleSetlistsButton) {
        ui.toggleSetlistsButton.addEventListener('click', async () => {
            console.log('üìã [Initialization] Setlists button clicked');
            const isAlreadyOpen = ui.setlistsPanel.classList.contains('open');
            ui.closeAllSidePanels();
            if (!isAlreadyOpen) {
                ui.toggleSetlistsButton.classList.add('loading');
                try {
                    ui.setlistsPanel.classList.add('open');
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –Ω–∞–ø—Ä—è–º—É—é - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!
                    const setlists = await api.loadSetlists();
                    console.log('üìã [Initialization] Loaded setlists:', setlists.length);
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
                    if (window.state && typeof window.state.setSetlists === 'function') {
                        window.state.setSetlists(setlists);
                    }
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–µ—Ç–ª–∏—Å—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
                    if (typeof ui.renderSetlists === 'function') {
                        ui.renderSetlists(setlists, 
                            window.handleSetlistSelect || function(setlist) {
                                console.log('üìã Setlist selected:', setlist.name);
                                if (window.state) window.state.setCurrentSetlistId(setlist.id);
                                if (ui.displaySelectedSetlist) {
                                    ui.displaySelectedSetlist(setlist, 
                                        window.handleFavoriteOrRepertoireSelect,
                                        window.handleRemoveSongFromSetlist
                                    );
                                }
                            },
                            window.handleSetlistDelete || async function(setlistId, setlistName) {
                                console.log('üìã Delete setlist:', setlistName);
                                if (confirm(`–£–¥–∞–ª–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç "${setlistName}"?`)) {
                                    try {
                                        await api.deleteSetlist(setlistId);
                                        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–Ω–µ–ª—å
                                        ui.toggleSetlistsButton.click();
                                    } catch (error) {
                                        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
                                        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç');
                                    }
                                }
                            }
                        );
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤:', error);
                } finally {
                    ui.toggleSetlistsButton.classList.remove('loading');
                }
            }
        });
        console.log('üìã [Initialization] Setlists panel handler attached');
    } else {
        console.error('üìã [Initialization] ui.toggleSetlistsButton not found!');
    }
    
    // –ü–ê–ù–ï–õ–¨ "–ú–û–ò" - –¢–û–ß–ù–û –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –ö–û–î–ï
    if (ui.toggleMyListButton) {
        ui.toggleMyListButton.addEventListener('click', async () => {
            console.log('‚≠ê [Initialization] My List button clicked');
            const isAlreadyOpen = ui.myListPanel.classList.contains('open');
            ui.closeAllSidePanels();
            if (!isAlreadyOpen) {
                ui.toggleMyListButton.classList.add('loading');
                try {
                    ui.myListPanel.classList.add('open');
                    // Logic to load and render favorites - –¢–û–ß–ù–û –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –ö–û–î–ï
                    if (window.state && window.state.allSongs && window.state.favorites) {
                        const favoriteSongs = window.state.allSongs.filter(song => 
                            window.state.favorites.some(fav => fav.songId === song.id)
                        ).map(song => {
                            const fav = window.state.favorites.find(f => f.songId === song.id);
                            return { ...song, preferredKey: fav.preferredKey };
                        });
                        ui.renderFavorites(favoriteSongs, 
                            window.handleFavoriteOrRepertoireSelect || function(song) {
                                console.log('‚≠ê Favorite selected:', song.name);
                            },
                            async function(songId) {
                                if(confirm("–£–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é –∏–∑ '–ú–æ–∏—Ö'?")) {
                                    try {
                                        await api.removeFromFavorites(songId);
                                        // Refresh list after deletion
                                        ui.toggleMyListButton.click();
                                    } catch (error) {
                                        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
                                        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞');
                                    }
                                }
                            }
                        );
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö:', error);
                } finally {
                    ui.toggleMyListButton.classList.remove('loading');
                }
            }
        });
        console.log('‚≠ê [Initialization] My List panel handler attached');
    } else {
        console.error('‚≠ê [Initialization] ui.toggleMyListButton not found!');
    }
    
    // –ü–ê–ù–ï–õ–¨ –†–ï–ü–ï–†–¢–£–ê–† - –¢–û–ß–ù–û –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –ö–û–î–ï
    if (ui.toggleRepertoireButton) {
        ui.toggleRepertoireButton.addEventListener('click', async () => {
            console.log('üé≠ [Initialization] Repertoire button clicked');
            const isAlreadyOpen = ui.repertoirePanel.classList.contains('open');
            ui.closeAllSidePanels();
            if (!isAlreadyOpen) {
                ui.toggleRepertoireButton.classList.add('loading');
                try {
                    ui.repertoirePanel.classList.add('open');
                    api.loadRepertoire(
                        window.state ? window.state.currentVocalistId : null, 
                        window.handleRepertoireUpdate || function(data) {
                            console.log('üé≠ Repertoire loaded:', data);
                        }
                    );
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞:', error);
                } finally {
                    ui.toggleRepertoireButton.classList.remove('loading');
                }
            }
        });
        console.log('üé≠ [Initialization] Repertoire panel handler attached');
    } else {
        console.error('üé≠ [Initialization] ui.toggleRepertoireButton not found!');
    }
}

// ====================================
// MAIN INITIALIZATION FUNCTION
// ====================================

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export async function initializeApp() {
    console.log('üöÄ [Initialization] initializeApp START');
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingIndicator();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π)
        setupTheme();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        setupUI();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–µ–π –ü–û–°–õ–ï –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        setupPanelHandlers();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ swipe –∂–µ—Å—Ç–æ–≤
        setupSwipeToClose();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–æ–Ω–æ–º–∞
        await initializeMetronome();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await loadInitialData();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        setupMobileOptimizations();
        
        console.log('‚úÖ [Initialization] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå [Initialization] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showCriticalError(error);
    } finally {
        hideLoadingIndicator();
    }
}

// ====================================
// THEME SETUP
// ====================================

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function setupTheme() {
    console.log('üé® [Initialization] setupTheme');
    
    let initialTheme = 'dark';
    
    try {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'light' || savedTheme === 'dark') {
            initialTheme = savedTheme;
        } else {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å–∏—Å—Ç–µ–º–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            const prefersDark = !window.matchMedia?.('(prefers-color-scheme: light)')?.matches;
            initialTheme = prefersDark ? 'dark' : 'light';
        }
    } catch (error) {
        console.error('‚ùå [Initialization] –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º—ã:', error);
    }
    
    if (typeof ui.applyTheme === 'function') {
        ui.applyTheme(initialTheme);
    }
}

// ====================================
// UI SETUP
// ====================================

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç—ã
 */
function setupUI() {
    console.log('üé® [Initialization] setupUI');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
    if (typeof ui.updateFontSize === 'function') {
        ui.updateFontSize();
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (ui.songContent) {
        ui.songContent.classList.add('split-columns');
    }
    
    if (typeof ui.updateSplitButton === 'function') {
        ui.updateSplitButton();
    }
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç swipe –∂–µ—Å—Ç—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–µ–π
 */
function setupSwipeToClose() {
    console.log('üëÜ [Initialization] setupSwipeToClose');
    
    const panels = document.querySelectorAll('.side-panel, .global-fullscreen-overlay');
    
    panels.forEach(panel => {
        let startY = 0;
        let startX = 0;
        
        panel.addEventListener('touchstart', (e) => {
            startY = e.touches[0].clientY;
            startX = e.touches[0].clientX;
        });
        
        panel.addEventListener('touchend', (e) => {
            const endY = e.changedTouches[0].clientY;
            const endX = e.changedTouches[0].clientX;
            const deltaY = startY - endY;
            const deltaX = startX - endX;
            
            // Swipe up to close (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞–Ω–µ–ª–∏)
            if (Math.abs(deltaY) > Math.abs(deltaX) && deltaY > 50) {
                if (panel.classList.contains('show') || panel.classList.contains('open')) {
                    panel.classList.remove('show', 'open');
                }
            }
            
            // Swipe left to close (–±–æ–∫–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏)
            if (Math.abs(deltaX) > Math.abs(deltaY) && deltaX > 50) {
                if (panel.classList.contains('show') || panel.classList.contains('open')) {
                    panel.classList.remove('show', 'open');
                }
            }
        });
    });
}

// ====================================
// METRONOME INITIALIZATION
// ====================================

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–æ–Ω–æ–º
 */
async function initializeMetronome() {
    console.log('ü•Å [Initialization] initializeMetronome');
    
    try {
        if (typeof metronomeUI?.initMetronomeUI === 'function') {
            await metronomeUI.initMetronomeUI();
        }
        
        // –î–µ–ª–∞–µ–º –º–µ—Ç—Ä–æ–Ω–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (typeof window !== 'undefined') {
            window.metronomeUI = metronomeUI;
        }
        
    } catch (error) {
        console.error('‚ùå [Initialization] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–æ–Ω–æ–º–∞:', error);
    }
}

// ====================================
// DATA LOADING
// ====================================

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
 */
async function loadInitialData() {
    console.log('üìä [Initialization] loadInitialData');
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–µ—Å–Ω–∏ –∏–∑ Firestore
        await api.loadAllSongsFromFirestore();
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        populateSelectors();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–∫–∞–ª–∏—Å—Ç–æ–≤
        const vocalists = await api.loadVocalists();
        if (typeof ui.populateVocalistSelect === 'function') {
            ui.populateVocalistSelect(vocalists);
        }
        
        // –î–µ–ª–∞–µ–º search worker manager –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
        if (typeof window !== 'undefined') {
            window.searchWorkerManager = searchWorkerManager;
        }
        
    } catch (error) {
        console.error('‚ùå [Initialization] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}

/**
 * –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–∞–Ω–Ω—ã–º–∏
 */
function populateSelectors() {
    console.log('üìã [Initialization] populateSelectors');
    
    try {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –ª–∏—Å—Ç–æ–≤
        if (typeof ui.populateSheetSelect === 'function') {
            ui.populateSheetSelect();
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Å–µ–Ω
        if (typeof ui.populateSongSelect === 'function') {
            ui.populateSongSelect();
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è)
        if (typeof window.populateCategoryFilter === 'function') {
            window.populateCategoryFilter();
        }
        
    } catch (error) {
        console.error('‚ùå [Initialization] –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤:', error);
    }
}

// ====================================
// MOBILE OPTIMIZATIONS
// ====================================

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 */
function setupMobileOptimizations() {
    console.log('üì± [Initialization] setupMobileOptimizations');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º
    const isMobile = window.innerWidth <= 480;
    
    if (!isMobile) {
        return;
    }
    
    console.log('üì± [Initialization] –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    const observer = new MutationObserver(() => {
        document.querySelectorAll('.side-panel').forEach(panel => {
            if (panel.classList.contains('open')) {
                // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ï –†–ê–ó–ú–ï–†–´
                const maxWidth = Math.min(280, window.innerWidth * 0.85);
                panel.style.width = maxWidth + 'px';
                panel.style.maxWidth = maxWidth + 'px';
                
                // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï
                panel.style.position = 'fixed';
                panel.style.left = '0';
                panel.style.top = '0';
                panel.style.height = '100vh';
                panel.style.zIndex = '9999';
                
                console.log('üì± [MobileOptimization] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–∑–º–µ—Ä—ã –ø–∞–Ω–µ–ª–∏:', maxWidth + 'px');
            }
        });
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ['class']
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º observer –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    if (typeof window !== 'undefined') {
        window.mobileOptimizationObserver = observer;
    }
}

// ====================================
// LOADING INDICATORS
// ====================================

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoadingIndicator() {
    if (ui.loadingIndicator) {
        ui.loadingIndicator.style.display = 'block';
    }
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
 */
function hideLoadingIndicator() {
    if (ui.loadingIndicator) {
        ui.loadingIndicator.style.display = 'none';
    }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
 * @param {Error} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 */
function showCriticalError(error) {
    console.error('üí• [Initialization] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    
    const errorMessage = `
        <div style="
            color: #ef4444; 
            background: #1f1f1f; 
            padding: 20px; 
            border-radius: 8px; 
            margin: 20px; 
            border: 1px solid #ef4444;
            font-family: monospace;
        ">
            <h2 style="color: #ef4444; margin-top: 0;">üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h2>
            <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${error.message}</p>
            <p><strong>–°—Ç–µ–∫:</strong></p>
            <pre style="background: #000; padding: 10px; border-radius: 4px; overflow: auto;">${error.stack}</pre>
            <p style="margin-bottom: 0;">
                <strong>–î–µ–π—Å—Ç–≤–∏—è:</strong><br>
                1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (Ctrl+F5)<br>
                2. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞<br>
                3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É<br>
                4. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
            </p>
        </div>
    `;
    
    document.body.innerHTML = errorMessage;
}

// ====================================
// DOM READY HANDLER
// ====================================

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
 */
export function onDOMContentLoaded() {
    console.log('üìÑ [Initialization] DOM loaded');
    console.log('üìÑ [Initialization] Checking key elements:');
    console.log('üìÑ [Initialization] confirm-key-selection element:', document.getElementById('confirm-key-selection'));
    console.log('üìÑ [Initialization] key-selection-modal element:', document.getElementById('key-selection-modal'));
    console.log('üìÑ [Initialization] add-songs-overlay element:', document.getElementById('add-songs-overlay'));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    initializeApp();
}

// ====================================
// AUTO-INITIALIZATION
// ====================================

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
if (typeof document !== 'undefined') {
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', onDOMContentLoaded);
    } else {
        // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        onDOMContentLoaded();
    }
}

// ====================================
// MODULE METADATA
// ====================================

export const metadata = {
    name: 'Initialization',
    version: '1.0.0',
    description: '–ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
    functions: [
        'initializeApp',
        'setupTheme',
        'setupUI',
        'setupSwipeToClose',
        'initializeMetronome',
        'loadInitialData',
        'populateSelectors',
        'setupMobileOptimizations',
        'showLoadingIndicator',
        'hideLoadingIndicator',
        'showCriticalError',
        'onDOMContentLoaded'
    ]
};