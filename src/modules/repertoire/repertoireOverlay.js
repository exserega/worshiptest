/**
 * @fileoverview –û–≤–µ—Ä–ª–µ–π —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @module RepertoireOverlay
 */

import logger from '../../utils/logger.js';
import { db, collection, getDocs, getDoc, doc, query, orderBy, onSnapshot } from '../../utils/firebase-v8-adapter.js';
import { auth } from '../../../firebase-init.js';
import { displaySongDetails } from '../../../ui.js';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–≤–µ—Ä–ª–µ–µ–º —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞
 */
class RepertoireOverlay {
    constructor() {
        this.overlay = null;
        this.isOpen = false;
        this.currentFilter = 'all';
        this.currentKeyFilter = null;
        this.repertoireSongs = [];
        this.filteredSongs = [];
        this.unsubscribe = null;
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–≤–µ—Ä–ª–µ—è
     */
    init() {
        this.createOverlayHTML();
        this.attachEventListeners();
        this.loadUserRepertoire();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–≤–µ—Ä–ª–µ—è
     */
    createOverlayHTML() {
        const overlayHTML = `
            <div id="repertoire-overlay" class="songs-overlay">
                <div class="songs-overlay-backdrop"></div>
                <div class="songs-overlay-content">
                    <!-- –®–∞–ø–∫–∞ -->
                    <div class="songs-overlay-header">
                        <h2 class="songs-overlay-title">–ú–æ–π —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä</h2>
                        <button class="songs-overlay-close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">
                            <span class="close-icon"></span>
                        </button>
                    </div>
                    
                    <!-- –§–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π -->
                    <div class="songs-filters-container">
                        <!-- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã -->
                        <div class="songs-category-filters main-filters">
                            <button class="category-chip active" data-main-filter="all">
                                –í—Å–µ
                            </button>
                            <button class="category-chip" data-main-filter="–ë—ã—Å—Ç—Ä—ã–µ">
                                –ë—ã—Å—Ç—Ä—ã–µ
                            </button>
                            <button class="category-chip" data-main-filter="–ü–æ–∫–ª–æ–Ω–µ–Ω–∏–µ">
                                –ü–æ–∫–ª–æ–Ω–µ–Ω–∏–µ
                            </button>
                            <button class="category-chip" data-main-filter="tonality">
                                –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                            </button>
                        </div>
                        
                        <!-- –ü–æ–¥—Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å–∫—Ä—ã—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
                        <div class="songs-category-filters sub-filters" style="display: none;">
                            <!-- –ë—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                        </div>
                    </div>
                    
                    <!-- –°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω -->
                    <div class="songs-list-container">
                        <div class="songs-list">
                            <!-- –ü–µ—Å–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', overlayHTML);
        this.overlay = document.getElementById('repertoire-overlay');
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è
        const closeBtn = this.overlay.querySelector('.songs-overlay-close');
        const backdrop = this.overlay.querySelector('.songs-overlay-backdrop');
        
        closeBtn.addEventListener('click', () => this.close());
        backdrop.addEventListener('click', () => this.close());
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        const mainFilterButtons = this.overlay.querySelectorAll('[data-main-filter]');
        mainFilterButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const filter = e.target.dataset.mainFilter;
                this.selectMainFilter(filter);
            });
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        this.escapeHandler = (e) => {
            if (e.key === 'Escape' && this.isOpen) {
                this.close();
            }
        };
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserRepertoire() {
        const user = auth.currentUser;
        if (!user) {
            logger.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            return;
        }
        
        logger.log(`üé§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.uid}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –∫–µ—à–µ–º)
        // try {
        //     const userDocRef = doc(db, 'users', user.uid);
        //     const userDoc = await getDoc(userDocRef);
        //     if (userDoc.exists) {
        //         logger.log('üìä –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω:', userDoc.data());
        //     }
        // } catch (error) {
        //     logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        // }
        
        // –í Firebase v8 –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏–∏
        const userDocRef = doc(db, 'users', user.uid);
        const repertoireRef = userDocRef.collection('repertoire');
        const q = repertoireRef.orderBy('name');
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        this.unsubscribe = onSnapshot(q, (snapshot) => {
            this.repertoireSongs = [];
            logger.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${snapshot.size}`);
            
            snapshot.forEach(doc => {
                const data = doc.data();
                logger.log(`üìÑ –î–æ–∫—É–º–µ–Ω—Ç ${doc.id}:`, data);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Å–Ω–∏ (–¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å preferredKey –∏–ª–∏ category)
                if (data.preferredKey || data.category || data.BPM) {
                    // –≠—Ç–æ –ø–µ—Å–Ω—è
                    this.repertoireSongs.push({
                        id: doc.id,
                        ...data
                    });
                } else {
                    // –≠—Ç–æ –Ω–µ –ø–µ—Å–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    logger.warn(`‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç ${doc.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Å–Ω–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:`, data);
                }
            });
            
            logger.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.repertoireSongs.length} –ø–µ—Å–µ–Ω –∏–∑ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞`);
            this.filterSongs();
            this.renderSongs();
        }, (error) => {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞:', error);
        });
    }
    
    /**
     * –í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    selectMainFilter(filter) {
        this.currentFilter = filter;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        const mainButtons = this.overlay.querySelectorAll('[data-main-filter]');
        mainButtons.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.mainFilter === filter);
        });
        
        // –£–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        const subFilters = this.overlay.querySelector('.sub-filters');
        
        if (filter === 'tonality') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞
            const tonalities = [...new Set(this.repertoireSongs.map(s => s.preferredKey).filter(Boolean))].sort();
            
            if (tonalities.length > 0) {
                subFilters.innerHTML = tonalities.map(key => `
                    <button class="category-chip sub-category ${this.currentKeyFilter === key ? 'active' : ''}" data-key-filter="${key}">
                        ${key}
                    </button>
                `).join('');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
                subFilters.querySelectorAll('[data-key-filter]').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        this.selectKeyFilter(e.target.dataset.keyFilter);
                    });
                });
                
                subFilters.style.display = 'flex';
            } else {
                subFilters.style.display = 'none';
            }
        } else if (filter === '–ë—ã—Å—Ç—Ä—ã–µ' || filter === '–ü–æ–∫–ª–æ–Ω–µ–Ω–∏–µ') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ñ–∏–ª—å—Ç—Ä—ã –í–µ—Ä—Ç–∏–∫–∞–ª—å/–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
            subFilters.innerHTML = `
                <button class="category-chip sub-category" data-sub-filter="–≤–µ—Ä—Ç–∏–∫–∞–ª—å">
                    –í–µ—Ä—Ç–∏–∫–∞–ª—å
                </button>
                <button class="category-chip sub-category" data-sub-filter="–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å">
                    –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
                </button>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ñ–∏–ª—å—Ç—Ä–æ–≤
            subFilters.querySelectorAll('[data-sub-filter]').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    subFilters.querySelectorAll('[data-sub-filter]').forEach(b => b.classList.remove('active'));
                    e.target.classList.add('active');
                    
                    this.filterSongs();
                    this.renderSongs();
                });
            });
            
            subFilters.style.display = 'flex';
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è "–í—Å–µ"
            subFilters.style.display = 'none';
            this.currentKeyFilter = null;
        }
        
        this.filterSongs();
        this.renderSongs();
    }
    
    /**
     * –í—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
     */
    selectKeyFilter(key) {
        this.currentKeyFilter = key;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        const keyButtons = this.overlay.querySelectorAll('[data-key-filter]');
        keyButtons.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.keyFilter === key);
        });
        
        this.filterSongs();
        this.renderSongs();
    }
    
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–µ—Å–µ–Ω
     */
    filterSongs() {
        this.filteredSongs = [...this.repertoireSongs];
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (this.currentFilter === '–ë—ã—Å—Ç—Ä—ã–µ' || this.currentFilter === '–ü–æ–∫–ª–æ–Ω–µ–Ω–∏–µ') {
            this.filteredSongs = this.filteredSongs.filter(song => 
                song.category?.includes(this.currentFilter)
            );
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const activeSubFilter = this.overlay.querySelector('.sub-filters [data-sub-filter].active');
            if (activeSubFilter) {
                const subFilter = activeSubFilter.dataset.subFilter;
                this.filteredSongs = this.filteredSongs.filter(song => 
                    song.category?.toLowerCase().includes(subFilter)
                );
            }
        }
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        if (this.currentFilter === 'tonality' && this.currentKeyFilter) {
            this.filteredSongs = this.filteredSongs.filter(song => 
                song.preferredKey === this.currentKeyFilter
            );
        }
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏
        this.filteredSongs.sort((a, b) => a.name.localeCompare(b.name, 'ru'));
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω
     */
    renderSongs() {
        const songsList = this.overlay.querySelector('.songs-list');
        
        if (this.filteredSongs.length === 0) {
            songsList.innerHTML = `
                <div class="empty-message">
                    ${this.repertoireSongs.length === 0 
                        ? '–í–∞—à —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä –ø—É—Å—Ç' 
                        : '–ù–µ—Ç –ø–µ—Å–µ–Ω –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º'}
                </div>
            `;
            return;
        }
        
        logger.log('üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–µ—Å–µ–Ω:', this.filteredSongs);
        
        songsList.innerHTML = this.filteredSongs.map(song => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            const songName = song.name || `–ü–µ—Å–Ω—è ${song.id}`;
            const songId = song.id || 'unknown';
            
            return `
                <div class="song-item" data-song-id="${songId}">
                    <div class="song-info">
                        <span class="song-name">${songName}</span>
                    </div>
                    <div class="song-meta">
                        ${song.preferredKey ? `<span class="song-key">${song.preferredKey}</span>` : ''}
                        ${(song.BPM || song.bpm) ? `<span class="song-bpm">${song.BPM || song.bpm} BPM</span>` : ''}
                    </div>
                    <button class="song-delete-btn" data-song-id="${songId}" title="–£–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
        }).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
        const songItems = songsList.querySelectorAll('.song-item');
        songItems.forEach(item => {
            item.addEventListener('click', (e) => {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è
                if (e.target.closest('.song-delete-btn')) return;
                
                const songId = item.dataset.songId;
                const song = this.filteredSongs.find(s => s.id === songId);
                if (song) {
                    this.selectSong(song);
                }
            });
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
        const deleteButtons = songsList.querySelectorAll('.song-delete-btn');
        deleteButtons.forEach(btn => {
            btn.addEventListener('click', async (e) => {
                e.stopPropagation();
                const songId = btn.dataset.songId;
                const song = this.filteredSongs.find(s => s.id === songId);
                
                if (song && confirm(`–£–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é "${song.name}" –∏–∑ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞?`)) {
                    try {
                        const { removeFromUserRepertoire } = await import('../../api/userRepertoire.js');
                        await removeFromUserRepertoire(songId);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        await this.loadUserRepertoire();
                        this.filterSongs();
                        this.renderSongs();
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if (window.showNotification) {
                            window.showNotification(`üé§ "${song.name}" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞`, 'info');
                        }
                    } catch (error) {
                        logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏:', error);
                        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏');
                    }
                }
            });
        });
    }
    
    /**
     * –í—ã–±–æ—Ä –ø–µ—Å–Ω–∏
     */
    async selectSong(song) {
        logger.log('–í—ã–±—Ä–∞–Ω–∞ –ø–µ—Å–Ω—è –∏–∑ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞:', song.name);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏ –∏–∑ –æ–±—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            const { getSongById } = await import('../../api/index.js');
            const fullSongData = await getSongById(song.id);
            
            if (fullSongData) {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Å–Ω—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
                if (typeof displaySongDetails === 'function') {
                    displaySongDetails(fullSongData, song.preferredKey);
                }
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
                this.close();
            } else {
                logger.error('–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–±—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', song.id);
                alert('–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–Ω–∏:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–Ω–∏');
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è
     */
    open() {
        if (!this.overlay) return;
        
        this.overlay.classList.add('visible');
        this.isOpen = true;
        document.addEventListener('keydown', this.escapeHandler);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        this.filterSongs();
        this.renderSongs();
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è
     */
    close() {
        if (!this.overlay) return;
        
        this.overlay.classList.remove('visible');
        this.isOpen = false;
        document.removeEventListener('keydown', this.escapeHandler);
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è
     */
    destroy() {
        if (this.unsubscribe) {
            this.unsubscribe();
        }
        
        if (this.overlay) {
            this.overlay.remove();
        }
        
        document.removeEventListener('keydown', this.escapeHandler);
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
let repertoireOverlayInstance = null;

export function initRepertoireOverlay() {
    if (!repertoireOverlayInstance) {
        repertoireOverlayInstance = new RepertoireOverlay();
    }
    return repertoireOverlayInstance;
}

export function openRepertoireOverlay() {
    if (!repertoireOverlayInstance) {
        initRepertoireOverlay();
    }
    repertoireOverlayInstance.open();
}

export function closeRepertoireOverlay() {
    if (repertoireOverlayInstance) {
        repertoireOverlayInstance.close();
    }
}