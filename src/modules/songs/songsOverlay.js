// ====================================
// üéµ SONGS OVERLAY MODULE
// ====================================
// –ú–æ–¥—É–ª—å –æ–≤–µ—Ä–ª–µ—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Å–µ–Ω
// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–µ—Å–Ω–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
// ====================================

import logger from '../../utils/logger.js';
import { displaySongDetails } from '../../../ui.js';
import * as state from '../../../js/state.js';
import { getUserRepertoire } from '../../api/userRepertoire.js';

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
const MAIN_CATEGORIES = {
    'all': '–í—Å–µ',
    'fast': '–ë—ã—Å—Ç—Ä—ã–µ',
    'worship': '–ü–æ–∫–ª–æ–Ω–µ–Ω–∏–µ'
};

// –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å)
const SUB_CATEGORIES = {
    'vertical': '–í–µ—Ä—Ç–∏–∫–∞–ª—å',
    'horizontal': '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å'
};

// –ú–∞–ø–ø–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è song.sheet -> { main, sub }
const SHEET_TO_LABELS = {
    '–ë—ã—Å—Ç—Ä—ã–µ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å)': { main: '–ë—ã—Å—Ç—Ä—ã–µ', sub: '–í–µ—Ä—Ç–∏–∫–∞–ª—å' },
    '–ë—ã—Å—Ç—Ä—ã–µ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å)': { main: '–ë—ã—Å—Ç—Ä—ã–µ', sub: '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å' },
    '–ü–æ–∫–ª–æ–Ω–µ–Ω–∏–µ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å)': { main: '–ü–æ–∫–ª–æ–Ω–µ–Ω–∏–µ', sub: '–í–µ—Ä—Ç–∏–∫–∞–ª—å' },
    '–ü–æ–∫–ª–æ–Ω–µ–Ω–∏–µ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å)': { main: '–ü–æ–∫–ª–æ–Ω–µ–Ω–∏–µ', sub: '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å' }
};

class SongsOverlay {
    constructor() {
        this.overlay = null;
        this.songs = [];
        this.filteredSongs = [];
        this.selectedMainCategory = 'all';
        this.selectedSubCategory = null; // null –æ–∑–Ω–∞—á–∞–µ—Ç "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
        this.isOpen = false;
        this.repertoireKeyBySongId = {}; // songId -> preferredKey
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–≤–µ—Ä–ª–µ—è
     */
    init() {
        this.createOverlayHTML();
        this.attachEventListeners();
        logger.log('üéµ Songs overlay initialized');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–≤–µ—Ä–ª–µ—è
     */
    createOverlayHTML() {
        const overlayHTML = `
            <div id="songs-overlay" class="songs-overlay">
                <div class="songs-overlay-backdrop"></div>
                <div class="songs-overlay-content">
                    <!-- –®–∞–ø–∫–∞ -->
                    <div class="songs-overlay-header">
                        <h2 class="songs-overlay-title">–í—ã–±–æ—Ä –ø–µ—Å–Ω–∏</h2>
                        <button class="songs-overlay-close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">
                            <span class="close-icon"></span>
                        </button>
                    </div>
                    
                    <!-- –§–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π -->
                    <div class="songs-filters-container">
                        <!-- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ -->
                        <div class="songs-category-filters main-filters">
                            ${Object.entries(MAIN_CATEGORIES).map(([key, label]) => `
                                <button class="category-chip main-category ${key === 'all' ? 'active' : ''}" 
                                        data-main-category="${key}">
                                    ${label}
                                </button>
                            `).join('')}
                        </div>
                        
                        <!-- –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–∫—Ä—ã—Ç—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ) -->
                        <div class="songs-category-filters sub-filters" style="display: none;">
                            ${Object.entries(SUB_CATEGORIES).map(([key, label]) => `
                                <button class="category-chip sub-category" 
                                        data-sub-category="${key}">
                                    ${label}
                                </button>
                            `).join('')}
                        </div>
                    </div>
                    
                    <!-- –°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω -->
                    <div class="songs-list-container">
                        <div class="songs-list">
                            <!-- –ü–µ—Å–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', overlayHTML);
        this.overlay = document.getElementById('songs-overlay');
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è
        const closeBtn = this.overlay.querySelector('.songs-overlay-close');
        const backdrop = this.overlay.querySelector('.songs-overlay-backdrop');
        
        closeBtn.addEventListener('click', () => this.close());
        backdrop.addEventListener('click', () => this.close());
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const mainCategoryChips = this.overlay.querySelectorAll('.main-category');
        mainCategoryChips.forEach(chip => {
            chip.addEventListener('click', (e) => {
                const category = e.target.dataset.mainCategory;
                this.selectMainCategory(category);
            });
        });
        
        // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const subCategoryChips = this.overlay.querySelectorAll('.sub-category');
        subCategoryChips.forEach(chip => {
            chip.addEventListener('click', (e) => {
                const subCategory = e.target.dataset.subCategory;
                this.selectSubCategory(subCategory);
            });
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isOpen) {
                this.close();
            }
        });
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è
     */
    async open() {
        this.isOpen = true;
        this.overlay.classList.add('visible');
        document.body.style.overflow = 'hidden';
        // –°–∫—Ä—ã–≤–∞–µ–º —à–∞–ø–∫—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –∫–∞–∫ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ–≤–µ—Ä–ª–µ—è—Ö/–º–æ–¥–∞–ª–∫–∞—Ö
        try { document.body.classList.add('hide-header'); } catch(e) {}
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Å–Ω–∏ –∏–∑ state –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        this.loadSongs();
        await this.loadUserRepertoireMap();
        this.loadPersistedFilterState();
        this.applyFilterStateToUI();
        this.filterSongs();
        
        logger.log('üéµ Songs overlay opened');
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è
     */
    close() {
        this.isOpen = false;
        this.overlay.classList.remove('visible');
        document.body.style.overflow = '';
        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–ø–∫—É
        try { document.body.classList.remove('hide-header'); } catch(e) {}
        logger.log('üéµ Songs overlay closed');
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Å–µ–Ω –∏–∑ state
     */
    loadSongs() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Å–Ω–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ state
            this.songs = state.allSongs || [];
            this.filteredSongs = [...this.songs];
            logger.log(`üéµ Loaded ${this.songs.length} songs from state`);
            
            // –í—ã–≤–æ–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const uniqueSheets = [...new Set(this.songs.map(s => s.sheet))];
            logger.log('üìÇ Available sheets (categories):', uniqueSheets);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–≤–æ–π –ø–µ—Å–Ω–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (this.songs.length > 0) {
                const firstSong = this.songs[0];
                logger.log('üéµ Sample song structure:', {
                    name: firstSong.name,
                    '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å': firstSong['–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'],
                    defaultKey: firstSong.defaultKey,
                    BPM: firstSong.BPM,
                    bpm: firstSong.bpm
                });
            }
            
        } catch (error) {
            logger.error('Error loading songs:', error);
            this.songs = [];
            this.filteredSongs = [];
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç—É —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: songId -> preferredKey
     */
    async loadUserRepertoireMap() {
        try {
            const repSongs = await getUserRepertoire();
            const map = {};
            repSongs.forEach(rs => {
                if (rs?.id && rs?.preferredKey) {
                    map[rs.id] = rs.preferredKey;
                }
            });
            this.repertoireKeyBySongId = map;
            logger.log(`üé§ Repertoire map size: ${Object.keys(map).length}`);
        } catch (e) {
            logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', e);
            this.repertoireKeyBySongId = {};
        }
    }
    
    /**
     * –í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    selectMainCategory(category) {
        this.selectedMainCategory = category;
        this.selectedSubCategory = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        const chips = this.overlay.querySelectorAll('.main-category');
        chips.forEach(chip => {
            chip.classList.toggle('active', chip.dataset.mainCategory === category);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const subFilters = this.overlay.querySelector('.sub-filters');
        if (category === 'fast' || category === 'worship') {
            subFilters.style.display = 'flex';
        } else {
            subFilters.style.display = 'none';
        }
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const subChips = this.overlay.querySelectorAll('.sub-category');
        subChips.forEach(chip => {
            chip.classList.remove('active');
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        this.persistFilterState();

        this.filterSongs();
    }
    
    /**
     * –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    selectSubCategory(subCategory) {
        // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é - —Å–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä
        if (this.selectedSubCategory === subCategory) {
            this.selectedSubCategory = null;
        } else {
            this.selectedSubCategory = subCategory;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        const chips = this.overlay.querySelectorAll('.sub-category');
        chips.forEach(chip => {
            chip.classList.toggle('active', chip.dataset.subCategory === this.selectedSubCategory);
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        this.persistFilterState();

        this.filterSongs();
    }
    
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–µ—Å–µ–Ω –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
     */
    filterSongs() {
        logger.log(`üéµ Filtering: main=${this.selectedMainCategory}, sub=${this.selectedSubCategory}`);
        
        if (this.selectedMainCategory === 'all') {
            this.filteredSongs = [...this.songs];
        } else {
            // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            const categoryMap = {
                'fast': {
                    'vertical': ['–ë—ã—Å—Ç—Ä—ã–µ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å)'],
                    'horizontal': ['–ë—ã—Å—Ç—Ä—ã–µ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å)']
                },
                'worship': {
                    'vertical': ['–ü–æ–∫–ª–æ–Ω–µ–Ω–∏–µ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å)'],
                    'horizontal': ['–ü–æ–∫–ª–æ–Ω–µ–Ω–∏–µ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å)']
                }
            };
            
            // –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ (null), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Å–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            let targetSheets;
            if (this.selectedSubCategory) {
                targetSheets = categoryMap[this.selectedMainCategory]?.[this.selectedSubCategory] || [];
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const allSubCategories = categoryMap[this.selectedMainCategory] || {};
                targetSheets = Object.values(allSubCategories).flat();
            }
            logger.log(`üéµ Target sheets: ${targetSheets.join(', ')}`);
            
            this.filteredSongs = this.songs.filter(song => {
                const matches = targetSheets.includes(song.sheet);
                if (matches) {
                    logger.log(`‚úÖ Song "${song.name}" matches filter`);
                }
                return matches;
            });
        }
        
        logger.log(`üéµ Filtered songs count: ${this.filteredSongs.length}`);
        this.renderSongs();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –º–µ—Ç–æ–∫ –¥–ª—è –ø–µ—Å–Ω–∏: { main, sub }
     */
    getSongCategoryLabels(song) {
        const labels = SHEET_TO_LABELS[song?.sheet];
        if (labels) return labels;
        return { main: '‚Äî', sub: '‚Äî' };
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–µ—Å–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    getSongSublineHTML(song) {
        const { main, sub } = this.getSongCategoryLabels(song);
        // –¢–ï–ú–ù–´–ô —Ñ–æ–Ω ‚Üí —Å–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç (—è–≤–Ω–æ –∑–∞–¥–∞–µ–º —Ü–≤–µ—Ç, –Ω–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)
        const colorStyle = 'color: var(--text-secondary, #9ca3af);';
        
        if (this.selectedMainCategory === 'all') {
            // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
            return `<div class="song-subline" style="${colorStyle}">${main} ‚Ä¢ ${sub}</div>`;
        }
        
        const isMainSelected = (this.selectedMainCategory === 'fast' || this.selectedMainCategory === 'worship');
        if (isMainSelected && !this.selectedSubCategory) {
            // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
            return `<div class="song-subline" style="${colorStyle}">${sub}</div>`;
        }
        
        // –ü—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        return '';
    }
    
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è UI —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    applyFilterStateToUI() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const mainChips = this.overlay.querySelectorAll('.main-category');
        mainChips.forEach(chip => {
            chip.classList.toggle('active', chip.dataset.mainCategory === this.selectedMainCategory);
        });

        // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const subFilters = this.overlay.querySelector('.sub-filters');
        if (this.selectedMainCategory === 'fast' || this.selectedMainCategory === 'worship') {
            subFilters.style.display = 'flex';
        } else {
            subFilters.style.display = 'none';
        }

        // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        const subChips = this.overlay.querySelectorAll('.sub-category');
        subChips.forEach(chip => {
            chip.classList.toggle('active', chip.dataset.subCategory === this.selectedSubCategory);
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –º–µ–∂–¥—É –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏ (localStorage)
     */
    persistFilterState() {
        try {
            localStorage.setItem('songsOverlay.mainCategory', this.selectedMainCategory || 'all');
            localStorage.setItem('songsOverlay.subCategory', this.selectedSubCategory || '');
        } catch (e) {
            logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–µ—Å–µ–Ω', e);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
     */
    loadPersistedFilterState() {
        try {
            const persistedMain = localStorage.getItem('songsOverlay.mainCategory');
            const persistedSub = localStorage.getItem('songsOverlay.subCategory');

            if (persistedMain && MAIN_CATEGORIES[persistedMain]) {
                this.selectedMainCategory = persistedMain;
            }
            // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (persistedSub && SUB_CATEGORIES[persistedSub]) {
                this.selectedSubCategory = persistedSub;
            } else {
                this.selectedSubCategory = null;
            }
        } catch (e) {
            logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–µ—Å–µ–Ω', e);
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω
     */
    renderSongs() {
        const songsList = this.overlay.querySelector('.songs-list');
        
        if (this.filteredSongs.length === 0) {
            songsList.innerHTML = `
                <div class="no-songs-message">
                    –ü–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </div>
            `;
            return;
        }
        
        songsList.innerHTML = this.filteredSongs.map(song => {
            const userKey = this.repertoireKeyBySongId[song.id];
            const bpmLabel = (song.BPM || song.bpm) ? `${song.BPM || song.bpm} BPM` : '‚Äî BPM';
            return `
                <div class="song-item" data-song-id="${song.id}">
                    <div class="song-info">
                        <span class="song-name">${song.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</span>
                        ${this.getSongSublineHTML(song)}
                    </div>
                    <div class="song-meta">
                        ${userKey ? `<span class="song-key">${userKey}</span>` : ''}
                        <span class="song-bpm">${bpmLabel}</span>
                    </div>
                </div>
            `;
        }).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –Ω–∞ –ø–µ—Å–Ω–∏
        const songItems = songsList.querySelectorAll('.song-item');
        songItems.forEach(item => {
            item.addEventListener('click', () => {
                const songId = item.dataset.songId;
                this.selectSong(songId);
            });
        });
    }
    
    /**
     * –í—ã–±–æ—Ä –ø–µ—Å–Ω–∏
     */
    selectSong(songId) {
        const song = this.songs.find(s => s.id === songId);
        if (song) {
            logger.log(`üéµ Selected song: ${song.name}`);
            this.close();
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–µ
            const userKey = this.repertoireKeyBySongId[song.id];
            if (userKey) {
                displaySongDetails(song, userKey);
            } else {
                displaySongDetails(song);
            }
        }
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–≤–µ—Ä–ª–µ—è
const songsOverlay = new SongsOverlay();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è
export function openSongsOverlay() {
    songsOverlay.open();
}

logger.log('üéµ Songs overlay module loaded');