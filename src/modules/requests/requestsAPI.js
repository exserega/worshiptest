// ====================================
// REQUESTS API MODULE
// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ñ–∏–ª–∏–∞–ª—ã
// ====================================

// Firebase –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (v8)
const getDb = () => {
    if (window.firebase && window.firebase.firestore) {
        return window.firebase.firestore();
    }
    console.error('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
    return null;
};

const getServerTimestamp = () => {
    if (window.firebase && window.firebase.firestore) {
        return window.firebase.firestore.FieldValue.serverTimestamp();
    }
    return new Date();
};

// –¢–∏–ø—ã –∑–∞—è–≤–æ–∫
export const REQUEST_TYPES = {
    BRANCH_TRANSFER: 'branch_transfer',    // –ü–µ—Ä–µ–≤–æ–¥ –≤ –¥—Ä—É–≥–æ–π —Ñ–∏–ª–∏–∞–ª
    BRANCH_JOIN: 'branch_join',           // –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ñ–∏–ª–∏–∞–ª
    BRANCH_CREATE: 'branch_create'        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
};

// –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫
export const REQUEST_STATUS = {
    PENDING: 'pending',     // –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
    APPROVED: 'approved',   // –û–¥–æ–±—Ä–µ–Ω–∞
    REJECTED: 'rejected'    // –û—Ç–∫–ª–æ–Ω–µ–Ω–∞
};

// ====================================
// –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–û–ö
// ====================================

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –≤ –¥—Ä—É–≥–æ–π —Ñ–∏–ª–∏–∞–ª
 */
export async function createTransferRequest(userId, fromBranchId, toBranchId, reason = '') {
    try {
        const requestData = {
            type: REQUEST_TYPES.BRANCH_TRANSFER,
            userId,
            fromBranchId,
            toBranchId,
            reason,
            status: REQUEST_STATUS.PENDING,
            createdAt: getServerTimestamp(),
            updatedAt: getServerTimestamp()
        };

        const docRef = await getDb().collection('requests').add(requestData);
        console.log('‚úÖ Transfer request created:', docRef.id);
        return { success: true, requestId: docRef.id };
    } catch (error) {
        console.error('Error creating transfer request:', error);
        return { success: false, error: error.message };
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ñ–∏–ª–∏–∞–ª
 */
export async function createJoinRequest(userId, branchId, userData = {}) {
    try {
        console.log('üìù [createJoinRequest] Starting...', { userId, branchId, userData });
        
        const db = getDb();
        if (!db) {
            throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        const requestData = {
            type: REQUEST_TYPES.BRANCH_JOIN,
            userId,
            branchId,
            userData: {
                name: userData.name || '',
                email: userData.email || '',
                phone: userData.phone || ''
            },
            status: REQUEST_STATUS.PENDING,
            createdAt: getServerTimestamp(),
            updatedAt: getServerTimestamp()
        };
        
        console.log('üìù [createJoinRequest] Request data:', requestData);

        const docRef = await getDb().collection('requests').add(requestData);
        console.log('‚úÖ Join request created:', docRef.id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
        const createdDoc = await docRef.get();
        if (!createdDoc.exists) {
            throw new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }
        
        console.log('‚úÖ Join request verified:', createdDoc.data());
        
        return { success: true, requestId: docRef.id };
    } catch (error) {
        console.error('‚ùå Error creating join request:', error);
        console.error('‚ùå Error details:', {
            message: error.message,
            code: error.code,
            stack: error.stack
        });
        return { success: false, error: error.message };
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
 */
export async function createBranchRequest(userId, branchData) {
    try {
        const requestData = {
            type: REQUEST_TYPES.BRANCH_CREATE,
            userId,
            branchData: {
                name: branchData.name,
                city: branchData.city,
                address: branchData.address || '',
                contactPhone: branchData.contactPhone || '',
                contactSocial: branchData.contactSocial || ''
            },
            status: REQUEST_STATUS.PENDING,
            createdAt: getServerTimestamp(),
            updatedAt: getServerTimestamp()
        };

        const docRef = await getDb().collection('requests').add(requestData);
        console.log('‚úÖ Branch creation request created:', docRef.id);
        return { success: true, requestId: docRef.id };
    } catch (error) {
        console.error('Error creating branch request:', error);
        return { success: false, error: error.message };
    }
}

// ====================================
// –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–Ø–í–û–ö
// ====================================

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserRequests(userId) {
    try {
        const querySnapshot = await getDb().collection('requests')
            .where('userId', '==', userId)
            .orderBy('createdAt', 'desc')
            .get();
        
        const requests = [];
        querySnapshot.forEach((doc) => {
            requests.push({
                id: doc.id,
                ...doc.data()
            });
        });
        
        return { success: true, requests };
    } catch (error) {
        console.error('Error getting user requests:', error);
        return { success: false, error: error.message };
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function getRequestsByType(type, status = null) {
    try {
        let query = getDb().collection('requests')
            .where('type', '==', type);
        
        if (status) {
            query = query.where('status', '==', status);
        }
        
        query = query.orderBy('createdAt', 'desc');
        
        const querySnapshot = await query.get();
        const requests = [];
        
        querySnapshot.forEach((doc) => {
            requests.push({
                id: doc.id,
                ...doc.data()
            });
        });
        
        return { success: true, requests };
    } catch (error) {
        console.error('Error getting requests by type:', error);
        return { success: false, error: error.message };
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
 */
export async function getActiveUserRequest(userId, type) {
    try {
        const querySnapshot = await getDb().collection('requests')
            .where('userId', '==', userId)
            .where('type', '==', type)
            .where('status', '==', REQUEST_STATUS.PENDING)
            .limit(1)
            .get();
        
        if (!querySnapshot.empty) {
            const doc = querySnapshot.docs[0];
            return {
                success: true,
                hasActiveRequest: true,
                request: {
                    id: doc.id,
                    ...doc.data()
                }
            };
        }
        
        return { success: true, hasActiveRequest: false };
    } catch (error) {
        console.error('Error checking active request:', error);
        return { success: false, error: error.message };
    }
}

// ====================================
// –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–Ø–í–û–ö (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
// ====================================

/**
 * –û–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É
 */
export async function approveRequest(requestId, adminId, additionalData = {}) {
    try {
        const updateData = {
            status: REQUEST_STATUS.APPROVED,
            approvedBy: adminId,
            approvedAt: getServerTimestamp(),
            updatedAt: getServerTimestamp(),
            ...additionalData
        };

        await getDb().collection('requests').doc(requestId).update(updateData);
        console.log('‚úÖ Request approved:', requestId);
        return { success: true };
    } catch (error) {
        console.error('Error approving request:', error);
        return { success: false, error: error.message };
    }
}

/**
 * –û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É
 */
export async function rejectRequest(requestId, adminId, reason = '') {
    try {
        const updateData = {
            status: REQUEST_STATUS.REJECTED,
            rejectedBy: adminId,
            rejectedAt: getServerTimestamp(),
            rejectionReason: reason,
            updatedAt: getServerTimestamp()
        };

        await getDb().collection('requests').doc(requestId).update(updateData);
        console.log('‚úÖ Request rejected:', requestId);
        return { success: true };
    } catch (error) {
        console.error('Error rejecting request:', error);
        return { success: false, error: error.message };
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∑–∞—è–≤–∫—É
 */
export async function deleteRequest(requestId) {
    try {
        await getDb().collection('requests').doc(requestId).delete();
        console.log('‚úÖ Request deleted:', requestId);
        return { success: true };
    } catch (error) {
        console.error('Error deleting request:', error);
        return { success: false, error: error.message };
    }
}

// ====================================
// –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –û–ë–†–ê–ë–û–¢–ö–ò
// ====================================

/**
 * –û–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ñ–∏–ª–∏–∞–ª
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ active
 */
export async function approveJoinRequest(requestId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        const requestDoc = await getDb().collection('requests').doc(requestId).get();
        if (!requestDoc.exists) {
            throw new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        const requestData = requestDoc.data();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await getDb().collection('users').doc(requestData.userId).update({
            status: 'active',
            updatedAt: getServerTimestamp()
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        await getDb().collection('requests').doc(requestId).update({
            status: REQUEST_STATUS.APPROVED,
            approvedAt: getServerTimestamp(),
            updatedAt: getServerTimestamp()
        });
        
        console.log('‚úÖ Join request approved:', requestId);
        return { success: true };
    } catch (error) {
        console.error('Error approving join request:', error);
        return { success: false, error: error.message };
    }
}

/**
 * –û–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª –∏ –¥–µ–ª–∞–µ—Ç –∑–∞—è–≤–∏—Ç–µ–ª—è –µ–≥–æ –∞–¥–º–∏–Ω–æ–º
 */
export async function approveBranchRequest(requestId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        const requestDoc = await getDb().collection('requests').doc(requestId).get();
        if (!requestDoc.exists) {
            throw new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        const requestData = requestDoc.data();
        const branchData = requestData.branchData;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª
        const newBranch = {
            name: branchData.name,
            city: branchData.city,
            address: branchData.address || '',
            contactPhone: branchData.contactPhone || '',
            contactSocial: branchData.contactSocial || '',
            createdBy: requestData.userId,
            createdAt: getServerTimestamp(),
            updatedAt: getServerTimestamp()
        };
        
        const branchRef = await getDb().collection('branches').add(newBranch);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ–≥–æ –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª
        await getDb().collection('users').doc(requestData.userId).update({
            branchId: branchRef.id,
            status: 'active',
            updatedAt: getServerTimestamp()
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        await getDb().collection('requests').doc(requestId).update({
            status: REQUEST_STATUS.APPROVED,
            approvedAt: getServerTimestamp(),
            createdBranchId: branchRef.id,
            updatedAt: getServerTimestamp()
        });
        
        console.log('‚úÖ Branch request approved, new branch created:', branchRef.id);
        return { success: true, branchId: branchRef.id };
    } catch (error) {
        console.error('Error approving branch request:', error);
        return { success: false, error: error.message };
    }
}