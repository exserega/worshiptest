/**
 * @fileoverview –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è
 * @module ParticipantsSelector
 */

import logger from '../../utils/logger.js';

/**
 * –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
 */
const INSTRUMENTS = [
    { id: 'vocals', name: '–í–æ–∫–∞–ª', icon: 'üé§' },
    { id: 'electric_guitar', name: '–≠–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä–∞', icon: 'üé∏' },
    { id: 'acoustic_guitar', name: '–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞', icon: 'üé∏' },
    { id: 'bass', name: '–ë–∞—Å-–≥–∏—Ç–∞—Ä–∞', icon: 'üé∏' },
    { id: 'keys', name: '–ö–ª–∞–≤–∏—à–∏', icon: 'üéπ' },
    { id: 'drums', name: '–ë–∞—Ä–∞–±–∞–Ω—ã', icon: 'ü•Å' },
    { id: 'other', name: '–î—Ä—É–≥–æ–µ', icon: 'üéµ' }
];

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
export class ParticipantsSelector {
    constructor(container, users) {
        this.container = container;
        this.users = users; // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ñ–∏–ª–∏–∞–ª–∞
        this.participants = [];
        this.onChange = null; // Callback –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    init() {
        this.render();
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    render() {
        const html = `
            <div class="participants-selector">
                <h3 class="participants-title">–£—á–∞—Å—Ç–Ω–∏–∫–∏</h3>
                <div class="instruments-list">
                    ${INSTRUMENTS.map(instrument => this.renderInstrument(instrument)).join('')}
                </div>
                <button type="button" class="add-instrument-btn">
                    <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                </button>
            </div>
        `;
        
        this.container.innerHTML = html;
        this.attachEventHandlers();
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–ª–æ–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    renderInstrument(instrument) {
        const participantsForInstrument = this.participants.filter(p => p.instrument === instrument.id);
        
        return `
            <div class="instrument-block" data-instrument="${instrument.id}">
                <div class="instrument-header">
                    <span class="instrument-icon">${instrument.icon}</span>
                    <span class="instrument-name">${instrument.name}:</span>
                </div>
                <div class="instrument-participants">
                    ${participantsForInstrument.map(p => `
                        <div class="participant-chip" data-user-id="${p.userId}">
                            <span>${p.userName}</span>
                            <button type="button" class="remove-participant" data-user-id="${p.userId}" data-instrument="${instrument.id}">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    `).join('')}
                    <button type="button" class="add-participant-btn" data-instrument="${instrument.id}">
                        <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventHandlers() {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const addButtons = this.container.querySelectorAll('.add-participant-btn');
        addButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const instrumentId = btn.dataset.instrument;
                this.showUserSelector(instrumentId);
            });
        });
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const removeButtons = this.container.querySelectorAll('.remove-participant');
        removeButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const userId = btn.dataset.userId;
                const instrumentId = btn.dataset.instrument;
                this.removeParticipant(userId, instrumentId);
            });
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    showUserSelector(instrumentId) {
        const instrument = INSTRUMENTS.find(i => i.id === instrumentId);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π dropdown
        const dropdown = document.createElement('div');
        dropdown.className = 'user-selector-dropdown';
        dropdown.innerHTML = `
            <div class="user-selector-header">
                –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è ${instrument.name}
            </div>
            <div class="user-selector-list">
                ${this.users.map(user => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
                    const isAdded = this.participants.some(p => 
                        p.userId === user.id && p.instrument === instrumentId
                    );
                    
                    return `
                        <div class="user-selector-item ${isAdded ? 'disabled' : ''}" 
                             data-user-id="${user.id}"
                             data-instrument="${instrumentId}">
                            ${user.name || user.displayName || user.email}
                            ${isAdded ? '<span class="added-label">–î–æ–±–∞–≤–ª–µ–Ω</span>' : ''}
                        </div>
                    `;
                }).join('')}
            </div>
            <button type="button" class="close-dropdown">–ó–∞–∫—Ä—ã—Ç—å</button>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(dropdown);
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π
        const btn = this.container.querySelector(`[data-instrument="${instrumentId}"].add-participant-btn`);
        const rect = btn.getBoundingClientRect();
        dropdown.style.position = 'fixed';
        dropdown.style.top = `${rect.bottom + 5}px`;
        dropdown.style.left = `${rect.left}px`;
        dropdown.style.zIndex = '10000';
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dropdown.addEventListener('click', (e) => {
            if (e.target.classList.contains('user-selector-item') && !e.target.classList.contains('disabled')) {
                const userId = e.target.dataset.userId;
                const user = this.users.find(u => u.id === userId);
                
                this.addParticipant({
                    userId: user.id,
                    userName: user.name || user.displayName || user.email,
                    instrument: instrumentId,
                    instrumentName: instrument.name
                });
                
                document.body.removeChild(dropdown);
            }
            
            if (e.target.classList.contains('close-dropdown')) {
                document.body.removeChild(dropdown);
            }
        });
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
     */
    addParticipant(participant) {
        this.participants.push(participant);
        this.render();
        
        if (this.onChange) {
            this.onChange(this.participants);
        }
    }
    
    /**
     * –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
     */
    removeParticipant(userId, instrumentId) {
        this.participants = this.participants.filter(p => 
            !(p.userId === userId && p.instrument === instrumentId)
        );
        this.render();
        
        if (this.onChange) {
            this.onChange(this.participants);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    getParticipants() {
        return this.participants;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    setParticipants(participants) {
        this.participants = participants || [];
        this.render();
    }
}