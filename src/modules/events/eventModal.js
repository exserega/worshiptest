/**
 * @fileoverview –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
 * @module EventModal
 */

import logger from '../../utils/logger.js';
import { createEvent, updateEvent } from './eventsApi.js';
import { getCurrentUser } from '../auth/authCheck.js';
import { db } from '../../utils/firebase-v8-adapter.js';

let modalInstance = null;

/**
 * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–±—ã—Ç–∏—è
 * @param {Object} options - –û–ø—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 * @param {Date} options.date - –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞
 * @param {Object} options.event - –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {Function} options.onSave - –ö–æ–ª–ª–±–µ–∫ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
export function openEventModal(options = {}) {
    const { date = new Date(), event = null, onSave } = options;
    
    logger.log('üìù –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–±—ã—Ç–∏—è:', { date, event });
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    if (!modalInstance) {
        modalInstance = new EventModal();
    }
    
    modalInstance.open({ date, event, onSave });
}

class EventModal {
    constructor() {
        this.modal = null;
        this.form = null;
        this.participantsList = [];
        this.selectedParticipants = [];
        this.onSave = null;
    }
    
    open({ date, event, onSave }) {
        this.event = event;
        this.onSave = onSave;
        this.createModal();
        this.populateForm(date, event);
        this.attachEventListeners();
        this.showModal();
    }
    
    createModal() {
        const modalHTML = `
            <div class="modal" id="eventModal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>${this.event ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ' : '–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ'}</h2>
                        <button class="close-modal" onclick="window.eventModal.close()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <form id="eventForm" class="modal-body">
                        <div class="form-group">
                            <label for="eventName">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</label>
                            <input type="text" id="eventName" class="form-control" required>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="eventDate">–î–∞—Ç–∞</label>
                                <input type="date" id="eventDate" class="form-control" required>
                            </div>
                            
                            <div class="form-group">
                                <label for="eventTime">–í—Ä–µ–º—è</label>
                                <input type="time" id="eventTime" class="form-control" required>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="eventComment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                            <textarea id="eventComment" class="form-control" rows="3"></textarea>
                        </div>
                        
                        <div class="form-group">
                            <label>–£—á–∞—Å—Ç–Ω–∏–∫–∏</label>
                            <div class="participants-section">
                                <div class="participant-search">
                                    <input type="text" id="participantSearch" class="form-control" 
                                           placeholder="–ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...">
                                </div>
                                <div id="participantsList" class="participants-list"></div>
                            </div>
                        </div>
                        
                        <div class="form-actions">
                            <button type="button" class="btn btn-secondary" onclick="window.eventModal.close()">
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button type="submit" class="btn btn-primary">
                                ${this.event ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        this.modal = document.getElementById('eventModal');
        this.form = document.getElementById('eventForm');
        
        // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è onclick
        window.eventModal = this;
    }
    
    populateForm(date, event) {
        const user = getCurrentUser();
        
        if (event) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            document.getElementById('eventName').value = event.name || '';
            document.getElementById('eventComment').value = event.comment || '';
            
            if (event.date) {
                const eventDate = event.date.toDate ? event.date.toDate() : new Date(event.date);
                document.getElementById('eventDate').value = eventDate.toISOString().split('T')[0];
                document.getElementById('eventTime').value = eventDate.toTimeString().slice(0, 5);
            }
            
            this.selectedParticipants = event.participants || [];
        } else {
            // –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            document.getElementById('eventDate').value = date.toISOString().split('T')[0];
            document.getElementById('eventTime').value = '19:00'; // –í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.selectedParticipants = [{
                userId: user.uid,
                userName: user.displayName || user.email,
                instrument: '',
                instrumentName: ''
            }];
        }
        
        this.renderParticipants();
    }
    
    attachEventListeners() {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        this.form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleSave();
        });
        
        // –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const searchInput = document.getElementById('participantSearch');
        let searchTimeout;
        
        searchInput.addEventListener('input', (e) => {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                this.searchParticipants(e.target.value);
            }, 300);
        });
    }
    
    async searchParticipants(query) {
        if (query.length < 2) {
            this.participantsList = [];
            return;
        }
        
        try {
            const user = getCurrentUser();
            if (!user || !user.branchId) {
                logger.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —Ñ–∏–ª–∏–∞–ª');
                return;
            }
            
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–æ–º –∂–µ —Ñ–∏–ª–∏–∞–ª–µ
            const usersRef = db.collection('users');
            const snapshot = await usersRef
                .where('branchId', '==', user.branchId)
                .where('status', '==', 'active')
                .get();
            
            const users = [];
            snapshot.forEach(doc => {
                const userData = doc.data();
                const name = userData.name || userData.displayName || userData.email || '';
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É
                if (name.toLowerCase().includes(query.toLowerCase())) {
                    users.push({
                        id: doc.id,
                        name: name,
                        email: userData.email
                    });
                }
            });
            
            this.participantsList = users;
            this.renderSearchResults();
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
        }
    }
    
    renderSearchResults() {
        const container = document.getElementById('participantsList');
        
        if (this.participantsList.length === 0) {
            container.innerHTML = '<div class="no-results">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        container.innerHTML = this.participantsList.map(user => `
            <div class="participant-item" onclick="window.eventModal.addParticipant('${user.id}')">
                <span>${user.name || user.email}</span>
                <button type="button" class="btn-add">+</button>
            </div>
        `).join('');
    }
    
    addParticipant(userId) {
        const user = this.participantsList.find(u => u.id === userId);
        if (!user) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        if (this.selectedParticipants.find(p => p.userId === userId)) {
            alert('–£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω');
            return;
        }
        
        this.selectedParticipants.push({
            userId: user.id,
            userName: user.name || user.email,
            instrument: '',
            instrumentName: ''
        });
        
        this.renderParticipants();
        document.getElementById('participantSearch').value = '';
        document.getElementById('participantsList').innerHTML = '';
    }
    
    renderParticipants() {
        const container = document.createElement('div');
        container.className = 'selected-participants';
        
        container.innerHTML = `
            <h4>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:</h4>
            ${this.selectedParticipants.map((p, index) => `
                <div class="selected-participant">
                    <span>${p.userName}</span>
                    <select onchange="window.eventModal.updateInstrument(${index}, this.value)">
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</option>
                        <option value="vocals" ${p.instrument === 'vocals' ? 'selected' : ''}>–í–æ–∫–∞–ª</option>
                        <option value="guitar" ${p.instrument === 'guitar' ? 'selected' : ''}>–ì–∏—Ç–∞—Ä–∞</option>
                        <option value="bass" ${p.instrument === 'bass' ? 'selected' : ''}>–ë–∞—Å-–≥–∏—Ç–∞—Ä–∞</option>
                        <option value="keys" ${p.instrument === 'keys' ? 'selected' : ''}>–ö–ª–∞–≤–∏—à–∏</option>
                        <option value="drums" ${p.instrument === 'drums' ? 'selected' : ''}>–ë–∞—Ä–∞–±–∞–Ω—ã</option>
                        <option value="sound" ${p.instrument === 'sound' ? 'selected' : ''}>–ó–≤—É–∫–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä</option>
                    </select>
                    <button type="button" onclick="window.eventModal.removeParticipant(${index})">√ó</button>
                </div>
            `).join('')}
        `;
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
        const searchSection = document.querySelector('.participant-search');
        searchSection.parentNode.insertBefore(container, searchSection);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldList = document.querySelector('.selected-participants');
        if (oldList && oldList !== container) {
            oldList.remove();
        }
    }
    
    updateInstrument(index, instrument) {
        const instrumentNames = {
            'vocals': '–í–æ–∫–∞–ª',
            'guitar': '–ì–∏—Ç–∞—Ä–∞',
            'bass': '–ë–∞—Å-–≥–∏—Ç–∞—Ä–∞',
            'keys': '–ö–ª–∞–≤–∏—à–∏',
            'drums': '–ë–∞—Ä–∞–±–∞–Ω—ã',
            'sound': '–ó–≤—É–∫–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä'
        };
        
        this.selectedParticipants[index].instrument = instrument;
        this.selectedParticipants[index].instrumentName = instrumentNames[instrument] || '';
    }
    
    removeParticipant(index) {
        this.selectedParticipants.splice(index, 1);
        this.renderParticipants();
    }
    
    async handleSave() {
        const user = getCurrentUser();
        
        const eventData = {
            name: document.getElementById('eventName').value,
            date: new Date(`${document.getElementById('eventDate').value}T${document.getElementById('eventTime').value}`),
            comment: document.getElementById('eventComment').value,
            participants: this.selectedParticipants,
            participantCount: this.selectedParticipants.length,
            branchId: user.branchId,
            leaderId: user.uid,
            leaderName: user.displayName || user.email
        };
        
        try {
            if (this.event) {
                await updateEvent(this.event.id, eventData);
                logger.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
            } else {
                await createEvent(eventData);
                logger.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
            }
            
            this.close();
            
            if (this.onSave) {
                this.onSave(eventData);
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ' + error.message);
        }
    }
    
    showModal() {
        this.modal.style.display = 'block';
        document.body.style.overflow = 'hidden';
    }
    
    close() {
        if (this.modal) {
            this.modal.remove();
            this.modal = null;
        }
        document.body.style.overflow = '';
        window.eventModal = null;
    }
}

export default EventModal;