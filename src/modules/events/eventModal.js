/**
 * @fileoverview –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
 * @module EventModal
 */

import logger from '../../utils/logger.js';
import { createEvent, updateEvent } from './eventsApi.js';
import { getCurrentUser } from '../auth/authCheck.js';
import { ParticipantsSelector } from './participantsSelector.js';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º —Å–æ–±—ã—Ç–∏–π
 */
export class EventModal {
    constructor() {
        this.modal = null;
        this.isOpen = false;
        this.mode = 'create'; // create –∏–ª–∏ edit
        this.currentEventId = null;
        this.onSave = null; // Callback –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.participantsSelector = null;
        this.branchUsers = [];
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    init() {
        this.createModalHTML();
        this.attachEventListeners();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    createModalHTML() {
        const modalHTML = `
            <div id="event-modal" class="modal-overlay event-modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="modal-title">–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ</h2>
                        <button class="modal-close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <form id="event-form" class="event-form">
                        <div class="form-group">
                            <label for="event-name">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è *</label>
                            <input 
                                type="text" 
                                id="event-name" 
                                name="name" 
                                required 
                                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–æ—Å–∫—Ä–µ—Å–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ"
                                class="form-input"
                            >
                        </div>
                        
                        <div class="form-group">
                            <label for="event-date">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è *</label>
                            <input 
                                type="datetime-local" 
                                id="event-date" 
                                name="date" 
                                required 
                                class="form-input"
                            >
                        </div>
                        
                        <div class="form-group">
                            <label for="event-setlist">–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω *</label>
                            <select 
                                id="event-setlist" 
                                name="setlistId" 
                                required 
                                class="form-select"
                            >
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç–ª–∏—Å—Ç</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="event-leader">–û—Å–Ω–æ–≤–Ω–æ–π –ª–∏–¥–µ—Ä</label>
                            <select 
                                id="event-leader" 
                                name="leaderId" 
                                class="form-select"
                            >
                                <option value="">–ù–µ —É–∫–∞–∑–∞–Ω</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="event-comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                            <textarea 
                                id="event-comment" 
                                name="comment" 
                                rows="3" 
                                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏"
                                class="form-textarea"
                            ></textarea>
                        </div>
                        
                        <div id="participants-container"></div>
                        
                        <div class="form-actions">
                            <button type="submit" class="btn-primary">
                                –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
                            </button>
                            <button type="button" class="btn-secondary cancel-btn">
                                –û—Ç–º–µ–Ω–∞
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        this.modal = document.getElementById('event-modal');
        this.form = document.getElementById('event-form');
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeBtn = this.modal.querySelector('.modal-close');
        const cancelBtn = this.modal.querySelector('.cancel-btn');
        
        closeBtn.addEventListener('click', () => this.close());
        cancelBtn.addEventListener('click', () => this.close());
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        this.modal.addEventListener('click', (e) => {
            if (e.target === this.modal) {
                this.close();
            }
        });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        this.form.addEventListener('submit', (e) => this.handleSubmit(e));
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–∏–¥–µ—Ä–∞
     */
    async loadBranchUsers() {
        try {
            const currentUser = getCurrentUser();
            console.log('üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞:', currentUser?.branchId);
            if (!currentUser?.branchId) return;
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ñ–∏–ª–∏–∞–ª–∞
            const { getBranchUsers } = await import('../../api/index.js');
            const users = await getBranchUsers(currentUser.branchId);
            console.log('üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const activeUsers = users.filter(user => user.status === 'active');
            console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', activeUsers.length);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            this.branchUsers = activeUsers;
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º select
            const select = this.modal.querySelector('#event-leader');
            select.innerHTML = '<option value="">–ù–µ —É–∫–∞–∑–∞–Ω</option>';
            
            activeUsers.forEach(user => {
                const option = document.createElement('option');
                option.value = user.id;
                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: name -> displayName -> email
                const userName = user.name || user.displayName || user.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                option.textContent = userName;
                select.appendChild(option);
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            this.initParticipantsSelector();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ñ–∏–ª–∏–∞–ª–∞:', error);
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ñ–∏–ª–∏–∞–ª–∞:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç–ª–∏—Å—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
     */
    async loadSetlists() {
        try {
            const currentUser = getCurrentUser();
            if (!currentUser?.branchId) return;
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç–ª–∏—Å—Ç—ã —Ñ–∏–ª–∏–∞–ª–∞
            const { getSetlistsByBranch } = await import('../../api/index.js');
            const setlists = await getSetlistsByBranch(currentUser.branchId);
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º select
            const select = this.modal.querySelector('#event-setlist');
            select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç–ª–∏—Å—Ç</option>';
            
            setlists.forEach(setlist => {
                const option = document.createElement('option');
                option.value = setlist.id;
                option.textContent = setlist.name;
                select.appendChild(option);
            });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–ª–∏—Å—Ç–æ–≤:', error);
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    initParticipantsSelector() {
        const container = this.modal.querySelector('#participants-container');
        if (!container) return;
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
        if (!this.participantsSelector) {
            this.participantsSelector = new ParticipantsSelector(container, this.branchUsers);
            
            // Callback –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            this.participantsSelector.onChange = (participants) => {
                console.log('üìù –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã:', participants);
            };
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
     */
    async handleSubmit(e) {
        e.preventDefault();
        
        const formData = new FormData(this.form);
        const eventData = {
            name: formData.get('name'),
            date: new Date(formData.get('date')),
            setlistId: formData.get('setlistId'),
            leaderId: formData.get('leaderId') || null,
            comment: formData.get('comment') || '',
            branchId: getCurrentUser().branchId,
            participants: this.participantsSelector ? this.participantsSelector.getParticipants() : []
        };
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const submitBtn = this.form.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
            
            let eventId;
            if (this.mode === 'create') {
                eventId = await createEvent(eventData);
                console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', eventId);
            } else {
                await updateEvent(this.currentEventId, eventData);
                eventId = this.currentEventId;
                console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', eventId);
            }
            
            // –í—ã–∑—ã–≤–∞–µ–º callback
            if (this.onSave) {
                this.onSave(eventId);
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.close();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: ' + error.message);
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            const submitBtn = this.form.querySelector('button[type="submit"]');
            submitBtn.disabled = false;
            submitBtn.textContent = this.mode === 'create' ? '–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
     */
    openForCreate(callback) {
        this.mode = 'create';
        this.currentEventId = null;
        this.onSave = callback;
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        this.form.reset();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        const now = new Date();
        const dateInput = this.modal.querySelector('#event-date');
        dateInput.value = now.toISOString().slice(0, 16);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫—É
        this.modal.querySelector('.modal-title').textContent = '–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ';
        this.form.querySelector('button[type="submit"]').textContent = '–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ç–ª–∏—Å—Ç—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.loadSetlists();
        this.loadBranchUsers();
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.open();
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    open() {
        this.modal.classList.add('visible');
        this.isOpen = true;
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
        setTimeout(() => {
            this.modal.querySelector('#event-name').focus();
        }, 100);
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    close() {
        this.modal.classList.remove('visible');
        this.isOpen = false;
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
let eventModalInstance = null;

export function getEventModal() {
    if (!eventModalInstance) {
        eventModalInstance = new EventModal();
    }
    return eventModalInstance;
}