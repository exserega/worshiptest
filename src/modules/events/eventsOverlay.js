/**
 * @fileoverview –û–≤–µ—Ä–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ñ–∏–ª–∏–∞–ª–∞
 * @module EventsOverlay
 */

import logger from '../../utils/logger.js';
import { getEventsByBranch, deleteEvent } from './eventsApi.js';
import { EventsList } from './eventsList.js';
import { getCurrentUser } from '../auth/authCheck.js';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–≤–µ—Ä–ª–µ–µ–º —Å–æ–±—ã—Ç–∏–π
 */
class EventsOverlay {
    constructor() {
        this.overlay = null;
        this.isOpen = false;
        this.events = [];
        this.eventsList = null;
        this.currentBranchId = null;
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–≤–µ—Ä–ª–µ—è
     */
    init() {
        console.log('üéØ EventsOverlay: –Ω–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
        logger.log('üéØ EventsOverlay: –Ω–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        this.createOverlayHTML();
        this.attachEventListeners();
        console.log('‚úÖ EventsOverlay –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
        logger.log('‚úÖ EventsOverlay –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–≤–µ—Ä–ª–µ—è
     */
    createOverlayHTML() {
        const overlayHTML = `
            <div id="events-overlay" class="songs-overlay">
                <div class="songs-overlay-backdrop"></div>
                <div class="songs-overlay-content">
                    <!-- –®–∞–ø–∫–∞ -->
                    <div class="songs-overlay-header">
                        <h2 class="songs-overlay-title">–°–æ–±—ã—Ç–∏—è —Ñ–∏–ª–∏–∞–ª–∞</h2>
                        <button class="songs-overlay-close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">
                            <span class="close-icon"></span>
                        </button>
                    </div>
                    
                    <!-- –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–±—ã—Ç–∏–π -->
                    <div class="events-content">
                        <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π -->
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', overlayHTML);
        this.overlay = document.getElementById('events-overlay');
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è
        const closeBtn = this.overlay.querySelector('.songs-overlay-close');
        const backdrop = this.overlay.querySelector('.songs-overlay-backdrop');
        
        closeBtn.addEventListener('click', () => this.close());
        backdrop.addEventListener('click', () => this.close());
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        this.escapeHandler = (e) => {
            if (e.key === 'Escape' && this.isOpen) {
                this.close();
            }
        };
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
     */
    async loadEvents() {
        console.log('üîÑ loadEvents: –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π'); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentUser = getCurrentUser();
            console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
            
            if (!currentUser) {
                console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
                logger.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                this.showEmptyState('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                return;
            }
            
            if (!currentUser.branchId) {
                console.warn('‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª–∏–∞–ª'); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
                logger.warn('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª–∏–∞–ª');
                this.showEmptyState('–§–∏–ª–∏–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
                return;
            }
            
            this.currentBranchId = currentUser.branchId;
            console.log(`üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞: ${this.currentBranchId}`); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
            logger.log(`–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞: ${this.currentBranchId}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const contentEl = this.overlay.querySelector('.events-content');
            contentEl.innerHTML = '<div class="loading-indicator">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...</div>';
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            console.log('üîç –í—ã–∑—ã–≤–∞–µ–º getEventsByBranch...'); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
            const events = await getEventsByBranch(this.currentBranchId);
            console.log('üìä –°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', events); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            const currentUser = getCurrentUser();
            this.events = events.map(event => ({
                ...event,
                canEdit: event.createdBy === currentUser.uid || currentUser.role === 'admin'
            }));
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
            if (!this.eventsList) {
                this.eventsList = new EventsList(contentEl);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                this.eventsList.onEventClick = (eventId) => {
                    this.handleEventClick(eventId);
                };
                
                this.eventsList.onEventEdit = (eventId) => {
                    this.handleEventEdit(eventId);
                };
                
                this.eventsList.onCreateEvent = () => {
                    console.log('üîî EventsList.onCreateEvent –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ eventsOverlay');
                    this.handleCreateEvent();
                };
                
                this.eventsList.onEventDelete = (eventId, eventName) => {
                    console.log('üóëÔ∏è EventsList.onEventDelete –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ eventsOverlay');
                    this.handleEventDelete(eventId, eventName);
                };
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            this.eventsList.setEvents(this.events);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
            this.showEmptyState('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π');
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     */
    showEmptyState(message) {
        const contentEl = this.overlay.querySelector('.events-content');
        contentEl.innerHTML = `
            <div class="empty-events">
                <p>${message}</p>
            </div>
        `;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—é
     * @param {string} eventId - ID —Å–æ–±—ã—Ç–∏—è
     */
    handleEventClick(eventId) {
        logger.log(`–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è: ${eventId}`);
        // TODO: –û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
        alert('–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ');
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
     */
    async handleCreateEvent() {
        console.log('üÜï –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è');
        
        try {
            const { getEventModal } = await import('./eventModal.js');
            const modal = getEventModal();
            
            modal.openForCreate(async (eventId) => {
                console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫');
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                await this.loadEvents();
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è');
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
     * @param {string} eventId - ID —Å–æ–±—ã—Ç–∏—è
     * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     */
    async handleEventDelete(eventId, eventName) {
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', eventId, eventName);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        const confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ "${eventName}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;
        if (!confirm(confirmMessage)) {
            return;
        }
        
        try {
            // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            await deleteEvent(eventId);
            console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
            await this.loadEvents();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: ' + error.message);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
     * @param {string} eventId - ID —Å–æ–±—ã—Ç–∏—è
     */
    handleEventEdit(eventId) {
        logger.log(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: ${eventId}`);
        // TODO: –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è
        alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ');
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è
     */
    open() {
        console.log('üìÇ EventsOverlay: –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ open()'); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
        logger.log('üìÇ EventsOverlay: –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ open()');
        
        if (!this.overlay) {
            console.error('‚ùå EventsOverlay: overlay —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!'); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
            logger.error('‚ùå EventsOverlay: overlay —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        this.overlay.classList.add('visible');
        this.isOpen = true;
        document.addEventListener('keydown', this.escapeHandler);
        console.log('‚úÖ EventsOverlay –æ—Ç–∫—Ä—ã—Ç'); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
        logger.log('‚úÖ EventsOverlay –æ—Ç–∫—Ä—ã—Ç');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        this.loadEvents();
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è
     */
    close() {
        if (!this.overlay) return;
        
        this.overlay.classList.remove('visible');
        this.isOpen = false;
        document.removeEventListener('keydown', this.escapeHandler);
        logger.log('EventsOverlay –∑–∞–∫—Ä—ã—Ç');
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
let eventsOverlayInstance = null;

export function initEventsOverlay() {
    if (!eventsOverlayInstance) {
        eventsOverlayInstance = new EventsOverlay();
    }
    return eventsOverlayInstance;
}

export function openEventsOverlay() {
    console.log('üöÄ openEventsOverlay –≤—ã–∑–≤–∞–Ω–∞'); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.log('üöÄ openEventsOverlay –≤—ã–∑–≤–∞–Ω–∞');
    
    if (!eventsOverlayInstance) {
        console.log('üì¶ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä EventsOverlay'); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
        logger.log('üì¶ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä EventsOverlay');
        initEventsOverlay();
    }
    
    console.log('üìû –í—ã–∑—ã–≤–∞–µ–º open() –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ:', eventsOverlayInstance); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
    eventsOverlayInstance.open();
}

export function closeEventsOverlay() {
    if (eventsOverlayInstance) {
        eventsOverlayInstance.close();
    }
}