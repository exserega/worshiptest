/**
 * @fileoverview –ú–æ–¥—É–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
 * @module CalendarView
 */

import logger from '../../utils/logger.js';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è
 */
export class CalendarView {
    constructor(container) {
        this.container = container;
        this.currentDate = new Date();
        this.events = [];
        this.onDayClick = null; // Callback –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—é
        
        logger.log('üìÖ CalendarView –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
     */
    setMonth(date) {
        this.currentDate = new Date(date);
        this.render();
    }
    
    /**
     * –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
     */
    previousMonth() {
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
        this.render();
    }
    
    /**
     * –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
     */
    nextMonth() {
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
        this.render();
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    setEvents(events) {
        this.events = events;
        this.render();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
     */
    getFirstDayOfMonth() {
        return new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
     */
    getLastDayOfMonth() {
        return new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 0);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
     */
    getEventsForDay(date) {
        return this.events.filter(event => {
            const eventDate = event.date.toDate ? event.date.toDate() : new Date(event.date);
            return eventDate.getDate() === date.getDate() &&
                   eventDate.getMonth() === date.getMonth() &&
                   eventDate.getFullYear() === date.getFullYear();
        });
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     */
    render() {
        const year = this.currentDate.getFullYear();
        const month = this.currentDate.getMonth();
        const monthNames = [
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
            '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
        ];
        
        let html = `
            <div class="calendar-header">
                <button class="calendar-nav-btn prev-month" aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <h3 class="calendar-month-title">${monthNames[month]} ${year}</h3>
                <button class="calendar-nav-btn next-month" aria-label="–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
            
            <div class="calendar-grid">
                <div class="calendar-weekdays">
                    <div class="calendar-weekday">–ü–Ω</div>
                    <div class="calendar-weekday">–í—Ç</div>
                    <div class="calendar-weekday">–°—Ä</div>
                    <div class="calendar-weekday">–ß—Ç</div>
                    <div class="calendar-weekday">–ü—Ç</div>
                    <div class="calendar-weekday">–°–±</div>
                    <div class="calendar-weekday">–í—Å</div>
                </div>
                <div class="calendar-days">
                    ${this.renderDays()}
                </div>
            </div>
        `;
        
        this.container.innerHTML = html;
        this.attachEventHandlers();
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
     */
    renderDays() {
        const firstDay = this.getFirstDayOfMonth();
        const lastDay = this.getLastDayOfMonth();
        const prevLastDay = new Date(firstDay.getTime() - 1);
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
        let startDayOfWeek = firstDay.getDay() - 1;
        if (startDayOfWeek === -1) startDayOfWeek = 6;
        
        let html = '';
        
        // –î–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        for (let i = startDayOfWeek - 1; i >= 0; i--) {
            const day = prevLastDay.getDate() - i;
            html += `<div class="calendar-day other-month">${day}</div>`;
        }
        
        // –î–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        for (let day = 1; day <= lastDay.getDate(); day++) {
            const date = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), day);
            const events = this.getEventsForDay(date);
            const isToday = this.isToday(date);
            
            html += `
                <div class="calendar-day ${isToday ? 'today' : ''}" data-date="${date.toISOString()}">
                    <div class="calendar-day-number">${day}</div>
                    ${events.length > 0 ? this.renderDayEvents(events) : ''}
                </div>
            `;
        }
        
        // –î–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        const totalCells = 42; // 6 –Ω–µ–¥–µ–ª—å
        const renderedCells = startDayOfWeek + lastDay.getDate();
        const remainingCells = totalCells - renderedCells;
        
        for (let day = 1; day <= remainingCells; day++) {
            html += `<div class="calendar-day other-month">${day}</div>`;
        }
        
        return html;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä —Å–æ–±—ã—Ç–∏–π –¥–Ω—è
     */
    renderDayEvents(events) {
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
        // –í —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö –∑–¥–µ—Å—å –±—É–¥—É—Ç —Å–∞–º–∏ —Å–æ–±—ã—Ç–∏—è
        return `<div class="calendar-day-events-count">${events.length} —Å–æ–±—ã—Ç.</div>`;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º
     */
    isToday(date) {
        const today = new Date();
        return date.getDate() === today.getDate() &&
               date.getMonth() === today.getMonth() &&
               date.getFullYear() === today.getFullYear();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventHandlers() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        const prevBtn = this.container.querySelector('.prev-month');
        const nextBtn = this.container.querySelector('.next-month');
        
        prevBtn?.addEventListener('click', () => this.previousMonth());
        nextBtn?.addEventListener('click', () => this.nextMonth());
        
        // –ö–ª–∏–∫–∏ –ø–æ –¥–Ω—è–º
        const days = this.container.querySelectorAll('.calendar-day:not(.other-month)');
        days.forEach(day => {
            day.addEventListener('click', () => {
                const date = new Date(day.dataset.date);
                if (this.onDayClick) {
                    this.onDayClick(date, this.getEventsForDay(date));
                }
            });
        });
    }
}