/**
 * @fileoverview API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
 * @module EventsAPI
 */

import logger from '../../utils/logger.js';
import { db, collection, getDocs, getDoc, doc, addDoc, updateDoc, deleteDoc, query, where, orderBy } from '../../utils/firebase-v8-adapter.js';
import { auth } from '../../../firebase-init.js';

// Firebase v8 Timestamp
const Timestamp = window.firebase.firestore.Timestamp;

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —Ñ–∏–ª–∏–∞–ª–∞
 * @param {string} branchId - ID —Ñ–∏–ª–∏–∞–ª–∞
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
 */
export async function getEventsByBranch(branchId) {
    console.log(`üéØ getEventsByBranch –≤—ã–∑–≤–∞–Ω–∞ —Å branchId: ${branchId}`); // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥
    try {
        logger.log(`üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞: ${branchId}`);
        
        const eventsRef = collection(db, 'events');
        
        try {
            // –ü—Ä–æ–±—É–µ–º —Å —Å–æ—Å—Ç–∞–≤–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
            const q = query(eventsRef, 
                where('branchId', '==', branchId),
                orderBy('date', 'desc')
            );
            
            const snapshot = await getDocs(q);
            const events = [];
        
            snapshot.forEach(doc => {
                events.push({
                    id: doc.id,
                    ...doc.data()
                });
            });
            
            logger.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${events.length} —Å–æ–±—ã—Ç–∏–π`);
            return events;
        } catch (indexError) {
            // –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ —Å–æ–∑–¥–∞–Ω, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JS
            logger.warn('‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å –Ω–µ —Å–æ–∑–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥');
            
            const q = query(eventsRef, where('branchId', '==', branchId));
            const snapshot = await getDocs(q);
            const events = [];
            
            snapshot.forEach(doc => {
                events.push({
                    id: doc.id,
                    ...doc.data()
                });
            });
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JavaScript
            events.sort((a, b) => {
                const dateA = a.date?.toDate ? a.date.toDate() : new Date(a.date);
                const dateB = b.date?.toDate ? b.date.toDate() : new Date(b.date);
                return dateB - dateA; // desc
            });
            
            logger.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${events.length} —Å–æ–±—ã—Ç–∏–π (–±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞)`);
            return events;
        }
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
        // –ï—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if (error.code === 'failed-precondition') {
            logger.log('üìã –ö–æ–ª–ª–µ–∫—Ü–∏—è events –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');
            return [];
        }
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ ID
 * @param {string} eventId - ID —Å–æ–±—ã—Ç–∏—è
 * @returns {Promise<Object|null>} –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ null
 */
export async function getEventById(eventId) {
    try {
        const eventRef = doc(db, 'events', eventId);
        const eventDoc = await getDoc(eventRef);
        
        if (eventDoc.exists) {
            return {
                id: eventDoc.id,
                ...eventDoc.data()
            };
        }
        
        return null;
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
        throw error;
    }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
 * @param {Object} eventData - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
 * @returns {Promise<string>} ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
 */
export async function createEvent(eventData) {
    try {
        const user = auth.currentUser;
        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω –≤ —Å–µ—Ç–ª–∏—Å—Ç–µ
        let songCount = 0;
        if (eventData.setlistId) {
            const setlistDoc = await db.collection('worship_setlists').doc(eventData.setlistId).get();
            if (setlistDoc.exists()) {
                const setlistData = setlistDoc.data();
                songCount = setlistData.songs ? setlistData.songs.length : 0;
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ª–∏–¥–µ—Ä–∞
        let leaderName = null;
        if (eventData.leaderId) {
            const userDoc = await db.collection('users').doc(eventData.leaderId).get();
            if (userDoc.exists()) {
                const userData = userDoc.data();
                leaderName = userData.displayName || userData.email;
            }
        }
        
        const newEvent = {
            ...eventData,
            songCount,
            leaderName,
            createdBy: user.uid,
            createdAt: Timestamp.now(),
            isArchived: false
        };
        
        const docRef = await addDoc(collection(db, 'events'), newEvent);
        logger.log(`‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: ${docRef.id}`);
        
        return docRef.id;
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
        throw error;
    }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
 * @param {string} eventId - ID —Å–æ–±—ã—Ç–∏—è
 * @param {Object} updates - –û–±–Ω–æ–≤–ª—è–µ–º—ã–µ –ø–æ–ª—è
 */
export async function updateEvent(eventId, updates) {
    try {
        const eventRef = doc(db, 'events', eventId);
        await updateDoc(eventRef, {
            ...updates,
            updatedAt: Timestamp.now()
        });
        
        logger.log(`‚úÖ –°–æ–±—ã—Ç–∏–µ ${eventId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
        throw error;
    }
}

/**
 * –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
 * @param {string} eventId - ID —Å–æ–±—ã—Ç–∏—è
 */
export async function deleteEvent(eventId) {
    try {
        await deleteDoc(doc(db, 'events', eventId));
        logger.log(`‚úÖ –°–æ–±—ã—Ç–∏–µ ${eventId} —É–¥–∞–ª–µ–Ω–æ`);
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ç–ª–∏—Å—Ç —Å–æ–±—ã—Ç–∏—è
 * @param {string} setlistId - ID —Å–µ—Ç–ª–∏—Å—Ç–∞
 * @returns {Promise<Object|null>} –î–∞–Ω–Ω—ã–µ —Å–µ—Ç–ª–∏—Å—Ç–∞
 */
export async function getEventSetlist(setlistId) {
    try {
        const setlistRef = doc(db, 'worship_setlists', setlistId);
        const setlistDoc = await getDoc(setlistRef);
        
        if (setlistDoc.exists) {
            return {
                id: setlistDoc.id,
                ...setlistDoc.data()
            };
        }
        
        return null;
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–ª–∏—Å—Ç–∞:', error);
        throw error;
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
 * @param {string} eventId - ID —Å–æ–±—ã—Ç–∏—è
 * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
 * @param {string} platform - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (whatsapp, telegram, copy)
 * @returns {string} URL –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
 */
export function getShareUrl(eventId, eventName, platform) {
    const baseUrl = `${window.location.origin}/event/${eventId}`;
    const message = `üìÖ –°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –Ω–∞ "${eventName}"\nüîó ${baseUrl}`;
    
    switch (platform) {
        case 'whatsapp':
            return `https://wa.me/?text=${encodeURIComponent(message)}`;
        case 'telegram':
            return `https://t.me/share/url?url=${encodeURIComponent(baseUrl)}&text=${encodeURIComponent(`üìÖ –°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –Ω–∞ "${eventName}"`)}`;
        case 'copy':
        default:
            return baseUrl;
    }
}