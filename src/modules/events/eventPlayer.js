/**
 * –ú–æ–¥—É–ª—å –ø–ª–µ–µ—Ä–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Å–Ω–∏ —Å–æ–±—ã—Ç–∏—è –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
 */

import logger from '../../utils/logger.js';

class EventPlayer {
    constructor() {
        this.songs = [];
        this.currentIndex = 0;
        this.overlay = null;
        this.isOpen = false;
        this.eventId = null;
        this.transposition = 0;
        this.fontSize = 'medium'; // small, medium, large
        
        this.init();
    }
    
    init() {
        // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –ø–ª–µ–µ—Ä–∞
        this.createOverlay();
        this.attachEventHandlers();
    }
    
    createOverlay() {
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–≤–µ—Ä–ª–µ—è
        this.overlay = document.createElement('div');
        this.overlay.id = 'event-player-overlay';
        this.overlay.className = 'event-player-overlay';
        this.overlay.innerHTML = `
            <div class="event-player-header">
                <button class="player-close-btn" aria-label="–ó–∞–∫—Ä—ã—Ç—å –ø–ª–µ–µ—Ä">
                    <i class="fas fa-times"></i>
                </button>
                <div class="player-song-info">
                    <span class="player-song-number">1 / 1</span>
                    <span class="player-song-name">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏</span>
                </div>
                <div class="player-controls">
                    <button class="player-control-btn" id="player-transpose-down" aria-label="–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–∏–∑">
                        <i class="fas fa-minus"></i> <span class="transpose-value">0</span>
                    </button>
                    <button class="player-control-btn" id="player-transpose-up" aria-label="–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–≤–µ—Ä—Ö">
                        <i class="fas fa-plus"></i>
                    </button>
                    <button class="player-control-btn" id="player-font-size" aria-label="–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞">
                        <i class="fas fa-font"></i>
                    </button>
                    <button class="player-control-btn" id="player-fullscreen" aria-label="–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º">
                        <i class="fas fa-expand"></i>
                    </button>
                </div>
            </div>
            
            <div class="event-player-content">
                <div class="player-song-display" id="player-song-display">
                    <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–µ—Å–Ω—è -->
                </div>
            </div>
            
            <div class="event-player-navigation">
                <button class="player-nav-btn player-prev" id="player-prev" aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–µ—Å–Ω—è">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <button class="player-nav-btn player-next" id="player-next" aria-label="–°–ª–µ–¥—É—é—â–∞—è –ø–µ—Å–Ω—è">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        `;
        
        document.body.appendChild(this.overlay);
    }
    
    attachEventHandlers() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–ª–µ–µ—Ä–∞
        const closeBtn = this.overlay.querySelector('.player-close-btn');
        closeBtn.addEventListener('click', () => this.close());
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        const prevBtn = this.overlay.querySelector('#player-prev');
        const nextBtn = this.overlay.querySelector('#player-next');
        prevBtn.addEventListener('click', () => this.previousSong());
        nextBtn.addEventListener('click', () => this.nextSong());
        
        // –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        const transposeDown = this.overlay.querySelector('#player-transpose-down');
        const transposeUp = this.overlay.querySelector('#player-transpose-up');
        transposeDown.addEventListener('click', () => this.transpose(-1));
        transposeUp.addEventListener('click', () => this.transpose(1));
        
        // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        const fontSizeBtn = this.overlay.querySelector('#player-font-size');
        fontSizeBtn.addEventListener('click', () => this.toggleFontSize());
        
        // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        const fullscreenBtn = this.overlay.querySelector('#player-fullscreen');
        fullscreenBtn.addEventListener('click', () => this.toggleFullscreen());
        
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        this.handleKeyboard = (e) => {
            if (!this.isOpen) return;
            
            switch(e.key) {
                case 'ArrowLeft':
                    e.preventDefault();
                    this.previousSong();
                    break;
                case 'ArrowRight':
                    e.preventDefault();
                    this.nextSong();
                    break;
                case 'Escape':
                    e.preventDefault();
                    this.close();
                    break;
            }
        };
        
        // –°–≤–∞–π–ø –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        this.setupSwipeHandling();
    }
    
    setupSwipeHandling() {
        let touchStartX = 0;
        let touchEndX = 0;
        
        const content = this.overlay.querySelector('.event-player-content');
        
        content.addEventListener('touchstart', (e) => {
            touchStartX = e.changedTouches[0].screenX;
        }, { passive: true });
        
        content.addEventListener('touchend', (e) => {
            touchEndX = e.changedTouches[0].screenX;
            this.handleSwipe();
        }, { passive: true });
        
        this.handleSwipe = () => {
            const swipeThreshold = 50;
            const diff = touchStartX - touchEndX;
            
            if (Math.abs(diff) > swipeThreshold) {
                if (diff > 0) {
                    // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∞—è –ø–µ—Å–Ω—è
                    this.nextSong();
                } else {
                    // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø–µ—Å–Ω—è
                    this.previousSong();
                }
            }
        };
    }
    
    async open(eventId, songs, startIndex = 0) {
        logger.log('üéµ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–ª–µ–µ—Ä —Å–æ–±—ã—Ç–∏—è:', eventId);
        
        this.eventId = eventId;
        this.songs = songs;
        this.currentIndex = startIndex;
        this.transposition = 0;
        
        if (!this.songs || this.songs.length === 0) {
            console.error('‚ùå –ù–µ—Ç –ø–µ—Å–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
        console.log('üé¨ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –ø–ª–µ–µ—Ä–∞');
        this.overlay.classList.add('show');
        this.isOpen = true;
        console.log('üìç –û–≤–µ—Ä–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç:', this.overlay);
        console.log('üìç –ö–ª–∞—Å—Å—ã –æ–≤–µ—Ä–ª–µ—è:', this.overlay.className);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        document.addEventListener('keydown', this.handleKeyboard);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –ø–µ—Å–Ω—é
        await this.loadCurrentSong();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
        history.pushState({ eventPlayer: true }, '', `#player`);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        window.addEventListener('popstate', this.handlePopState);
    }
    
    handlePopState = (e) => {
        if (this.isOpen) {
            this.close();
        }
    };
    
    close() {
        logger.log('üéµ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–ª–µ–µ—Ä —Å–æ–±—ã—Ç–∏—è');
        
        this.overlay.classList.remove('show');
        this.isOpen = false;
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.removeEventListener('keydown', this.handleKeyboard);
        window.removeEventListener('popstate', this.handlePopState);
        
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        if (window.location.hash === '#player') {
            history.back();
        }
        
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if (document.fullscreenElement) {
            document.exitFullscreen();
        }
    }
    
    async loadCurrentSong() {
        const song = this.songs[this.currentIndex];
        if (!song) return;
        
        logger.log('üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Å–Ω—é:', song.name);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Å–Ω–µ
        this.updateSongInfo();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
        await this.displaySong(song);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.updateNavigationButtons();
    }
    
    updateSongInfo() {
        const song = this.songs[this.currentIndex];
        const numberEl = this.overlay.querySelector('.player-song-number');
        const nameEl = this.overlay.querySelector('.player-song-name');
        
        numberEl.textContent = `${this.currentIndex + 1} / ${this.songs.length}`;
        nameEl.textContent = song.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    }
    
    async displaySong(song) {
        const display = this.overlay.querySelector('#player-song-display');
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Å–Ω–∏
            const [
                { processLyrics, transposeLyrics, highlightChords },
                { wrapSongBlocks }
            ] = await Promise.all([
                import('../../js/core/transposition.js'),
                import('../../js/core/songParser.js')
            ]);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
            const lyrics = song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || song.lyrics || song.text || '–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω';
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            let processedLyrics = processLyrics(lyrics);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (this.transposition !== 0) {
                const fromKey = song.preferredKey || song.defaultKey || 'C';
                // transposeLyrics –ø—Ä–∏–Ω–∏–º–∞–µ—Ç (lyrics, transposition, targetKey)
                // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                const keys = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
                const fromIndex = keys.indexOf(fromKey.replace('‚ô≠', 'b').replace('m', ''));
                let targetIndex = (fromIndex + this.transposition) % 12;
                if (targetIndex < 0) targetIndex += 12;
                const targetKey = keys[targetIndex];
                
                processedLyrics = transposeLyrics(processedLyrics, this.transposition, targetKey);
            }
            
            // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –±–ª–æ–∫–∏ –ø–µ—Å–Ω–∏ –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã
            const wrappedLyrics = wrapSongBlocks(processedLyrics);
            const finalLyrics = highlightChords(wrappedLyrics);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            let currentKey = song.preferredKey || song.defaultKey || 'C';
            if (this.transposition !== 0) {
                const keys = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
                const fromIndex = keys.indexOf(currentKey.replace('‚ô≠', 'b').replace('m', ''));
                let targetIndex = (fromIndex + this.transposition) % 12;
                if (targetIndex < 0) targetIndex += 12;
                currentKey = keys[targetIndex];
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
            display.innerHTML = `
                <div class="song-content font-size-${this.fontSize}">
                    <div class="song-key-info">
                        ${currentKey}
                        ${song.BPM ? `<span class="song-bpm-info">${song.BPM} BPM</span>` : ''}
                    </div>
                    ${finalLyrics}
                </div>
            `;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Å–Ω–∏:', error);
            display.innerHTML = '<div class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–Ω–∏</div>';
        }
    }
    
    updateNavigationButtons() {
        const prevBtn = this.overlay.querySelector('#player-prev');
        const nextBtn = this.overlay.querySelector('#player-next');
        
        prevBtn.disabled = this.currentIndex === 0;
        nextBtn.disabled = this.currentIndex === this.songs.length - 1;
    }
    
    previousSong() {
        if (this.currentIndex > 0) {
            this.currentIndex--;
            this.transposition = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            this.updateTransposeDisplay();
            this.loadCurrentSong();
        }
    }
    
    nextSong() {
        if (this.currentIndex < this.songs.length - 1) {
            this.currentIndex++;
            this.transposition = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            this.updateTransposeDisplay();
            this.loadCurrentSong();
        }
    }
    
    transpose(direction) {
        this.transposition += direction;
        this.updateTransposeDisplay();
        this.loadCurrentSong();
    }
    
    updateTransposeDisplay() {
        const transposeValue = this.overlay.querySelector('.transpose-value');
        transposeValue.textContent = this.transposition > 0 ? `+${this.transposition}` : this.transposition;
    }
    
    toggleFontSize() {
        const sizes = ['small', 'medium', 'large'];
        const currentIndex = sizes.indexOf(this.fontSize);
        this.fontSize = sizes[(currentIndex + 1) % sizes.length];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å
        const content = this.overlay.querySelector('.song-content');
        if (content) {
            content.className = `song-content font-size-${this.fontSize}`;
        }
    }
    
    toggleFullscreen() {
        if (!document.fullscreenElement) {
            this.overlay.requestFullscreen().catch(err => {
                console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º:', err);
            });
        } else {
            document.exitFullscreen();
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
let playerInstance = null;

export function getEventPlayer() {
    if (!playerInstance) {
        playerInstance = new EventPlayer();
    }
    return playerInstance;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–µ–µ—Ä–∞
export async function openEventPlayer(eventId, songs, startIndex = 0) {
    const player = getEventPlayer();
    await player.open(eventId, songs, startIndex);
}