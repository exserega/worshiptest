/**
 * @fileoverview –ú–æ–¥—É–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ–±—ã—Ç–∏—è—Ö
 * @module UserNameSync
 */

import { db } from '../../utils/firebase-v8-adapter.js';
import logger from '../../utils/logger.js';

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏—è—Ö
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} newName - –ù–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<void>}
 */
export async function syncUserNameInEvents(userId, newName) {
    try {
        logger.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, newName });
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏–¥–µ—Ä–æ–º
        const leaderEventsSnapshot = await db.collection('events')
            .where('leaderId', '==', userId)
            .get();
            
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const allEventsSnapshot = await db.collection('events').get();
        
        const batch = db.batch();
        let updateCount = 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ª–∏–¥–µ—Ä
        leaderEventsSnapshot.forEach(doc => {
            batch.update(doc.ref, {
                leaderName: newName,
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            updateCount++;
            logger.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º leaderName –≤ —Å–æ–±—ã—Ç–∏–∏ ${doc.id}`);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–∞—Å—Ç–Ω–∏–∫
        allEventsSnapshot.forEach(doc => {
            const eventData = doc.data();
            let needsUpdate = false;
            const updatedParticipants = {};
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è
            if (eventData.participants) {
                Object.entries(eventData.participants).forEach(([key, participant]) => {
                    if (participant.userId === userId) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                        updatedParticipants[key] = {
                            ...participant,
                            userName: newName
                        };
                        needsUpdate = true;
                        logger.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${key} –≤ —Å–æ–±—ã—Ç–∏–∏ ${doc.id}`);
                    } else {
                        // –û—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        updatedParticipants[key] = participant;
                    }
                });
                
                if (needsUpdate) {
                    batch.update(doc.ref, {
                        participants: updatedParticipants,
                        updatedAt: firebase.firestore.FieldValue.serverTimestamp()
                    });
                    updateCount++;
                }
            }
        });
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
        if (updateCount > 0) {
            await batch.commit();
            logger.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updateCount} —Å–æ–±—ã—Ç–∏–π`);
        } else {
            logger.log('‚ÑπÔ∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω–∏:', error);
        throw error;
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} newName - –ù–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<void>}
 */
export async function syncUserNameInArchivedEvents(userId, newName) {
    try {
        const archivedEventsSnapshot = await db.collection('events')
            .where('isArchived', '==', true)
            .get();
            
        const batch = db.batch();
        let updateCount = 0;
        
        archivedEventsSnapshot.forEach(doc => {
            const eventData = doc.data();
            let needsUpdate = false;
            const updates = {};
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥–µ—Ä–∞
            if (eventData.leaderId === userId) {
                updates.leaderName = newName;
                needsUpdate = true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (eventData.participants) {
                const updatedParticipants = {};
                Object.entries(eventData.participants).forEach(([key, participant]) => {
                    if (participant.userId === userId) {
                        updatedParticipants[key] = {
                            ...participant,
                            userName: newName
                        };
                        needsUpdate = true;
                    } else {
                        updatedParticipants[key] = participant;
                    }
                });
                
                if (needsUpdate && Object.keys(updatedParticipants).length > 0) {
                    updates.participants = updatedParticipants;
                }
            }
            
            if (needsUpdate) {
                updates.updatedAt = firebase.firestore.FieldValue.serverTimestamp();
                batch.update(doc.ref, updates);
                updateCount++;
            }
        });
        
        if (updateCount > 0) {
            await batch.commit();
            logger.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updateCount} –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π`);
        }
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö:', error);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    }
}