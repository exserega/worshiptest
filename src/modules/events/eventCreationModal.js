/**
 * @fileoverview –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
 * @module EventCreationModal
 */

import logger from '../../utils/logger.js';
import { createEvent } from './eventsApi.js';
import { getCurrentUser } from '../auth/authCheck.js';
import { db } from '../../utils/firebase-v8-adapter.js';

class EventCreationModal {
    constructor() {
        this.modal = null;
        this.selectedDate = new Date();
        this.selectedParticipants = {};
        this.onSuccess = null;
    }
    
    async open(date = new Date(), onSuccess = null) {
        this.selectedDate = date instanceof Date ? date : new Date(date);
        this.onSuccess = onSuccess;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.createModal();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await this.loadData();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.show();
    }
    
    createModal() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.modal) {
            this.modal.remove();
        }
        
        const modalHTML = `
            <div class="event-creation-modal" id="eventCreationModal">
                <div class="modal-overlay" onclick="eventCreationModal.close()"></div>
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ</h2>
                        <button class="close-btn" onclick="eventCreationModal.close()">√ó</button>
                    </div>
                    
                    <div class="modal-body">
                        <!-- –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è -->
                        <div class="form-group">
                            <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</label>
                            <select id="eventNamePreset" class="form-control" onchange="eventCreationModal.updateEventName()">
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</option>
                                <option value="–ú–æ–ª–æ–¥—ë–∂–Ω–∞—è –º–æ–ª–∏—Ç–≤–∞">–ú–æ–ª–æ–¥—ë–∂–Ω–∞—è –º–æ–ª–∏—Ç–≤–∞ –≤ —á–µ—Ç–≤–µ—Ä–≥ –≤ 19:00</option>
                                <option value="–í–æ—Å–∫—Ä–µ—Å–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ">–í–æ—Å–∫—Ä–µ—Å–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 8:00</option>
                                <option value="–ú–æ–ª–æ–¥—ë–∂–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ">–ú–æ–ª–æ–¥—ë–∂–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 13:30</option>
                                <option value="custom">–î—Ä—É–≥–æ–µ...</option>
                            </select>
                            <input type="text" id="eventNameCustom" class="form-control" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" style="display:none; margin-top: 0.5rem;">
                        </div>
                        
                        <!-- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è -->
                        <div class="form-row">
                            <div class="form-group">
                                <label>–î–∞—Ç–∞</label>
                                <input type="date" id="eventDate" class="form-control" value="${this.selectedDate.toISOString().split('T')[0]}">
                            </div>
                            <div class="form-group">
                                <label>–í—Ä–µ–º—è</label>
                                <input type="time" id="eventTime" class="form-control" value="19:00">
                            </div>
                        </div>
                        
                        <!-- –í–µ–¥—É—â–∏–π -->
                        <div class="form-group">
                            <label>–í–µ–¥—É—â–∏–π –ø—Ä–æ—Å–ª–∞–≤–ª–µ–Ω–∏—è</label>
                            <select id="eventLeader" class="form-control">
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–¥—É—â–µ–≥–æ</option>
                            </select>
                        </div>
                        
                        <!-- –°–µ—Ç–ª–∏—Å—Ç -->
                        <div class="form-group">
                            <label>–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω</label>
                            <select id="eventSetlist" class="form-control">
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç–ª–∏—Å—Ç</option>
                            </select>
                        </div>
                        
                        <!-- –£—á–∞—Å—Ç–Ω–∏–∫–∏ -->
                        <div class="form-group">
                            <label>–£—á–∞—Å—Ç–Ω–∏–∫–∏</label>
                            <div class="participants-section">
                                <div class="instrument-groups">
                                    ${this.createInstrumentGroups()}
                                </div>
                            </div>
                        </div>
                        
                        <!-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π -->
                        <div class="form-group">
                            <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                            <textarea id="eventComment" class="form-control" rows="2"></textarea>
                        </div>
                    </div>
                    
                    <div class="modal-footer">
                        <button class="btn btn-secondary" onclick="eventCreationModal.close()">–û—Ç–º–µ–Ω–∞</button>
                        <button class="btn btn-primary" onclick="eventCreationModal.save()">–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        this.modal = document.getElementById('eventCreationModal');
        
        // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
        window.eventCreationModal = this;
    }
    
    createInstrumentGroups() {
        const instruments = [
            { id: 'vocals', name: '–í–æ–∫–∞–ª', icon: 'üé§' },
            { id: 'acoustic_guitar', name: '–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞', icon: 'üé∏' },
            { id: 'electric_guitar', name: '–≠–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä–∞', icon: 'üé∏' },
            { id: 'bass', name: '–ë–∞—Å-–≥–∏—Ç–∞—Ä–∞', icon: 'üé∏' },
            { id: 'keys', name: '–ö–ª–∞–≤–∏—à–∏', icon: 'üéπ' },
            { id: 'drums', name: '–ë–∞—Ä–∞–±–∞–Ω—ã', icon: 'ü•Å' },
            { id: 'cajon', name: '–ö–∞—Ö–æ–Ω', icon: 'ü™ò' },
            { id: 'sound', name: '–ó–≤—É–∫–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä', icon: 'üéõÔ∏è' },
            { id: 'other', name: '–î—Ä—É–≥–æ–µ', icon: 'üéµ' }
        ];
        
        return instruments.map(inst => `
            <div class="instrument-group">
                <div class="instrument-header">
                    <span>${inst.icon} ${inst.name}</span>
                    <button type="button" class="add-participant-btn" onclick="eventCreationModal.showParticipantSelector('${inst.id}')">+</button>
                </div>
                <div class="instrument-participants" id="participants-${inst.id}"></div>
            </div>
        `).join('');
    }
    
    async loadData() {
        const user = getCurrentUser();
        if (!user || !user.branchId) {
            logger.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —Ñ–∏–ª–∏–∞–ª');
            return;
        }
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ñ–∏–ª–∏–∞–ª–∞
            const usersSnapshot = await db.collection('users')
                .where('branchId', '==', user.branchId)
                .where('status', '==', 'active')
                .get();
            
            const users = [];
            usersSnapshot.forEach(doc => {
                const userData = doc.data();
                users.push({
                    id: doc.id,
                    name: userData.name || userData.displayName || userData.email
                });
            });
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç –≤–µ–¥—É—â–∏—Ö
            const leaderSelect = document.getElementById('eventLeader');
            users.forEach(u => {
                const option = document.createElement('option');
                option.value = u.id;
                option.textContent = u.name;
                leaderSelect.appendChild(option);
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            this.availableUsers = users;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ç–ª–∏—Å—Ç—ã
            const setlistsSnapshot = await db.collection('worship_setlists')
                .where('branchId', '==', user.branchId)
                .get();
            
            const setlistSelect = document.getElementById('eventSetlist');
            const setlists = [];
            setlistsSnapshot.forEach(doc => {
                const setlist = doc.data();
                setlists.push({
                    id: doc.id,
                    name: setlist.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                });
            });
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏
            setlists.sort((a, b) => a.name.localeCompare(b.name));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ–ª–µ–∫—Ç
            setlists.forEach(setlist => {
                const option = document.createElement('option');
                option.value = setlist.id;
                option.textContent = setlist.name;
                setlistSelect.appendChild(option);
            });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
    
    updateEventName() {
        const preset = document.getElementById('eventNamePreset');
        const custom = document.getElementById('eventNameCustom');
        
        if (preset.value === 'custom') {
            custom.style.display = 'block';
            custom.focus();
        } else {
            custom.style.display = 'none';
            custom.value = '';
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–µ—Å–µ—Ç–æ–≤
        if (preset.value === '–ú–æ–ª–æ–¥—ë–∂–Ω–∞—è –º–æ–ª–∏—Ç–≤–∞') {
            document.getElementById('eventTime').value = '19:00';
        } else if (preset.value === '–í–æ—Å–∫—Ä–µ—Å–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ') {
            document.getElementById('eventTime').value = '08:00';
        } else if (preset.value === '–ú–æ–ª–æ–¥—ë–∂–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ') {
            document.getElementById('eventTime').value = '13:30';
        }
    }
    
    showParticipantSelector(instrumentId) {
        // –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const selector = document.createElement('div');
        selector.className = 'participant-selector';
        selector.innerHTML = `
            <div class="selector-content">
                <h4>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞</h4>
                <div class="user-list">
                    ${this.availableUsers.map(u => `
                        <div class="user-item" onclick="eventCreationModal.addParticipant('${instrumentId}', '${u.id}', '${u.name}')">
                            ${u.name}
                        </div>
                    `).join('')}
                </div>
                <button class="close-selector" onclick="this.parentElement.parentElement.remove()">–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
        `;
        
        document.body.appendChild(selector);
    }
    
    addParticipant(instrumentId, userId, userName) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —ç—Ç–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
        if (!this.selectedParticipants[instrumentId]) {
            this.selectedParticipants[instrumentId] = [];
        }
        
        if (this.selectedParticipants[instrumentId].find(p => p.userId === userId)) {
            alert('–£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —ç—Ç–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        this.selectedParticipants[instrumentId].push({
            userId,
            userName,
            instrument: instrumentId,
            instrumentName: this.getInstrumentName(instrumentId)
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateParticipantsList(instrumentId);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
        document.querySelector('.participant-selector')?.remove();
    }
    
    getInstrumentName(instrumentId) {
        const names = {
            'vocals': '–í–æ–∫–∞–ª',
            'acoustic_guitar': '–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞',
            'electric_guitar': '–≠–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä–∞',
            'bass': '–ë–∞—Å-–≥–∏—Ç–∞—Ä–∞',
            'keys': '–ö–ª–∞–≤–∏—à–∏',
            'drums': '–ë–∞—Ä–∞–±–∞–Ω—ã',
            'cajon': '–ö–∞—Ö–æ–Ω',
            'sound': '–ó–≤—É–∫–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä',
            'other': '–î—Ä—É–≥–æ–µ'
        };
        return names[instrumentId] || instrumentId;
    }
    
    updateParticipantsList(instrumentId) {
        const container = document.getElementById(`participants-${instrumentId}`);
        const participants = this.selectedParticipants[instrumentId] || [];
        
        container.innerHTML = participants.map((p, index) => `
            <div class="participant-chip">
                ${p.userName}
                <button onclick="eventCreationModal.removeParticipant('${instrumentId}', ${index})">√ó</button>
            </div>
        `).join('');
    }
    
    removeParticipant(instrumentId, index) {
        this.selectedParticipants[instrumentId].splice(index, 1);
        this.updateParticipantsList(instrumentId);
    }
    
    async save() {
        try {
            const preset = document.getElementById('eventNamePreset').value;
            const customName = document.getElementById('eventNameCustom').value;
            const eventName = preset === 'custom' ? customName : preset;
            
            if (!eventName) {
                alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è');
                return;
            }
            
            const eventDate = document.getElementById('eventDate').value;
            const eventTime = document.getElementById('eventTime').value;
            const leaderId = document.getElementById('eventLeader').value;
            const setlistId = document.getElementById('eventSetlist').value;
            const comment = document.getElementById('eventComment').value;
            
            if (!eventDate || !eventTime) {
                alert('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = getCurrentUser();
            
            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Firebase
            const participantsObject = {};
            Object.values(this.selectedParticipants).forEach(group => {
                group.forEach(participant => {
                    participantsObject[participant.userId] = {
                        userId: participant.userId,
                        userName: participant.userName,
                        instrument: participant.instrument,
                        instrumentName: participant.instrumentName
                    };
                });
            });
            
            // –ï—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if (Object.keys(participantsObject).length === 0) {
                participantsObject[user.uid] = {
                    userId: user.uid,
                    userName: user.displayName || user.email,
                    instrument: '',
                    instrumentName: ''
                };
            }
            
            const eventData = {
                name: eventName,
                date: new Date(`${eventDate}T${eventTime}`),
                leaderId: leaderId || user.uid,
                leaderName: leaderId ? this.availableUsers.find(u => u.id === leaderId)?.name : user.displayName,
                setlistId: setlistId || '',
                participants: participantsObject, // Firebase —Ö—Ä–∞–Ω–∏—Ç –∫–∞–∫ –æ–±—ä–µ–∫—Ç
                participantCount: Object.keys(participantsObject).length,
                comment: comment || '',
                branchId: user.branchId,
                createdBy: user.uid,
                isArchived: false
            };
            
            logger.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', eventData);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const saveBtn = this.modal.querySelector('.btn-primary');
            saveBtn.disabled = true;
            saveBtn.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ...';
            
            const eventId = await createEvent(eventData);
            
            logger.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', eventId);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.close();
            
            // –í—ã–∑—ã–≤–∞–µ–º callback
            if (this.onSuccess) {
                this.onSuccess(eventId);
            }
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: ' + error.message);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            const saveBtn = this.modal.querySelector('.btn-primary');
            saveBtn.disabled = false;
            saveBtn.textContent = '–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ';
        }
    }
    
    show() {
        this.modal.style.display = 'block';
        document.body.style.overflow = 'hidden';
    }
    
    close() {
        if (this.modal) {
            this.modal.remove();
            this.modal = null;
        }
        document.body.style.overflow = '';
        window.eventCreationModal = null;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
export function openEventCreationModal(date, onSuccess) {
    const modal = new EventCreationModal();
    modal.open(date, onSuccess);
}

export default EventCreationModal;