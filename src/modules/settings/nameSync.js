/**
 * @fileoverview –ú–æ–¥—É–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ settings –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–º–µ–Ω –≤ —Å–æ–±—ã—Ç–∏—è—Ö
 */

// –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ Firebase
const db = firebase.firestore();

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏—è—Ö
 */
async function syncUserNameInEvents(userId, newName) {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, newName });
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏–¥–µ—Ä–æ–º
        const leaderEventsSnapshot = await db.collection('events')
            .where('leaderId', '==', userId)
            .get();
            
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const allEventsSnapshot = await db.collection('events').get();
        
        const batch = db.batch();
        let updateCount = 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ª–∏–¥–µ—Ä
        leaderEventsSnapshot.forEach(doc => {
            batch.update(doc.ref, {
                leaderName: newName,
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            updateCount++;
            console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º leaderName –≤ —Å–æ–±—ã—Ç–∏–∏ ${doc.id}`);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–∞—Å—Ç–Ω–∏–∫
        allEventsSnapshot.forEach(doc => {
            const eventData = doc.data();
            let needsUpdate = false;
            const updatedParticipants = {};
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è
            if (eventData.participants) {
                Object.entries(eventData.participants).forEach(([key, participant]) => {
                    if (participant.userId === userId) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                        updatedParticipants[key] = {
                            ...participant,
                            userName: newName
                        };
                        needsUpdate = true;
                        console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${key} –≤ —Å–æ–±—ã—Ç–∏–∏ ${doc.id}`);
                    } else {
                        // –û—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        updatedParticipants[key] = participant;
                    }
                });
                
                if (needsUpdate) {
                    batch.update(doc.ref, {
                        participants: updatedParticipants,
                        updatedAt: firebase.firestore.FieldValue.serverTimestamp()
                    });
                    updateCount++;
                }
            }
        });
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
        if (updateCount > 0) {
            await batch.commit();
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updateCount} —Å–æ–±—ã—Ç–∏–π`);
        } else {
            console.log('‚ÑπÔ∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
        
        return updateCount;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω–∏:', error);
        throw error;
    }
}

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é updateUserProfile
if (window.updateUserProfile) {
    const originalUpdateUserProfile = window.updateUserProfile;
    
    window.updateUserProfile = async function(updates) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–º—è
        const oldName = window.currentUser?.name;
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await originalUpdateUserProfile(updates);
        
        // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–º—è, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –≤ —Å–æ–±—ã—Ç–∏—è—Ö
        if (updates.name && updates.name !== oldName && window.currentUser?.id) {
            console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
            try {
                const updateCount = await syncUserNameInEvents(window.currentUser.id, updates.name);
                if (updateCount > 0) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    setTimeout(() => {
                        alert(`‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ ${updateCount} —Å–æ–±—ã—Ç–∏—è—Ö!`);
                    }, 100);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
                alert('‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –≤ —Å–æ–±—ã—Ç–∏—è—Ö');
            }
        }
    };
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.syncUserNameInEvents = syncUserNameInEvents;

console.log('‚úÖ –ú–æ–¥—É–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω');