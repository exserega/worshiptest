/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
 * –ß–∞—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º —Å–æ–±—ã—Ç–∏–π
 */

import { db } from '../../../firebase-init.js';
import { getCurrentBranchId } from '../auth/authCheck.js';
import logger from '../../utils/logger.js';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
 * @param {string} dateString - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
 */
export async function checkEventsOnDate(dateString) {
    try {
        logger.log('üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –¥–∞—Ç—É:', dateString);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª–∏–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const branchId = getCurrentBranchId();
        logger.log('üè¢ –¢–µ–∫—É—â–∏–π —Ñ–∏–ª–∏–∞–ª:', branchId);
        
        if (!branchId) {
            logger.warn('‚ùå –§–∏–ª–∏–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return [];
        }
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–∞—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–Ω—è
        const startOfDay = new Date(dateString);
        startOfDay.setHours(0, 0, 0, 0);
        
        const endOfDay = new Date(dateString);
        endOfDay.setHours(23, 59, 59, 999);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ Firestore
        const eventsRef = db.collection('events');
        // –í—Ä–µ–º–µ–Ω–Ω–æ —É–ø—Ä–æ—â–∞–µ–º –∑–∞–ø—Ä–æ—Å - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Ñ–∏–ª–∏–∞–ª–∞
        const query = eventsRef
            .where('branchId', '==', branchId)
            .where('archived', '==', false);
            
        const snapshot = await query.get();
        
        logger.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${snapshot.size} —Å–æ–±—ã—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ${branchId}`);
        
        if (snapshot.empty) {
            logger.warn('‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞');
            return [];
        }
        
        const events = [];
        snapshot.forEach(doc => {
            const eventData = doc.data();
            const eventDate = eventData.date.toDate();
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.log(`üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ "${eventData.name}" –Ω–∞ –¥–∞—Ç—É:`, eventDate.toISOString());
            logger.log(`üìÖ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º: ${startOfDay.toISOString()} - ${endOfDay.toISOString()}`);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
            if (eventDate >= startOfDay && eventDate <= endOfDay) {
                logger.log(`‚úÖ –°–æ–±—ã—Ç–∏–µ "${eventData.name}" –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –¥–∞—Ç–µ`);
                events.push({
                    id: doc.id,
                    ...eventData,
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                    dateString: eventDate.toISOString()
                });
            } else {
                logger.log(`‚ùå –°–æ–±—ã—Ç–∏–µ "${eventData.name}" –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –¥–∞—Ç–µ`);
            }
        });
        
        logger.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ ${events.length} —Å–æ–±—ã—Ç–∏–π –Ω–∞ –¥–∞—Ç—É ${dateString}`);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        events.sort((a, b) => a.date.toDate() - b.date.toDate());
        
        return events;
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π:', error);
        return [];
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É —Å–æ–±—ã—Ç–∏—è —Å–µ—Ç-–ª–∏—Å—Ç
 * @param {Object} event - –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
 * @returns {boolean}
 */
export function eventHasSetlist(event) {
    return !!(event && event.setlistId);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Object} event - –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
 * @returns {Object} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
 */
export function formatEventInfo(event) {
    if (!event) return null;
    
    const date = event.date.toDate ? event.date.toDate() : new Date(event.dateString);
    const time = date.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
    });
    
    return {
        id: event.id,
        name: event.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        time: time,
        hasSetlist: eventHasSetlist(event),
        setlistId: event.setlistId || null,
        leaderName: event.leaderName || '–ù–µ —É–∫–∞–∑–∞–Ω',
        participantCount: event.participantCount || 0
    };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
 * @param {Array} events - –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
 * @returns {string} –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
 */
export function getEventsDescription(events) {
    if (!events || events.length === 0) {
        return '–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π';
    }
    
    if (events.length === 1) {
        const event = events[0];
        const info = formatEventInfo(event);
        return `–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: "${info.name}" –≤ ${info.time}`;
    }
    
    return `–ù–∞–π–¥–µ–Ω–æ ${events.length} —Å–æ–±—ã—Ç–∏—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É`;
}