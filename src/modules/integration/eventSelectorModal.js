/**
 * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
 */

import logger from '../../utils/logger.js';

let modalInstance = null;

class EventSelectorModal {
    constructor() {
        this.modal = null;
        this.events = [];
        this.selectedDate = null;
        this.setlistData = null;
        this.onEventSelected = null;
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è
     * @param {Array} events - –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –¥–∞—Ç—É
     * @param {Date} selectedDate - –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
     * @param {Object} setlistData - –î–∞–Ω–Ω—ã–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞
     * @param {Function} onEventSelected - Callback –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–±—ã—Ç–∏—è
     */
    open(events, selectedDate, setlistData, onEventSelected) {
        this.events = events;
        this.selectedDate = selectedDate;
        this.setlistData = setlistData;
        this.onEventSelected = onEventSelected;
        
        this.createModal();
        this.show();
    }
    
    createModal() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.modal) {
            this.modal.remove();
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º selectedDate –≤ –æ–±—ä–µ–∫—Ç Date –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        const dateObj = typeof this.selectedDate === 'string' 
            ? new Date(this.selectedDate) 
            : this.selectedDate;
            
        const dateString = dateObj.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
        
        const modalHTML = `
            <div class="global-overlay event-selector-modal" id="eventSelectorModal">
                <div class="overlay-content compact">
                    <div class="overlay-header">
                        <h3 class="overlay-title">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ</h3>
                        <button class="overlay-close" data-action="close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <div class="overlay-body">
                        <p class="selector-info">
                            –ù–∞ ${dateString} –Ω–∞–π–¥–µ–Ω–æ ${this.events.length} —Å–æ–±—ã—Ç–∏—è.
                            –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç-–ª–∏—Å—Ç–∞ "${this.setlistData.name}":
                        </p>
                        
                        <div class="events-list">
                            ${this.renderEventsList()}
                        </div>
                        
                        <div class="selector-actions">
                            <button class="btn btn-secondary" data-action="create-new">
                                <i class="fas fa-plus"></i> –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        this.modal = document.getElementById('eventSelectorModal');
        
        this.attachEventHandlers();
    }
    
    renderEventsList() {
        return this.events.map(event => {
            const time = event.date.toDate().toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit'
            });
            
            const hasSetlist = event.setlistId ? 'has-setlist' : 'no-setlist';
            const setlistInfo = event.setlistId 
                ? `<span class="event-setlist"><i class="fas fa-music"></i> –ï—Å—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç</span>`
                : `<span class="event-no-setlist"><i class="fas fa-music"></i> –ù–µ—Ç —Å–µ—Ç-–ª–∏—Å—Ç–∞</span>`;
            
            return `
                <div class="event-card ${hasSetlist} clickable" data-event-id="${event.id}" data-has-setlist="${!!event.setlistId}">
                    <div class="event-time">${time}</div>
                    <div class="event-info">
                        <h4 class="event-name">${event.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h4>
                        <div class="event-details">
                            <span class="event-leader">
                                <i class="fas fa-user"></i> ${event.leaderName || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                            </span>
                            ${setlistInfo}
                            <span class="event-participants">
                                <i class="fas fa-users"></i> ${event.participantCount || 0}
                            </span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }
    
    attachEventHandlers() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.modal.querySelector('[data-action="close"]').addEventListener('click', () => this.close());
        this.modal.addEventListener('click', (e) => {
            if (e.target === this.modal) {
                this.close();
            }
        });
        
        // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ —Å–æ–±—ã—Ç–∏—è
        this.modal.addEventListener('click', (e) => {
            const eventCard = e.target.closest('.event-card');
            if (eventCard && !e.target.closest('[data-action]')) {
                const eventId = eventCard.dataset.eventId;
                const hasSetlist = eventCard.dataset.hasSetlist === 'true';
                const selectedEvent = this.events.find(evt => evt.id === eventId);
                
                if (selectedEvent) {
                    if (hasSetlist) {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                        if (confirm(`–ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ç-–ª–∏—Å—Ç –≤ —Å–æ–±—ã—Ç–∏–∏ "${selectedEvent.name}"?`)) {
                            this.selectEvent(selectedEvent);
                        }
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Ç-–ª–∏—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
                        this.selectEvent(selectedEvent);
                    }
                }
            }
        });
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        this.modal.querySelector('[data-action="create-new"]').addEventListener('click', () => {
            this.createNewEvent();
        });
        
        // Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        document.addEventListener('keydown', this.handleEscape = (e) => {
            if (e.key === 'Escape' && this.modal) {
                this.close();
            }
        });
    }
    
    async selectEvent(event) {
        logger.log('üìÖ –í—ã–±—Ä–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ:', event.name);
        
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–º–µ–Ω–∞
            const action = event.setlistId ? '–∑–∞–º–µ–Ω–∞' : '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ';
            logger.log(`üìÖ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ${action} —Å–µ—Ç-–ª–∏—Å—Ç–∞`);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.close();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç-–ª–∏—Å—Ç –≤ —Å–æ–±—ã—Ç–∏–∏
            await this.updateEventSetlist(event.id, this.setlistData.id, this.setlistData.name);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            const message = event.setlistId 
                ? `‚úÖ –°–µ—Ç-–ª–∏—Å—Ç –∑–∞–º–µ–Ω–µ–Ω –≤ —Å–æ–±—ã—Ç–∏–∏ "${event.name}"`
                : `‚úÖ –°–µ—Ç-–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ–±—ã—Ç–∏–µ "${event.name}"`;
            window.showNotification(message, 'success');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error);
            window.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è', 'error');
        }
    }
    
    async updateEventSetlist(eventId, setlistId, setlistName) {
        try {
            const { updateEventSetlistApi } = await import('../events/eventsApi.js');
            await updateEventSetlistApi(eventId, setlistId, setlistName);
            logger.log('‚úÖ –°–µ—Ç-–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–æ–±—ã—Ç–∏–∏');
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç-–ª–∏—Å—Ç–∞:', error);
            throw error;
        }
    }
    
    createNewEvent() {
        logger.log('üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
        this.close();
        
        if (this.onEventSelected) {
            this.onEventSelected('create', null, this.setlistData, this.selectedDate);
        }
    }
    
    show() {
        if (this.modal) {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                this.modal.classList.add('show');
            }, 10);
        }
    }
    
    close() {
        if (this.modal) {
            this.modal.classList.remove('show');
            
            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Escape
            if (this.handleEscape) {
                document.removeEventListener('keydown', this.handleEscape);
            }
            
            // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                if (this.modal) {
                    this.modal.remove();
                    this.modal = null;
                }
            }, 300);
        }
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
export function getEventSelectorModal() {
    if (!modalInstance) {
        modalInstance = new EventSelectorModal();
    }
    return modalInstance;
}

export default EventSelectorModal;