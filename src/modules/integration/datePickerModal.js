/**
 * @fileoverview –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç-–ª–∏—Å—Ç–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
 * @module DatePickerModal
 */

import logger from '../../utils/logger.js';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
 */
class DatePickerModal {
    constructor() {
        this.modal = null;
        this.onDateSelected = null;
        this.setlistData = null;
        this.selectedDate = null;
        this.currentDate = new Date();
        this.today = new Date();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    init() {
        this.createModal();
        this.attachEventListeners();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    createModal() {
        const modalHTML = `
            <div id="date-picker-modal" class="global-overlay">
                <div class="overlay-content date-picker-modal">
                    <button class="modal-close-btn" aria-label="–ó–∞–∫—Ä—ã—Ç—å">
                        <i class="fas fa-times"></i>
                    </button>
                    
                    <h2 class="modal-title">–î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω</h2>
                    
                    <div class="setlist-name-display" id="modal-setlist-name"></div>
                    
                    <div class="calendar-container">
                        <div class="calendar-header">
                            <button class="calendar-nav-btn" id="prevMonth">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                            <h3 class="calendar-month" id="calendarMonth"></h3>
                            <button class="calendar-nav-btn" id="nextMonth">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>
                        
                        <div class="calendar-weekdays">
                            <div class="weekday">–ü–Ω</div>
                            <div class="weekday">–í—Ç</div>
                            <div class="weekday">–°—Ä</div>
                            <div class="weekday">–ß—Ç</div>
                            <div class="weekday">–ü—Ç</div>
                            <div class="weekday">–°–±</div>
                            <div class="weekday">–í—Å</div>
                        </div>
                        
                        <div class="calendar-days" id="calendarDays"></div>
                    </div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        this.modal = document.getElementById('date-picker-modal');
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
     */
    getTodayDate() {
        const today = new Date();
        return today.toISOString().split('T')[0];
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        const modal = this.modal;
        const closeBtn = modal.querySelector('.modal-close-btn');
        const prevMonthBtn = modal.querySelector('#prevMonth');
        const nextMonthBtn = modal.querySelector('#nextMonth');
        const overlay = modal;
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        closeBtn.addEventListener('click', () => this.close());
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
        overlay.addEventListener('click', (e) => {
            if (e.target === overlay) {
                this.close();
            }
        });
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        prevMonthBtn.addEventListener('click', () => {
            this.currentDate.setMonth(this.currentDate.getMonth() - 1);
            this.renderCalendar();
        });
        
        nextMonthBtn.addEventListener('click', () => {
            this.currentDate.setMonth(this.currentDate.getMonth() + 1);
            this.renderCalendar();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        this.escapeHandler = (e) => {
            if (e.key === 'Escape') {
                this.close();
            }
        };
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     */
    renderCalendar() {
        const year = this.currentDate.getFullYear();
        const month = this.currentDate.getMonth();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞
        const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                          '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
        const monthTitle = this.modal.querySelector('#calendarMonth');
        monthTitle.textContent = `${monthNames[month]} ${year}`;
        
        // –û—á–∏—â–∞–µ–º –¥–Ω–∏
        const calendarDays = this.modal.querySelector('#calendarDays');
        calendarDays.innerHTML = '';
        
        // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        
        // –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è (0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        let startDay = firstDay.getDay();
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0
        startDay = startDay === 0 ? 6 : startDay - 1;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
        for (let i = 0; i < startDay; i++) {
            const emptyDay = document.createElement('div');
            emptyDay.className = 'calendar-day empty';
            calendarDays.appendChild(emptyDay);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
        for (let day = 1; day <= lastDay.getDate(); day++) {
            const dayEl = document.createElement('div');
            dayEl.className = 'calendar-day';
            dayEl.textContent = day;
            
            const date = new Date(year, month, day);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º
            if (this.isToday(date)) {
                dayEl.classList.add('today');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –ø—Ä–æ—à–µ–¥—à–µ–π
            if (this.isPastDate(date)) {
                dayEl.classList.add('past');
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç
                dayEl.addEventListener('click', () => this.selectDate(date));
            }
            
            calendarDays.appendChild(dayEl);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
     */
    isToday(date) {
        const today = this.today;
        return date.getDate() === today.getDate() &&
               date.getMonth() === today.getMonth() &&
               date.getFullYear() === today.getFullYear();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –ø—Ä–æ—à–µ–¥—à–µ–π
     */
    isPastDate(date) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        return date < today;
    }
    
    /**
     * –í—ã–±–æ—Ä –¥–∞—Ç—ã
     */
    selectDate(date) {
        this.selectedDate = date;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const formattedDate = `${year}-${month}-${day}`;
        
        // –í—ã–∑—ã–≤–∞–µ–º callback –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (this.onDateSelected) {
            this.onDateSelected(formattedDate, this.setlistData);
        }
        
        this.close();
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     * @param {Object} setlistData - –î–∞–Ω–Ω—ã–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞
     * @param {Function} onDateSelected - Callback –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã
     */
    open(setlistData, onDateSelected) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω–æ –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (!this.modal) {
            logger.warn('üìÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º...');
            this.init();
        }
        
        this.setlistData = setlistData;
        this.onDateSelected = onDateSelected;
        this.selectedDate = null;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞
        const setlistNameEl = this.modal.querySelector('#modal-setlist-name');
        if (setlistNameEl) {
            setlistNameEl.textContent = setlistData.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        this.currentDate = new Date();
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        this.renderCalendar();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.modal.classList.add('show');
        document.addEventListener('keydown', this.escapeHandler);
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –¥–∞—Ç—ã
        setTimeout(() => dateInput.focus(), 100);
        
        logger.log('üìÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–æ –¥–ª—è —Å–µ—Ç-–ª–∏—Å—Ç–∞:', setlistData.name);
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    close() {
        this.modal.classList.remove('show');
        document.removeEventListener('keydown', this.escapeHandler);
        
        // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        this.setlistData = null;
        this.onDateSelected = null;
        this.selectedDate = null;
        
        logger.log('üìÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
let datePickerInstance = null;

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
 * @returns {DatePickerModal}
 */
export function getDatePickerModal() {
    if (!datePickerInstance) {
        datePickerInstance = new DatePickerModal();
        datePickerInstance.init();
    }
    return datePickerInstance;
}