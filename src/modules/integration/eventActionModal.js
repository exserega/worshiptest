/**
 * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–±—ã—Ç–∏–µ–º
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —É–∂–µ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏–µ
 */

import logger from '../../utils/logger.js';

class EventActionModal {
    constructor() {
        this.modal = null;
        this.onActionSelected = null;
        this.eventData = null;
        this.setlistData = null;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    init() {
        if (!this.modal) {
            this.createModal();
            this.attachEventListeners();
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    createModal() {
        const modalHTML = `
            <div id="event-action-modal" class="global-overlay">
                <div class="overlay-content event-action-modal">
                    
                    <div class="modal-header">
                        <i class="fas fa-calendar-check"></i>
                        <h2 class="modal-title">–°–æ–±—ã—Ç–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</h2>
                    </div>
                    
                    <div class="modal-body">
                        <div class="event-info">
                            <div class="event-name" id="existing-event-name"></div>
                            <div class="event-time" id="existing-event-time"></div>
                            <div class="event-setlist" id="existing-event-setlist"></div>
                        </div>
                        
                        <div class="action-question">
                            <p>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?</p>
                        </div>
                        
                        <div class="action-buttons">
                            <button class="action-btn replace-setlist-btn">
                                <i class="fas fa-sync-alt"></i>
                                <span>–ó–∞–º–µ–Ω–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç</span>
                                <small id="new-setlist-name"></small>
                            </button>
                            
                            <button class="action-btn create-new-btn">
                                <i class="fas fa-plus-circle"></i>
                                <span>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ</span>

                            </button>
                            
                            <button class="action-btn cancel-btn">
                                <i class="fas fa-times-circle"></i>
                                <span>–û—Ç–º–µ–Ω–∞</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        this.modal = document.getElementById('event-action-modal');
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        const modal = this.modal;
        const replaceBtn = modal.querySelector('.replace-setlist-btn');
        const createNewBtn = modal.querySelector('.create-new-btn');
        const cancelBtn = modal.querySelector('.cancel-btn');
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        cancelBtn.addEventListener('click', () => this.close());
        
        // –ó–∞–º–µ–Ω–∞ —Å–µ—Ç-–ª–∏—Å—Ç–∞
        replaceBtn.addEventListener('click', () => {
            if (this.onActionSelected) {
                this.onActionSelected('replace', this.eventData, this.setlistData);
            }
            this.close();
        });
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        createNewBtn.addEventListener('click', () => {
            if (this.onActionSelected) {
                this.onActionSelected('create', this.eventData, this.setlistData);
            }
            this.close();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.close();
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        this.escapeHandler = (e) => {
            if (e.key === 'Escape') {
                this.close();
            }
        };
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     * @param {Object} eventData - –î–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
     * @param {Object} setlistData - –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞
     * @param {Function} onActionSelected - Callback –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–µ–π—Å—Ç–≤–∏—è
     */
    open(eventData, setlistData, onActionSelected) {
        if (!this.modal) {
            this.init();
        }
        
        this.eventData = eventData;
        this.setlistData = setlistData;
        this.onActionSelected = onActionSelected;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        const eventNameEl = this.modal.querySelector('#existing-event-name');
        const eventTimeEl = this.modal.querySelector('#existing-event-time');
        const eventSetlistEl = this.modal.querySelector('#existing-event-setlist');
        const newSetlistNameEl = this.modal.querySelector('#new-setlist-name');
        
        eventNameEl.textContent = eventData.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        eventTimeEl.textContent = `–í—Ä–µ–º—è: ${eventData.time}`;
        
        if (eventData.hasSetlist) {
            eventSetlistEl.innerHTML = `<i class="fas fa-music"></i> –°–µ—Ç-–ª–∏—Å—Ç —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω`;
            eventSetlistEl.classList.add('has-setlist');
        } else {
            eventSetlistEl.innerHTML = `<i class="fas fa-exclamation-circle"></i> –°–µ—Ç-–ª–∏—Å—Ç –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω`;
            eventSetlistEl.classList.add('no-setlist');
        }
        
        newSetlistNameEl.textContent = setlistData.name;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.modal.classList.add('show');
        document.addEventListener('keydown', this.escapeHandler);
        
        logger.log('üìÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–∫—Ä—ã—Ç–æ');
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    close() {
        if (this.modal) {
            this.modal.classList.remove('show');
        }
        document.removeEventListener('keydown', this.escapeHandler);
    }
}

// Singleton
let instance = null;

export function getEventActionModal() {
    if (!instance) {
        instance = new EventActionModal();
    }
    return instance;
}