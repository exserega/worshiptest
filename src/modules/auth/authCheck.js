// ====================================
// üîí AUTH CHECK MODULE
// ====================================
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º

import { onAuthStateChanged } from 'firebase/auth';
import { doc, getDoc } from 'firebase/firestore';
import { auth, db } from '../../js/firebase/config.js';

// ====================================
// STATE
// ====================================

let currentUser = null;
let authCheckPromise = null;

// ====================================
// AUTH CHECK FUNCTION
// ====================================

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<{user: Object|null, isAuthenticated: boolean}>}
 */
export function checkAuth() {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–∏—Å –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∏–¥–µ—Ç
    if (authCheckPromise) return authCheckPromise;
    
    authCheckPromise = new Promise((resolve) => {
        const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
            if (firebaseUser) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore
                    const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));
                    
                    if (userDoc.exists()) {
                        currentUser = {
                            ...userDoc.data(),
                            uid: firebaseUser.uid,
                            firebaseUser
                        };
                        
                        console.log('üîê User authenticated:', currentUser.email || currentUser.phone);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if (currentUser.status === 'banned') {
                            console.warn('üö´ User is banned');
                            await auth.signOut();
                            resolve({ user: null, isAuthenticated: false, isBanned: true });
                        } else {
                            resolve({ user: currentUser, isAuthenticated: true });
                        }
                    } else {
                        console.warn('‚ö†Ô∏è User profile not found in Firestore');
                        resolve({ user: null, isAuthenticated: false });
                    }
                } catch (error) {
                    console.error('Error fetching user profile:', error);
                    resolve({ user: null, isAuthenticated: false });
                }
            } else {
                console.log('üîí No authenticated user');
                resolve({ user: null, isAuthenticated: false });
            }
            
            unsubscribe();
        });
    });
    
    return authCheckPromise;
}

// ====================================
// ACCESS CONTROL
// ====================================

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Å—É—Ä—Å—É
 * @param {string} resource - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ (setlists, users, branches, songs)
 * @param {string} action - –î–µ–π—Å—Ç–≤–∏–µ (create, read, update, delete)
 * @returns {boolean}
 */
export function hasAccess(resource, action) {
    if (!currentUser) return false;
    
    // –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if (currentUser.role === 'admin') return true;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userPermissions = {
        setlists: ['read'],
        songs: ['read'],
        users: [],
        branches: []
    };
    
    return userPermissions[resource]?.includes(action) || false;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
 * @returns {boolean}
 */
export function isAdmin() {
    return currentUser?.role === 'admin';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ —Ñ–∏–ª–∏–∞–ª—É
 * @param {string} branchId - ID —Ñ–∏–ª–∏–∞–ª–∞
 * @returns {boolean}
 */
export function belongsToBranch(branchId) {
    if (!currentUser) return false;
    if (isAdmin()) return true; // –ê–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã
    return currentUser.branchId === branchId;
}

// ====================================
// USER GETTERS
// ====================================

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Object|null}
 */
export function getCurrentUser() {
    return currentUser;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {string|null}
 */
export function getCurrentBranchId() {
    return currentUser?.branchId || null;
}

// ====================================
// AUTH GATE
// ====================================

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
 * @param {Object} options - –û–ø—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {boolean} options.requireAuth - –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 * @param {boolean} options.requireBranch - –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ —Ñ–∏–ª–∏–∞–ª—É
 * @param {boolean} options.requireAdmin - –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
 * @param {string} options.redirectTo - –ö—É–¥–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ—Å—Ç—É–ø–∞
 */
export async function initAuthGate(options = {}) {
    const {
        requireAuth = true,
        requireBranch = false,
        requireAdmin = false,
        redirectTo = '/login.html'
    } = options;
    
    console.log('üîí Initializing auth gate...');
    
    try {
        const { user, isAuthenticated, isBanned } = await checkAuth();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (requireAuth && !isAuthenticated) {
            console.log('üö´ Authentication required, redirecting to login...');
            window.location.href = redirectTo;
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
        if (isBanned) {
            console.log('üö´ User is banned');
            showAuthMessage('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª–∏–∞–ª–∞
        if (requireBranch && user && !user.branchId) {
            console.log('‚ö†Ô∏è User not assigned to any branch');
            showAuthMessage('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–∏–ª–∏–∞–ª—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
        if (requireAdmin && user && user.role !== 'admin') {
            console.log('üö´ Admin access required');
            window.location.href = '/';
            return false;
        }
        
        console.log('‚úÖ Auth gate passed');
        return true;
    } catch (error) {
        console.error('Auth gate error:', error);
        if (requireAuth) {
            window.location.href = redirectTo;
        }
        return false;
    }
}

// ====================================
// UI HELPERS
// ====================================

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {string} message
 */
function showAuthMessage(message) {
    // –°–æ–∑–¥–∞–µ–º overlay —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    const overlay = document.createElement('div');
    overlay.className = 'auth-message-overlay';
    overlay.innerHTML = `
        <div class="auth-message-card">
            <i class="fas fa-exclamation-circle"></i>
            <p>${message}</p>
            <button onclick="window.location.href='/login.html'">–í–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ</button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if (!document.getElementById('auth-message-styles')) {
        const style = document.createElement('style');
        style.id = 'auth-message-styles';
        style.textContent = `
            .auth-message-overlay {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.8);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10000;
            }
            .auth-message-card {
                background: var(--bg-secondary);
                padding: 40px;
                border-radius: 12px;
                text-align: center;
                max-width: 400px;
            }
            .auth-message-card i {
                font-size: 48px;
                color: var(--accent-warning);
                margin-bottom: 20px;
            }
            .auth-message-card p {
                margin: 0 0 30px;
                color: var(--text-primary);
                line-height: 1.5;
            }
            .auth-message-card button {
                background: var(--accent-primary);
                color: white;
                border: none;
                padding: 12px 30px;
                border-radius: 8px;
                font-size: 16px;
                cursor: pointer;
            }
        `;
        document.head.appendChild(style);
    }
    
    document.body.appendChild(overlay);
}

// ====================================
// LOGOUT FUNCTION
// ====================================

/**
 * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 */
export async function logout() {
    try {
        await auth.signOut();
        currentUser = null;
        window.location.href = '/login.html';
    } catch (error) {
        console.error('Logout error:', error);
    }
}