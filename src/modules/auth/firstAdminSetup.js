// First Admin Setup Module
// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

const db = firebase.firestore();
const auth = firebase.auth();

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ
 */
export async function hasAdmins() {
    try {
        const adminsSnapshot = await db.collection('users')
            .where('role', '==', 'admin')
            .where('status', '==', 'active')  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
            .limit(1)
            .get();
            
        return !adminsSnapshot.empty;
    } catch (error) {
        console.error('Error checking admins:', error);
        return false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
 */
export async function isFirstUser(userId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        const usersSnapshot = await db.collection('users')
            .orderBy('createdAt', 'asc')
            .limit(1)
            .get();
            
        if (usersSnapshot.empty) return false;
        
        const firstUser = usersSnapshot.docs[0];
        return firstUser.id === userId;
    } catch (error) {
        console.error('Error checking first user:', error);
        return false;
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
export async function setupFirstAdmin(userId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω—ã
        const adminsExist = await hasAdmins();
        if (adminsExist) {
            throw new Error('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–º
        const isFirst = await isFirstUser(userId);
        if (!isFirst) {
            throw new Error('–¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª–∏–∞–ª
        const branchData = {
            name: '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª–∏–∞–ª',
            location: '–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å',
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            createdBy: userId,
            memberCount: 1,
            isDefault: true
        };
        
        const branchRef = await db.collection('branches').add(branchData);
        console.log('üìç First branch created:', branchRef.id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.collection('users').doc(userId).update({
            role: 'admin',
            status: 'active',
            branchId: branchRef.id,
            isFounder: true,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        console.log('‚úÖ First admin setup completed');
        return {
            success: true,
            branchId: branchRef.id
        };
        
    } catch (error) {
        console.error('Error setting up first admin:', error);
        throw error;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
export async function checkAndOfferAdminSetup() {
    const user = auth.currentUser;
    if (!user) return { shouldOffer: false };
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω—ã
        const adminsExist = await hasAdmins();
        if (adminsExist) {
            return { shouldOffer: false };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–º
        const isFirst = await isFirstUser(user.uid);
        if (!isFirst) {
            return { shouldOffer: false };
        }
        
        return {
            shouldOffer: true,
            userId: user.uid,
            userEmail: user.email
        };
        
    } catch (error) {
        console.error('Error checking admin setup offer:', error);
        return { shouldOffer: false };
    }
}

export default {
    hasAdmins,
    isFirstUser,
    setupFirstAdmin,
    checkAndOfferAdminSetup
};