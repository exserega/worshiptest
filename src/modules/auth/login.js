// ====================================
// üîê LOGIN MODULE
// ====================================
// –ú–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: Email, Google, Apple, Guest
// –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Å—Ç–∞—Ç—É—Å 'pending'
// ====================================

import logger from '../../utils/logger.js';

// Firebase references
const auth = window.firebase.auth();
const db = window.firebase.firestore();

// DOM elements
const elements = {
    // Screens
    mainAuth: document.getElementById('main-auth'),
    emailForm: document.getElementById('email-form'),
    registerForm: document.getElementById('register-form'),
    
    // Buttons
    googleBtn: document.getElementById('google-login-btn'),
    emailBtn: document.getElementById('email-login-btn'),
    appleBtn: document.getElementById('apple-login-btn'),
    guestBtn: document.getElementById('guest-login-btn'),
    showRegisterBtn: document.getElementById('show-register'),
    backFromEmail: document.getElementById('back-from-email'),
    backFromRegister: document.getElementById('back-from-register'),
    
    // Forms
    loginForm: document.getElementById('login-form'),
    registerFormElement: document.getElementById('register-form-element'),
    
    // Messages
    authMessage: document.getElementById('auth-message'),
    authLoading: document.getElementById('auth-loading')
};

// ====================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ====================================

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
function showMessage(message, type = 'error') {
    elements.authMessage.textContent = message;
    elements.authMessage.className = `auth-message ${type}`;
    elements.authMessage.style.display = 'block';
    
    setTimeout(() => {
        elements.authMessage.style.display = 'none';
    }, 5000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function showLoading(show = true) {
    elements.authLoading.style.display = show ? 'flex' : 'none';
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenId) {
    document.querySelectorAll('.auth-screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    const screen = document.getElementById(screenId);
    if (screen) {
        screen.classList.add('active');
    }
}

// ====================================
// –°–û–ó–î–ê–ù–ò–ï/–û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
// ====================================

async function createOrUpdateUser(user, additionalData = {}) {
    const userRef = db.collection('users').doc(user.uid);
    
    try {
        const doc = await userRef.get();
        const now = new Date();
        
        if (!doc.exists) {
            // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const userData = {
                email: user.email || null,
                name: additionalData.name || user.displayName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                phone: user.phoneNumber || null,
                status: additionalData.isGuest ? 'guest' : 'pending', // –ì–æ—Å—Ç—å –∏–ª–∏ pending
                role: 'user',
                createdAt: now,
                updatedAt: now,
                lastLogin: now,
                photoURL: user.photoURL || null,
                ...additionalData
            };
            
            await userRef.set(userData);
            logger.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', userData);
        } else {
            // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ–±–Ω–æ–≤–ª—è–µ–º lastLogin
            await userRef.update({
                lastLogin: now,
                updatedAt: now
            });
            logger.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
        }
        
        return true;
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error;
    }
}

// ====================================
// –ú–ï–¢–û–î–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
// ====================================

// Google Login
async function handleGoogleLogin() {
    showLoading();
    
    try {
        const provider = new firebase.auth.GoogleAuthProvider();
        const result = await auth.signInWithPopup(provider);
        
        await createOrUpdateUser(result.user);
        
        logger.log('‚úÖ Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        showMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
        
        setTimeout(() => {
            window.location.href = '/';
        }, 1000);
        
    } catch (error) {
        logger.error('‚ùå Google login error:', error);
        showMessage(getErrorMessage(error.code));
    } finally {
        showLoading(false);
    }
}

// Apple Login
async function handleAppleLogin() {
    showLoading();
    
    try {
        const provider = new firebase.auth.OAuthProvider('apple.com');
        provider.addScope('email');
        provider.addScope('name');
        
        const result = await auth.signInWithPopup(provider);
        
        await createOrUpdateUser(result.user);
        
        logger.log('‚úÖ Apple –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        showMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
        
        setTimeout(() => {
            window.location.href = '/';
        }, 1000);
        
    } catch (error) {
        logger.error('‚ùå Apple login error:', error);
        showMessage(getErrorMessage(error.code));
    } finally {
        showLoading(false);
    }
}

// Guest Login
async function handleGuestLogin() {
    showLoading();
    
    try {
        // –°–æ–∑–¥–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const result = await auth.signInAnonymously();
        
        // –ù–ï —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î –¥–ª—è –≥–æ—Å—Ç–µ–π!
        // –ì–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω—ã–º–∏
        
        logger.log('‚úÖ –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
        showMessage('–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –≥–æ—Å—Ç—å', 'success');
        
        setTimeout(() => {
            window.location.href = '/';
        }, 1000);
        
    } catch (error) {
        logger.error('‚ùå Guest login error:', error);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–Ω–æ–Ω–∏–º–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (error.code === 'auth/admin-restricted-operation' || 
            error.code === 'auth/operation-not-allowed') {
            showMessage('–ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ email –∏–ª–∏ Google –¥–ª—è –≤—Ö–æ–¥–∞.', 'error');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º email –≤—Ö–æ–¥
            setTimeout(() => {
                if (confirm('–•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ email?')) {
                    showScreen('email-form');
                }
            }, 1000);
        } else {
            showMessage(getErrorMessage(error.code) || '–û—à–∏–±–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±.');
        }
    } finally {
        showLoading(false);
    }
}

// Email Login
async function handleEmailLogin(e) {
    e.preventDefault();
    showLoading();
    
    const email = e.target.email.value;
    const password = e.target.password.value;
    
    try {
        const result = await auth.signInWithEmailAndPassword(email, password);
        
        await createOrUpdateUser(result.user);
        
        logger.log('‚úÖ Email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        showMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
        
        setTimeout(() => {
            window.location.href = '/';
        }, 1000);
        
    } catch (error) {
        logger.error('‚ùå Email login error:', error);
        showMessage(getErrorMessage(error.code));
    } finally {
        showLoading(false);
    }
}

// Register
async function handleRegister(e) {
    e.preventDefault();
    showLoading();
    
    const name = e.target.name.value;
    const email = e.target.email.value;
    const password = e.target.password.value;
    const confirmPassword = e.target.confirmPassword.value;
    
    if (password !== confirmPassword) {
        showMessage('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        showLoading(false);
        return;
    }
    
    try {
        const result = await auth.createUserWithEmailAndPassword(email, password);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º displayName
        await result.user.updateProfile({
            displayName: name
        });
        
        await createOrUpdateUser(result.user, { name });
        
        logger.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        showMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', 'success');
        
        setTimeout(() => {
            window.location.href = '/';
        }, 2000);
        
    } catch (error) {
        logger.error('‚ùå Register error:', error);
        showMessage(getErrorMessage(error.code));
    } finally {
        showLoading(false);
    }
}

// ====================================
// –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
// ====================================

function getErrorMessage(errorCode) {
    const errors = {
        'auth/email-already-in-use': 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è',
        'auth/invalid-email': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email',
        'auth/user-not-found': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        'auth/wrong-password': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
        'auth/weak-password': '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)',
        'auth/popup-closed-by-user': '–í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω',
        'auth/cancelled-popup-request': '–í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω',
        'auth/account-exists-with-different-credential': '–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º –≤—Ö–æ–¥–∞',
        'auth/network-request-failed': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
        'auth/too-many-requests': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
        'default': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
    };
    return errors[errorCode] || errors.default;
}

// ====================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ====================================

function init() {
    // Google login
    if (elements.googleBtn) {
        elements.googleBtn.addEventListener('click', handleGoogleLogin);
    }
    
    // Apple login
    if (elements.appleBtn) {
        elements.appleBtn.addEventListener('click', handleAppleLogin);
    }
    
    // Guest login
    if (elements.guestBtn) {
        elements.guestBtn.addEventListener('click', handleGuestLogin);
    }
    
    // Email button
    if (elements.emailBtn) {
        elements.emailBtn.addEventListener('click', () => {
            showScreen('email-form');
        });
    }
    
    // Show register
    if (elements.showRegisterBtn) {
        elements.showRegisterBtn.addEventListener('click', (e) => {
            e.preventDefault();
            showScreen('register-form');
        });
    }
    
    // Back buttons
    if (elements.backFromEmail) {
        elements.backFromEmail.addEventListener('click', () => {
            showScreen('main-auth');
        });
    }
    
    if (elements.backFromRegister) {
        elements.backFromRegister.addEventListener('click', () => {
            showScreen('main-auth');
        });
    }
    
    // Forms
    if (elements.loginForm) {
        elements.loginForm.addEventListener('submit', handleEmailLogin);
    }
    
    if (elements.registerFormElement) {
        elements.registerFormElement.addEventListener('submit', handleRegister);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    auth.onAuthStateChanged(user => {
        if (user && window.location.pathname.includes('login.html')) {
            window.location.href = '/';
        }
    });
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
} else {
    init();
}

logger.log('üîê Login module initialized');