// ====================================
// üîê LOGIN MODULE
// ====================================
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

// Firebase imports
const auth = firebase.auth();
const db = firebase.firestore();
const GoogleAuthProvider = firebase.auth.GoogleAuthProvider;
const RecaptchaVerifier = firebase.auth.RecaptchaVerifier;

// ====================================
// DOM ELEMENTS
// ====================================

const screens = {
    main: document.getElementById('main-auth'),
    email: document.getElementById('email-form'),
    register: document.getElementById('register-form'),
    phone: document.getElementById('phone-form')
};

const forms = {
    login: document.getElementById('login-form'),
    register: document.getElementById('register-form-element'),
    phone: document.getElementById('phone-form-element')
};

const elements = {
    googleBtn: document.getElementById('google-login-btn'),
    phoneBtn: document.getElementById('phone-login-btn'),
    emailBtn: document.getElementById('email-login-btn'),
    showRegister: document.getElementById('show-register'),
    backFromEmail: document.getElementById('back-from-email'),
    backFromRegister: document.getElementById('back-from-register'),
    backFromPhone: document.getElementById('back-from-phone'),
    verifyCodeBtn: document.getElementById('verify-code-btn'),
    verificationGroup: document.getElementById('verification-code-group'),
    authMessage: document.getElementById('auth-message'),
    loading: document.getElementById('auth-loading')
};

// ====================================
// STATE
// ====================================

let phoneConfirmationResult = null;
let recaptchaVerifier = null;
let inviteId = null;

// Check for invite in URL
const urlParams = new URLSearchParams(window.location.search);
inviteId = urlParams.get('invite');

if (inviteId) {
    console.log('Invite ID found:', inviteId);
    // Show invite message
    setTimeout(() => {
        showMessage('You have been invited! Please sign up to accept the invitation.', 'info');
    }, 500);
}

// ====================================
// UTILITY FUNCTIONS
// ====================================

function showLoading(show = true) {
    elements.loading.style.display = show ? 'flex' : 'none';
}

function showMessage(message, type = 'error') {
    elements.authMessage.textContent = message;
    elements.authMessage.className = `auth-message show ${type}`;
    
    setTimeout(() => {
        elements.authMessage.classList.remove('show');
    }, 5000);
}

function clearMessages() {
    elements.authMessage.classList.remove('show');
    elements.authMessage.textContent = '';
}

function switchForm(screenName) {
    // Hide all screens
    Object.values(screens).forEach(screen => {
        screen.classList.remove('active');
    });
    
    // Show requested screen
    if (screens[screenName]) {
        screens[screenName].classList.add('active');
    }
    
    clearMessages();
}

// ====================================
// CREATE USER PROFILE
// ====================================

async function createUserProfile(user, additionalData = {}) {
    const userRef = db.collection('users').doc(user.uid);
    
    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
    const existingDoc = await userRef.get();
    if (existingDoc.exists) {
        console.warn('‚ö†Ô∏è Profile already exists, skipping creation');
        return existingDoc.data();
    }
    
    // Check if there's an invite
    if (inviteId) {
        try {
            const inviteDoc = await db.collection('invites').doc(inviteId).get();
            
            if (inviteDoc.exists) {
                const invite = inviteDoc.data();
                
                // Validate invite
                if (invite.status === 'pending' && 
                    invite.email === user.email && 
                    new Date(invite.expiresAt.toDate()) > new Date()) {
                    
                    // Apply invite role
                    additionalData.role = invite.role;
                    additionalData.status = 'active';
                    additionalData.invitedBy = invite.invitedBy;
                    
                    // Mark invite as accepted
                    await db.collection('invites').doc(inviteId).update({
                        status: 'accepted',
                        acceptedBy: user.uid,
                        acceptedAt: firebase.firestore.FieldValue.serverTimestamp()
                    });
                    
                    console.log('Invite accepted successfully');
                }
            }
        } catch (error) {
            console.error('Error processing invite:', error);
        }
    }
    
    const userData = {
        id: user.uid,
        name: user.displayName || additionalData.name || '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        email: user.email,
        phone: user.phoneNumber,
        photoURL: user.photoURL,
        role: additionalData.role || 'user',
        branchId: null,
        status: additionalData.status || 'pending', // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
        updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
        ...additionalData
    };
    
    await userRef.set(userData, { merge: true });
}

// ====================================
// AUTH HANDLERS
// ====================================

// Email/Password Login
async function handleEmailLogin(e) {
    e.preventDefault();
    showLoading();
    
    const email = e.target.email.value;
    const password = e.target.password.value;
    
    try {
        const result = await auth.signInWithEmailAndPassword(email, password);
        console.log('üîê Login successful:', result.user.email);
        
        // Redirect to main app
        window.location.href = '/';
    } catch (error) {
        console.error('Login error:', error);
        showMessage(getErrorMessage(error.code));
    } finally {
        showLoading(false);
    }
}

// Registration
async function handleRegister(e) {
    e.preventDefault();
    showLoading();
    
    const name = e.target.name.value;
    const email = e.target.email.value;
    const password = e.target.password.value;
    const confirmPassword = e.target.confirmPassword.value;
    
    if (password !== confirmPassword) {
        showMessage('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        showLoading(false);
        return;
    }
    
    try {
        const result = await auth.createUserWithEmailAndPassword(email, password);
        
        // Update display name
        await result.user.updateProfile({ displayName: name });
        
        // Create user profile
        await createUserProfile(result.user, { name });
        
        console.log('üîê Registration successful:', result.user.email);
        showMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...', 'success');
        
        setTimeout(() => {
            window.location.href = '/';
        }, 2000);
    } catch (error) {
        console.error('Registration error:', error);
        showMessage(getErrorMessage(error.code));
    } finally {
        showLoading(false);
    }
}

// Google Login
async function handleGoogleLogin() {
    showLoading();
    
    try {
        const provider = new firebase.auth.GoogleAuthProvider();
        const result = await auth.signInWithPopup(provider);
        
        // Create/update user profile
        await createUserProfile(result.user);
        
        console.log('üîê Google login successful:', result.user.email);
        window.location.href = '/';
    } catch (error) {
        console.error('Google login error:', error);
        showMessage(getErrorMessage(error.code));
        showLoading(false);
    }
}

// Phone Login - Step 1: Send SMS
async function handlePhoneSend(e) {
    e.preventDefault();
    showLoading();
    
    const phoneNumber = e.target.phone.value;
    
    try {
        // Initialize reCAPTCHA
        if (!recaptchaVerifier) {
            recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container', {
                size: 'invisible', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–≤–∏–¥–∏–º—É—é reCAPTCHA
                callback: (response) => {
                    console.log('reCAPTCHA solved:', response);
                },
                'error-callback': (error) => {
                    console.error('reCAPTCHA error:', error);
                    showMessage('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            });
            
            // –†–µ–Ω–¥–µ—Ä–∏–º reCAPTCHA
            try {
                await recaptchaVerifier.render();
                console.log('reCAPTCHA rendered successfully');
            } catch (renderError) {
                console.error('reCAPTCHA render error:', renderError);
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
            }
        }
        
        console.log('Sending SMS to:', phoneNumber);
        phoneConfirmationResult = await auth.signInWithPhoneNumber(phoneNumber, recaptchaVerifier);
        
        console.log('üì± SMS sent to:', phoneNumber);
        showMessage('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω', 'success');
        
        // Show verification code input
        elements.verificationGroup.style.display = 'block';
    } catch (error) {
        console.error('Phone login error:', error);
        console.error('Error code:', error.code);
        console.error('Error message:', error.message);
        
        // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        if (error.code === 'auth/missing-client-identifier') {
            showMessage('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –î–æ–±–∞–≤—å—Ç–µ –¥–æ–º–µ–Ω –≤ Firebase Console');
        } else if (error.code === 'auth/captcha-check-failed') {
            showMessage('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
        } else {
            showMessage(getErrorMessage(error.code) || error.message);
        }
        
        // Reset reCAPTCHA on error
        if (recaptchaVerifier) {
            recaptchaVerifier.clear();
            recaptchaVerifier = null;
        }
    } finally {
        showLoading(false);
    }
}

// Phone Login - Step 2: Verify Code
async function handlePhoneVerify() {
    showLoading();
    
    const code = document.getElementById('verification-code').value;
    
    if (!phoneConfirmationResult) {
        showMessage('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–¥');
        showLoading(false);
        return;
    }
    
    try {
        const result = await phoneConfirmationResult.confirm(code);
        
        // Create user profile
        await createUserProfile(result.user);
        
        console.log('üì± Phone login successful:', result.user.phoneNumber);
        window.location.href = '/';
    } catch (error) {
        console.error('Verification error:', error);
        showMessage('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
    } finally {
        showLoading(false);
    }
}

// ====================================
// ERROR MESSAGES
// ====================================

function getErrorMessage(errorCode) {
    const errors = {
        'auth/email-already-in-use': '–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è',
        'auth/invalid-email': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email',
        'auth/weak-password': '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤',
        'auth/user-not-found': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        'auth/wrong-password': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
        'auth/invalid-verification-code': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        'auth/invalid-verification-id': '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫',
        'auth/invalid-phone-number': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        'auth/missing-phone-number': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        'auth/quota-exceeded': '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç SMS. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
        'auth/captcha-check-failed': '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ reCAPTCHA',
        'auth/missing-client-identifier': '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Firebase',
        'auth/invalid-app-credential': '–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É',
        'auth/missing-app-credential': '–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É',
        'auth/too-many-requests': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
        'default': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
    };
    return errors[errorCode] || errors.default;
}

// ====================================
// EVENT LISTENERS
// ====================================

// Form submissions
forms.login.addEventListener('submit', handleEmailLogin);
forms.register.addEventListener('submit', handleRegister);
forms.phone.addEventListener('submit', handlePhoneSend);

// Button clicks
elements.googleBtn.addEventListener('click', handleGoogleLogin);
elements.phoneBtn.addEventListener('click', () => switchForm('phone'));
elements.emailBtn.addEventListener('click', () => switchForm('email'));
elements.showRegister.addEventListener('click', (e) => {
    e.preventDefault();
    switchForm('register');
});

// Back buttons
elements.backFromEmail.addEventListener('click', () => switchForm('main'));
elements.backFromRegister.addEventListener('click', () => switchForm('main'));
elements.backFromPhone.addEventListener('click', () => switchForm('main'));

elements.verifyCodeBtn.addEventListener('click', handlePhoneVerify);

// ====================================
// CHECK AUTH STATE
// ====================================

// Check if we just came from auth redirect
if (sessionStorage.getItem('auth_redirecting') === 'true') {
    console.log('‚ö†Ô∏è Clearing auth redirect flag');
    sessionStorage.removeItem('auth_redirecting');
}

// If already logged in, redirect to main app
let redirecting = false;
let checkingAuth = false;

auth.onAuthStateChanged(async (user) => {
    // –ò–∑–±–µ–≥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    if (checkingAuth || redirecting) return;
    
    if (user) {
        checkingAuth = true;
        console.log('üîê User already logged in:', user.email || user.phoneNumber);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –≤ Firestore
        try {
            const userDoc = await db.collection('users').doc(user.uid).get();
            if (userDoc.exists) {
                const userData = userDoc.data();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (userData.status === 'banned' || userData.status === 'blocked') {
                    console.warn('üö´ User is blocked');
                    await auth.signOut();
                    alert('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
                    checkingAuth = false;
                    return;
                }
                
                console.log('‚úÖ User profile exists, redirecting...');
                redirecting = true;
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ —á—Ç–æ –∏–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç
                sessionStorage.setItem('auth_redirecting', 'true');
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º replace —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                window.location.replace('/');
                    } else {
            console.log('‚ö†Ô∏è User profile not found, creating...');
            
            // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤
            // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å race conditions
            const allUsersQuery = await db.collection('users')
                .limit(1)
                .get();
                
            const isFirstUserEver = allUsersQuery.empty;
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await createUserProfile(user);
            
            // –î–µ–ª–∞–µ–º –∞–¥–º–∏–Ω–æ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
            if (isFirstUserEver) {
                console.log('üåü Very first user in system - setting up as founder');
                await db.collection('users').doc(user.uid).update({
                    role: 'admin',
                    status: 'active',
                    isFounder: true,
                    permissions: ['*']
                });
            } else {
                console.log('üìù Regular user profile created');
            }
            
            console.log('‚úÖ Profile created, redirecting...');
                redirecting = true;
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ —á—Ç–æ –∏–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç
                sessionStorage.setItem('auth_redirecting', 'true');
                window.location.replace('/');
            }
        } catch (error) {
            console.error('Error checking user profile:', error);
            checkingAuth = false;
        }
    }
});

console.log('üîê Login module initialized');