/**
 * API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–Ω—ã–º–∏ —Å–µ—Ç-–ª–∏—Å—Ç–∞–º–∏
 */

import logger from '../../utils/logger.js';
import { db } from '../../../firebase-init.js';
import { getCurrentUser, isUserGuest } from '../auth/authCheck.js';
import { hasLimitedAccess } from '../permissions/permissions.js';

const Timestamp = window.firebase.firestore.Timestamp;
const FieldValue = window.firebase.firestore.FieldValue;

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∞—Ä—Ö–∏–≤–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç
 * @param {Object} setlistData - –î–∞–Ω–Ω—ã–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞
 * @returns {Promise<string>} ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞
 */
export async function createArchiveSetlist(setlistData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (hasLimitedAccess()) {
        if (isUserGuest()) {
            throw new Error('–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
        } else {
            throw new Error('–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.');
        }
    }
    
    const currentUser = getCurrentUser();
    if (!currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }
    
    try {
        const newSetlist = {
            name: setlistData.name || '–ù–æ–≤—ã–π —Å–µ—Ç-–ª–∏—Å—Ç',
            songs: setlistData.songs || [],
            groupIds: setlistData.groupIds || [],
            branchId: currentUser.branchId,
            createdBy: currentUser.uid,
            createdByName: currentUser.name || currentUser.email || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
            createdAt: Timestamp.now(),
            updatedAt: Timestamp.now(),
            isArchived: true,
            notes: setlistData.notes || '',
            tags: setlistData.tags || []
        };
        
        const docRef = await db.collection('archive_setlists').add(newSetlist);
        logger.log('‚úÖ Archive setlist created:', docRef.id);
        
        return docRef.id;
    } catch (error) {
        logger.error('‚ùå Error creating archive setlist:', error);
        throw error;
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç
 * @param {string} setlistId - ID —Å–µ—Ç-–ª–∏—Å—Ç–∞
 * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {Promise<void>}
 */
export async function updateArchiveSetlist(setlistId, updates) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (hasLimitedAccess()) {
        if (isUserGuest()) {
            throw new Error('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
        } else {
            throw new Error('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.');
        }
    }
    
    try {
        const updateData = {
            ...updates,
            updatedAt: Timestamp.now()
        };
        
        await db.collection('archive_setlists').doc(setlistId).update(updateData);
        logger.log('‚úÖ Archive setlist updated:', setlistId);
    } catch (error) {
        logger.error('‚ùå Error updating archive setlist:', error);
        throw error;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç
 * @param {string} setlistId - ID —Å–µ—Ç-–ª–∏—Å—Ç–∞
 * @returns {Promise<void>}
 */
export async function deleteArchiveSetlist(setlistId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (hasLimitedAccess()) {
        if (isUserGuest()) {
            throw new Error('–£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
        } else {
            throw new Error('–£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.');
        }
    }
    
    try {
        await db.collection('archive_setlists').doc(setlistId).delete();
        logger.log('‚úÖ Archive setlist deleted:', setlistId);
    } catch (error) {
        logger.error('‚ùå Error deleting archive setlist:', error);
        throw error;
    }
}

/**
 * –ö–æ–ø–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç –≤ –∞—Ä—Ö–∏–≤
 * @param {string} activeSetlistId - ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞
 * @param {Array} groupIds - ID –≥—Ä—É–ø–ø –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
 * @returns {Promise<string>} ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞
 */
export async function copyToArchive(activeSetlistId, groupIds = []) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç
        const activeDoc = await db.collection('worship_setlists').doc(activeSetlistId).get();
        
        if (!activeDoc.exists) {
            throw new Error('–ê–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const activeData = activeDoc.data();
        
        // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é –∫–æ–ø–∏—é
        const archiveData = {
            name: activeData.name,
            songs: activeData.songs || [],
            groupIds: groupIds,
            originalSetlistId: activeSetlistId,
            copiedAt: Timestamp.now()
        };
        
        return await createArchiveSetlist(archiveData);
    } catch (error) {
        logger.error('‚ùå Error copying to archive:', error);
        throw error;
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã–µ —Å–µ—Ç-–ª–∏—Å—Ç—ã
 * @param {string} branchId - ID —Ñ–∏–ª–∏–∞–ª–∞
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤
 */
export async function loadArchiveSetlists(branchId) {
    try {
        const snapshot = await db.collection('archive_setlists')
            .where('branchId', '==', branchId)
            .orderBy('updatedAt', 'desc')
            .get();
        
        const setlists = [];
        snapshot.forEach(doc => {
            setlists.push({
                id: doc.id,
                ...doc.data()
            });
        });
        
        logger.log(`üìö Loaded ${setlists.length} archive setlists`);
        return setlists;
    } catch (error) {
        logger.error('‚ùå Error loading archive setlists:', error);
        throw error;
    }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Å–Ω—é –≤ –∞—Ä—Ö–∏–≤–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç
 * @param {string} setlistId - ID —Å–µ—Ç-–ª–∏—Å—Ç–∞
 * @param {Object} songData - –î–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏
 * @returns {Promise<void>}
 */
export async function addSongToArchiveSetlist(setlistId, songData) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ç-–ª–∏—Å—Ç
        const doc = await db.collection('archive_setlists').doc(setlistId).get();
        if (!doc.exists) {
            throw new Error('–ê—Ä—Ö–∏–≤–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const data = doc.data();
        const currentSongs = data.songs || [];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º order –¥–ª—è –Ω–æ–≤–æ–π –ø–µ—Å–Ω–∏
        const maxOrder = currentSongs.reduce((max, song) => 
            Math.max(max, song.order || 0), 0);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é
        currentSongs.push({
            songId: songData.songId || songData.id,
            order: maxOrder + 1,
            preferredKey: songData.preferredKey || songData.key || null
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        await db.collection('archive_setlists').doc(setlistId).update({
            songs: currentSongs,
            updatedAt: Timestamp.now()
        });
        
        logger.log('‚úÖ Song added to archive setlist');
    } catch (error) {
        logger.error('‚ùå Error adding song to archive setlist:', error);
        throw error;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –ø–µ—Å–Ω—é –∏–∑ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞
 * @param {string} setlistId - ID —Å–µ—Ç-–ª–∏—Å—Ç–∞
 * @param {string} songId - ID –ø–µ—Å–Ω–∏
 * @returns {Promise<void>}
 */
export async function removeSongFromArchiveSetlist(setlistId, songId) {
    try {
        const doc = await db.collection('archive_setlists').doc(setlistId).get();
        if (!doc.exists) {
            throw new Error('–ê—Ä—Ö–∏–≤–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const data = doc.data();
        const updatedSongs = data.songs.filter(s => s.songId !== songId);
        
        await db.collection('archive_setlists').doc(setlistId).update({
            songs: updatedSongs,
            updatedAt: Timestamp.now()
        });
        
        logger.log('‚úÖ Song removed from archive setlist');
    } catch (error) {
        logger.error('‚ùå Error removing song from archive setlist:', error);
        throw error;
    }
}