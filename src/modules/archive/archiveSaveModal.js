/**
 * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ç-–ª–∏—Å—Ç–∞ –≤ –∞—Ä—Ö–∏–≤
 */

import { db } from '../../utils/firebase-v8-adapter.js';
import { getCurrentUser } from '../auth/authCheck.js';

class ArchiveSaveModal {
    constructor() {
        this.modal = null;
        this.groups = [];
        this.selectedGroups = new Set();
        this.onSave = null;
        this.setlistData = null;
    }

    async init() {
        if (!this.modal) {
            this.createModal();
            await this.loadGroups();
        }
    }

    createModal() {
        const modalHTML = `
            <div id="archive-save-modal" class="modal" style="display: none;">
                <div class="modal-overlay"></div>
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤</h2>
                        <button class="close-btn" data-action="close">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <div class="modal-body">
                        <div class="save-info">
                            <p class="setlist-name-preview"></p>
                            <p class="songs-count-preview"></p>
                        </div>
                        
                        <div class="form-group">
                            <label>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                            <div class="groups-selection" id="archive-groups-selection">
                                <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø...</div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="archive-comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                            <textarea 
                                id="archive-comment" 
                                class="form-control" 
                                rows="3" 
                                placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é"
                            ></textarea>
                        </div>
                    </div>
                    
                    <div class="modal-footer">
                        <button class="btn btn-secondary" data-action="cancel">–û—Ç–º–µ–Ω–∞</button>
                        <button class="btn btn-primary" data-action="save">
                            <i class="fas fa-save"></i>
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤
                        </button>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        this.modal = document.getElementById('archive-save-modal');

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.attachEventListeners();
    }

    attachEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.modal.querySelector('[data-action="close"]').addEventListener('click', () => this.close());
        this.modal.querySelector('[data-action="cancel"]').addEventListener('click', () => this.close());
        this.modal.querySelector('.modal-overlay').addEventListener('click', () => this.close());

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        this.modal.querySelector('[data-action="save"]').addEventListener('click', () => this.save());
    }

    async loadGroups() {
        try {
            const user = await getCurrentUser();
            if (!user) return;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞
            const groupsSnapshot = await db.collection('archive_groups')
                .where('branchId', '==', user.branchId)
                .get();

            this.groups = [];
            groupsSnapshot.forEach(doc => {
                this.groups.push({
                    id: doc.id,
                    ...doc.data()
                });
            });

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
            this.groups.sort((a, b) => a.name.localeCompare(b.name, 'ru'));

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä—É–ø–ø—ã
            this.renderGroups();
        } catch (error) {
            console.error('Error loading groups:', error);
        }
    }

    renderGroups() {
        const container = document.getElementById('archive-groups-selection');
        
        if (this.groups.length === 0) {
            container.innerHTML = '<p class="no-groups">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø</p>';
            return;
        }

        container.innerHTML = this.groups.map(group => `
            <label class="group-checkbox">
                <input type="checkbox" value="${group.id}" ${this.selectedGroups.has(group.id) ? 'checked' : ''}>
                <span class="group-icon">${group.icon || 'üìÅ'}</span>
                <span class="group-name">${group.name}</span>
            </label>
        `).join('');

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        container.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                if (e.target.checked) {
                    this.selectedGroups.add(e.target.value);
                } else {
                    this.selectedGroups.delete(e.target.value);
                }
            });
        });
    }

    async open(setlistData, onSave) {
        this.setlistData = setlistData;
        this.onSave = onSave;
        this.selectedGroups.clear();

        await this.init();

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        this.modal.querySelector('.setlist-name-preview').textContent = `–°–µ—Ç-–ª–∏—Å—Ç: ${setlistData.name}`;
        this.modal.querySelector('.songs-count-preview').textContent = `–ü–µ—Å–µ–Ω: ${setlistData.songs?.length || 0}`;

        // –û—á–∏—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        document.getElementById('archive-comment').value = '';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.modal.style.display = 'block';
        document.body.style.overflow = 'hidden';
    }

    close() {
        this.modal.style.display = 'none';
        document.body.style.overflow = '';
    }

    async save() {
        try {
            const user = await getCurrentUser();
            if (!user) {
                alert('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                return;
            }

            const comment = document.getElementById('archive-comment').value.trim();

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            const archiveData = {
                ...this.setlistData,
                groups: Array.from(this.selectedGroups),
                comment: comment,
                savedAt: new Date(),
                savedBy: user.uid,
                createdBy: user.uid, // –í –∞—Ä—Ö–∏–≤–µ createdBy - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ UID
                branchId: user.branchId,
                usageCount: 0,
                source: 'worship_setlist' // –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
            };

            // –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
            delete archiveData.id;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ archive_setlists
            const docRef = await db.collection('archive_setlists').add(archiveData);

            console.log('‚úÖ –°–µ—Ç-–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤:', docRef.id);

            // –í—ã–∑—ã–≤–∞–µ–º callback
            if (this.onSave) {
                this.onSave(docRef.id);
            }

            this.close();
        } catch (error) {
            console.error('Error saving to archive:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∞—Ä—Ö–∏–≤');
        }
    }
}

// –°–∏–Ω–≥–ª—Ç–æ–Ω
let instance = null;

export function getArchiveSaveModal() {
    if (!instance) {
        instance = new ArchiveSaveModal();
    }
    return instance;
}