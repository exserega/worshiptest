/**
 * API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏ –∞—Ä—Ö–∏–≤–∞ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤
 */

import logger from '../../utils/logger.js';
import { db } from '../../../firebase-init.js';
import { getCurrentUser, isUserGuest } from '../auth/authCheck.js';
import { hasLimitedAccess } from '../permissions/permissions.js';

const Timestamp = window.firebase.firestore.Timestamp;
const FieldValue = window.firebase.firestore.FieldValue;

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π branchId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getCurrentBranchId() {
    const user = await getCurrentUser();
    return user?.branchId || 'main';
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∞—Ä—Ö–∏–≤–∞
 * @param {Object} groupData - –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
 * @returns {Promise<string>} ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
 */
export async function createArchiveGroup(groupData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (hasLimitedAccess()) {
        if (isUserGuest()) {
            throw new Error('–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
        } else {
            throw new Error('–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.');
        }
    }
    
    const currentUser = getCurrentUser();
    if (!currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }
    
    try {
        const newGroup = {
            name: groupData.name || '–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞',
            icon: groupData.icon || 'üìÅ',
            branchId: currentUser.branchId,
            createdBy: currentUser.uid,
            createdAt: Timestamp.now(),
            updatedAt: Timestamp.now(),
            setlistCount: 0
        };
        
        const docRef = await db.collection('archive_groups').add(newGroup);
        logger.log('‚úÖ Archive group created:', docRef.id);
        
        return docRef.id;
    } catch (error) {
        logger.error('‚ùå Error creating archive group:', error);
        throw error;
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –∞—Ä—Ö–∏–≤–∞
 * @param {string} groupId - ID –≥—Ä—É–ø–ø—ã
 * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {Promise<void>}
 */
export async function updateArchiveGroup(groupId, updates) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (hasLimitedAccess()) {
        if (isUserGuest()) {
            throw new Error('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
        } else {
            throw new Error('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.');
        }
    }
    
    try {
        const updateData = {
            ...updates,
            updatedAt: Timestamp.now()
        };
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
        delete updateData.branchId;
        delete updateData.createdBy;
        delete updateData.createdAt;
        delete updateData.setlistCount;
        
        await db.collection('archive_groups').doc(groupId).update(updateData);
        logger.log('‚úÖ Archive group updated:', groupId);
    } catch (error) {
        logger.error('‚ùå Error updating archive group:', error);
        throw error;
    }
}



/**
 * –£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –∞—Ä—Ö–∏–≤–∞
 * @param {string} groupId - ID –≥—Ä—É–ø–ø—ã
 * @returns {Promise<void>}
 */
export async function deleteArchiveGroup(groupId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (hasLimitedAccess()) {
        if (isUserGuest()) {
            throw new Error('–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
        } else {
            throw new Error('–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.');
        }
    }
    
    try {
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –≤—Å–µ—Ö —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤
        const setlistsSnapshot = await db.collection('archive_setlists')
            .where('groupIds', 'array-contains', groupId)
            .get();
        
        const batch = db.batch();
        
        // –£–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –≤—Å–µ—Ö —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤
        setlistsSnapshot.forEach(doc => {
            const groupIds = doc.data().groupIds || [];
            const updatedGroupIds = groupIds.filter(id => id !== groupId);
            batch.update(doc.ref, { 
                groupIds: updatedGroupIds,
                updatedAt: Timestamp.now()
            });
        });
        
        // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –≥—Ä—É–ø–ø—É
        batch.delete(db.collection('archive_groups').doc(groupId));
        
        await batch.commit();
        logger.log('‚úÖ Archive group deleted:', groupId);
    } catch (error) {
        logger.error('‚ùå Error deleting archive group:', error);
        throw error;
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥—Ä—É–ø–ø—ã –∞—Ä—Ö–∏–≤–∞ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞
 * @param {string} branchId - ID —Ñ–∏–ª–∏–∞–ª–∞
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –≥—Ä—É–ø–ø
 */
export async function loadArchiveGroups(branchId) {
    try {
        const snapshot = await db.collection('archive_groups')
            .where('branchId', '==', branchId)
            .orderBy('name', 'asc')
            .get();
        
        const groups = [];
        snapshot.forEach(doc => {
            groups.push({
                id: doc.id,
                ...doc.data()
            });
        });
        
        logger.log(`üìö Loaded ${groups.length} archive groups`);
        return groups;
    } catch (error) {
        logger.error('‚ùå Error loading archive groups:', error);
        throw error;
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
 * –ë—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
 * @param {string} groupId - ID –≥—Ä—É–ø–ø—ã
 * @param {number} delta - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (+1 –∏–ª–∏ -1)
 * @returns {Promise<void>}
 */
export async function updateGroupSetlistCount(groupId, delta) {
    try {
        await db.collection('archive_groups').doc(groupId).update({
            setlistCount: FieldValue.increment(delta),
            updatedAt: Timestamp.now()
        });
    } catch (error) {
        logger.error('‚ùå Error updating group setlist count:', error);
    }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ—Ç-–ª–∏—Å—Ç –≤ –≥—Ä—É–ø–ø—ã
 * @param {string} setlistId - ID —Å–µ—Ç-–ª–∏—Å—Ç–∞
 * @param {Array<string>} groupIds - –ú–∞—Å—Å–∏–≤ ID –≥—Ä—É–ø–ø
 * @returns {Promise<void>}
 */
export async function addSetlistToGroups(setlistId, groupIds) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã —Å–µ—Ç-–ª–∏—Å—Ç–∞
        const setlistDoc = await db.collection('archive_setlists').doc(setlistId).get();
        if (!setlistDoc.exists) {
            throw new Error('–°–µ—Ç-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const currentGroupIds = setlistDoc.data().groupIds || [];
        const newGroupIds = [...new Set([...currentGroupIds, ...groupIds])];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç-–ª–∏—Å—Ç
        await db.collection('archive_setlists').doc(setlistId).update({
            groupIds: newGroupIds,
            updatedAt: Timestamp.now()
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≥—Ä—É–ø–ø –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const addedGroups = groupIds.filter(id => !currentGroupIds.includes(id));
        if (addedGroups.length > 0) {
            const updatePromises = addedGroups.map(groupId => 
                updateGroupSetlistCount(groupId, 1)
            );
            await Promise.all(updatePromises);
        }
    } catch (error) {
        logger.error('‚ùå Error adding setlist to groups:', error);
        throw error;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å–µ—Ç-–ª–∏—Å—Ç –∏–∑ –≥—Ä—É–ø–ø
 * @param {string} setlistId - ID —Å–µ—Ç-–ª–∏—Å—Ç–∞
 * @param {Array<string>} groupIds - –ú–∞—Å—Å–∏–≤ ID –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 * @returns {Promise<void>}
 */
export async function removeSetlistFromGroups(setlistId, groupIds) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã —Å–µ—Ç-–ª–∏—Å—Ç–∞
        const setlistDoc = await db.collection('archive_setlists').doc(setlistId).get();
        if (!setlistDoc.exists) {
            throw new Error('–°–µ—Ç-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const currentGroupIds = setlistDoc.data().groupIds || [];
        const newGroupIds = currentGroupIds.filter(id => !groupIds.includes(id));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç-–ª–∏—Å—Ç
        await db.collection('archive_setlists').doc(setlistId).update({
            groupIds: newGroupIds,
            updatedAt: Timestamp.now()
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≥—Ä—É–ø–ø –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const removedGroups = groupIds.filter(id => currentGroupIds.includes(id));
        if (removedGroups.length > 0) {
            const updatePromises = removedGroups.map(groupId => 
                updateGroupSetlistCount(groupId, -1)
            );
            await Promise.all(updatePromises);
        }
        
        logger.log('‚úÖ Setlist removed from groups:', groupIds);
    } catch (error) {
        logger.error('‚ùå Error removing setlist from groups:', error);
        throw error;
    }
}