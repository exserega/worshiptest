/**
 * –û–≤–µ—Ä–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω –¥–ª—è –∞—Ä—Ö–∏–≤–∞
 * –ü–æ–ª–Ω–∞—è –∫–æ–ø–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */

import logger from '../../utils/logger.js';
import { db } from '../../../firebase-init.js';
import { addSongToArchiveSetlist, removeSongFromArchiveSetlist } from './archiveApi.js';

class ArchiveSongsOverlay {
    constructor() {
        this.songs = [];
        this.filteredSongs = [];
        this.selectedSong = null;
        this.addedSongs = new Map();
        this.searchTerm = '';
        this.selectedCategory = '';
        this.showAddedOnly = false;
        this.targetSetlistId = null;
        this.targetSetlistName = '';
        this.mode = 'add'; // 'add' –∏–ª–∏ 'edit'
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–≤–µ—Ä–ª–µ—è
     */
    async init() {
        this.createHTML();
        this.attachEventListeners();
        await this.loadSongs();
        await this.loadCategories();
        logger.log('üéµ Archive songs overlay initialized');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
     */
    createHTML() {
        const overlayHTML = `
            <div id="archive-songs-overlay" class="global-fullscreen-overlay">
                <div class="fullscreen-content">
                    <div class="fullscreen-header">
                        <div class="header-top-row">
                            <div class="header-left">
                                <button id="close-archive-songs" class="overlay-close-btn">
                                    <i class="fas fa-times"></i>
                                </button>
                                <div class="header-title">
                                    <h3>–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω–∏</h3>
                                </div>
                            </div>
                            <div class="header-right">
                                <div class="added-counter">
                                    <i class="fas fa-music"></i>
                                    <span id="archive-added-songs-count">0</span>
                                </div>
                                <button id="finish-archive-adding" class="btn-modern primary">
                                    <i class="fas fa-check"></i>
                                    <span>–ì–æ—Ç–æ–≤–æ</span>
                                </button>
                            </div>
                        </div>
                        <div class="header-subtitle">
                            <span>–≤ —Å–µ—Ç-–ª–∏—Å—Ç "</span><span id="archive-target-setlist-name" class="setlist-name"></span><span>"</span>
                        </div>
                    </div>
                    
                    <div class="fullscreen-body">
                        <div class="search-section">
                            <div class="search-container">
                                <div class="search-input-wrapper">
                                    <i class="fas fa-search"></i>
                                    <input 
                                        type="text" 
                                        id="archive-song-search" 
                                        class="search-input"
                                        placeholder="–ü–æ–∏—Å–∫ –ø–µ—Å–µ–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
                                    >
                                    <button id="archive-clear-search" class="clear-search-btn" style="display: none;">
                                        <i class="fas fa-times"></i>
                                    </button>
                                    
                                    <!-- Dropdown –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ -->
                                    <div id="archive-search-results" class="overlay-search-dropdown" style="display: none;">
                                        <div class="search-results-container">
                                            <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                                        </div>
                                    </div>
                                </div>
                                <div class="search-filters">
                                    <select id="archive-category-filter" class="filter-select">
                                        <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                                        <option value="worship">–ü–æ–∫–ª–æ–Ω–µ–Ω–∏–µ</option>
                                        <option value="glorifying">–ü—Ä–æ—Å–ª–∞–≤–ª–µ–Ω–∏–µ</option>
                                        <option value="gift">–î–∞—Ä</option>
                                    </select>
                                    <button id="archive-show-added" class="filter-btn">
                                        <span>–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ</span>
                                        <span id="archive-added-badge" class="added-count-badge">0</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="results-section">
                            <div id="archive-songs-grid" class="songs-grid">
                                <div class="loading-state">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Å–µ–Ω...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π preview —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ -->
            <div id="archive-key-modal" class="global-fullscreen-overlay">
                <div class="fullscreen-content song-preview-content">
                    <!-- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —à–∞–ø–∫–∞ -->
                    <div class="song-preview-header">
                        <!-- –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ–º -->
                        <div class="header-top">
                            <button id="close-archive-key-modal" class="overlay-close-btn">
                                <i class="fas fa-times"></i>
                            </button>
                            <div class="header-title">
                                <h3 id="archive-key-song-name">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–µ—Å–Ω–∏ "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏"</h3>
                            </div>
                        </div>
                        
                        <!-- –ö–æ–Ω—Ç—Ä–æ–ª—ã —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ -->
                        <div class="header-controls">
                            <div class="tonality-controls-wrapper">
                                <span class="tonality-label">–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</span>
                                <select id="archive-key-select" class="key-select-modern">
                                    <!-- –û–ø—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                                </select>
                            </div>
                            <button id="confirm-archive-key" class="add-to-setlist-btn">
                                <i class="fas fa-plus"></i>
                                <span>–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–µ—Ç-–ª–∏—Å—Ç</span>
                            </button>
                        </div>
                    </div>
                    
                    <!-- –¢–µ–ª–æ preview -->
                    <div class="song-display" id="archive-song-display">
                        <div class="loading-state">
                            <i class="fas fa-spinner fa-spin"></i>
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Å–Ω–∏...</p>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.insertAdjacentHTML('beforeend', overlayHTML);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.overlay = document.getElementById('archive-songs-overlay');
        this.keyModal = document.getElementById('archive-key-modal');
        this.searchInput = document.getElementById('archive-song-search');
        this.categoryFilter = document.getElementById('archive-category-filter');
        this.songsGrid = document.getElementById('archive-songs-grid');
        this.searchResults = document.getElementById('archive-search-results');
        this.addedCount = document.getElementById('archive-added-songs-count');
        this.addedBadge = document.getElementById('archive-added-badge');
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è
        document.getElementById('close-archive-songs').addEventListener('click', () => this.close());
        document.getElementById('finish-archive-adding').addEventListener('click', () => this.close());

        // –ü–æ–∏—Å–∫
        this.searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));
        document.getElementById('archive-clear-search').addEventListener('click', () => {
            this.searchInput.value = '';
            this.handleSearch('');
        });

        // –§–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        this.categoryFilter.addEventListener('change', () => {
            this.selectedCategory = this.categoryFilter.value;
            this.filterSongs();
        });

        // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ"
        document.getElementById('archive-show-added').addEventListener('click', () => {
            this.showAddedOnly = !this.showAddedOnly;
            document.getElementById('archive-show-added').classList.toggle('active', this.showAddedOnly);
            this.filterSongs();
        });

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        document.getElementById('close-archive-key-modal').addEventListener('click', () => {
            this.keyModal.classList.remove('show');
        });

        document.getElementById('confirm-archive-key').addEventListener('click', () => {
            const keySelect = document.getElementById('archive-key-select');
            const selectedKey = keySelect.value;
            if (selectedKey) {
                this.confirmAddSong(selectedKey);
            }
        });

        // –ö–ª–∏–∫ –≤–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        document.addEventListener('click', (e) => {
            if (!this.searchInput.contains(e.target) && !this.searchResults.contains(e.target)) {
                this.searchResults.style.display = 'none';
            }
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Å–µ–Ω –∏–∑ –±–∞–∑—ã
     */
    async loadSongs() {
        try {
            const snapshot = await db.collection('songs').get();
            this.songs = [];
            
            snapshot.forEach(doc => {
                const data = doc.data();
                this.songs.push({
                    id: doc.id,
                    name: data.name || doc.id,
                    category: data.sheet || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                    keys: this.parseKeys(data),
                    defaultKey: data.defaultKey || 'C',
                    text: data.text || '',
                    bpm: data.BPM || data.bpm || ''
                });
            });

            logger.log(`üìö Loaded ${this.songs.length} songs for archive`);
            this.filterSongs();
        } catch (error) {
            logger.error('Error loading songs:', error);
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–µ—Å–Ω–∏
     */
    parseKeys(songData) {
        const keys = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ defaultKey
        if (songData.defaultKey) {
            keys.push(songData.defaultKey);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
        if (songData.text) {
            const keyMatches = songData.text.match(/–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å[:\s]+([A-G][#b]?m?)/gi);
            if (keyMatches) {
                keyMatches.forEach(match => {
                    const key = match.replace(/–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å[:\s]+/i, '').trim();
                    if (key && !keys.includes(key)) {
                        keys.push(key);
                    }
                });
            }
        }
        
        // –ï—Å–ª–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        if (keys.length === 0) {
            keys.push('C', 'D', 'E', 'F', 'G', 'A', 'B');
        }
        
        return keys;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    async loadCategories() {
        const categories = new Set();
        this.songs.forEach(song => {
            if (song.category) {
                categories.add(song.category);
            }
        });

        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
     */
    handleSearch(term) {
        this.searchTerm = term.toLowerCase();
        const clearBtn = document.getElementById('archive-clear-search');
        clearBtn.style.display = term ? 'block' : 'none';

        if (term.length > 0) {
            this.showSearchResults();
        } else {
            this.searchResults.style.display = 'none';
        }

        this.filterSongs();
    }

    /**
     * –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ dropdown
     */
    showSearchResults() {
        const results = this.songs.filter(song => 
            song.name.toLowerCase().includes(this.searchTerm)
        ).slice(0, 10); // –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        if (results.length === 0) {
            this.searchResults.style.display = 'none';
            return;
        }

        const resultsHTML = results.map(song => `
            <div class="search-result-item" data-song-id="${song.id}">
                <div class="song-name">${this.highlightMatch(song.name, this.searchTerm)}</div>
            </div>
        `).join('');

        this.searchResults.querySelector('.search-results-container').innerHTML = resultsHTML;
        this.searchResults.style.display = 'block';

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.searchResults.querySelectorAll('.search-result-item').forEach(item => {
            item.addEventListener('click', () => {
                const songId = item.dataset.songId;
                const song = this.songs.find(s => s.id === songId);
                if (song) {
                    this.selectSong(song);
                }
                this.searchResults.style.display = 'none';
            });
        });
    }

    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –ø–æ–∏—Å–∫–µ
     */
    highlightMatch(text, term) {
        const regex = new RegExp(`(${term})`, 'gi');
        return text.replace(regex, '<mark>$1</mark>');
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–µ—Å–µ–Ω
     */
    filterSongs() {
        this.filteredSongs = this.songs.filter(song => {
            // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
            if (this.searchTerm && !song.name.toLowerCase().includes(this.searchTerm)) {
                return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (this.selectedCategory && song.category !== this.selectedCategory) {
                return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º
            if (this.showAddedOnly && !this.addedSongs.has(song.id)) {
                return false;
            }

            return true;
        });

        this.renderSongs();
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Å–µ–Ω
     */
    renderSongs() {
        if (this.filteredSongs.length === 0) {
            this.songsGrid.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-music"></i>
                    <p>–ü–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                </div>
            `;
            return;
        }

        const songsHTML = this.filteredSongs.map((song, index) => {
            const isAdded = this.addedSongs.has(song.id);
            const addedKey = this.addedSongs.get(song.id);
            return `
                <div class="song-card-compact ${isAdded ? 'added' : ''}" data-song-id="${song.id}">
                    <div class="song-number">${index + 1}</div>
                    <div class="song-info">
                        <div class="song-title">${song.name}</div>
                        <div class="song-category-label">${song.category}</div>
                    </div>
                    <div class="song-meta">
                        ${addedKey ? `<span class="song-key-badge">${addedKey}</span>` : ''}
                        ${song.bpm ? `<span class="song-bpm">${song.bpm} BPM</span>` : ''}
                    </div>
                    <button class="song-action-btn ${isAdded ? 'remove' : 'add'}" data-song-id="${song.id}">
                        <i class="fas fa-${isAdded ? 'trash' : 'plus'}"></i>
                    </button>
                </div>
            `;
        }).join('');

        this.songsGrid.innerHTML = songsHTML;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        this.songsGrid.querySelectorAll('.song-action-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const songId = btn.dataset.songId;
                const song = this.songs.find(s => s.id === songId);
                if (song) {
                    if (btn.classList.contains('remove')) {
                        // –£–¥–∞–ª—è–µ–º –ø–µ—Å–Ω—é
                        this.removeSongFromSetlist(songId);
                    } else {
                        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é
                        this.selectSong(song);
                    }
                }
            });
        });
    }

    /**
     * –í—ã–±–æ—Ä –ø–µ—Å–Ω–∏
     */
    async selectSong(song) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç
        try {
            const { getSongById } = await import('../../api/index.js');
            const fullSongData = await getSongById(song.id);
            
            if (fullSongData) {
                this.selectedSong = fullSongData;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
                const keys = fullSongData.keys || [];
                
                if (keys.length === 0) {
                    // –ï—Å–ª–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ –≤—ã–±–æ—Ä–∞
                    this.confirmAddSong(null);
                } else if (keys.length === 1) {
                    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
                    this.confirmAddSong(keys[0]);
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                    this.showKeySelectionModal(fullSongData);
                }
            } else {
                logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏');
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Å–Ω–∏:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
     */
    showKeySelectionModal(song) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        document.getElementById('archive-key-song-name').textContent = 
            `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–µ—Å–Ω–∏ "${song.name}"`;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
        const keySelect = document.getElementById('archive-key-select');
        keySelect.innerHTML = song.keys.map(key => `
            <option value="${key}">${key}</option>
        `).join('');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
        const songDisplay = document.getElementById('archive-song-display');
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
        let formattedText = song.text || '–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (formattedText && formattedText !== '–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω') {
            // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã –≤ span –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
            formattedText = formattedText.replace(/([A-G][#b]?m?(?:maj|min|dim|aug|sus|add)?[0-9]*)/g, '<span class="chord">$1</span>');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            formattedText = formattedText.replace(/\n/g, '<br>');
        }
        
        songDisplay.innerHTML = `
            <div class="song-content">
                <div class="song-text">${formattedText}</div>
            </div>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        keySelect.addEventListener('change', () => {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            logger.log('Selected key:', keySelect.value);
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.keyModal.classList.add('show');
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏
     */
    async confirmAddSong(selectedKey = null) {
        if (!this.selectedSong) return;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        let key = selectedKey;
        if (!key && this.selectedSong.defaultKey) {
            key = this.selectedSong.defaultKey;
        } else if (!key && this.selectedSong.keys && this.selectedSong.keys.length > 0) {
            key = this.selectedSong.keys[0];
        }

        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é –≤ –∞—Ä—Ö–∏–≤–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç
            await addSongToArchiveSetlist(this.targetSetlistId, {
                id: this.selectedSong.id,
                preferredKey: key
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö
            this.addedSongs.set(this.selectedSong.id, key);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            this.updateCounters();

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.renderSongs();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification(`–ü–µ—Å–Ω—è "${this.selectedSong.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞`);

        } catch (error) {
            logger.error('Error adding song to archive:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏', 'error');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
     */
    updateCounters() {
        const count = this.addedSongs.size;
        this.addedCount.textContent = count;
        this.addedBadge.textContent = count;
        this.addedBadge.style.display = count > 0 ? 'inline-block' : 'none';
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'success') {
        // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <i class="fas fa-${type === 'success' ? 'check' : 'exclamation'}-circle"></i>
            <span>${message}</span>
        `;
        document.body.appendChild(notification);

        setTimeout(() => {
            notification.classList.add('show');
        }, 10);

        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–∑ —Å–µ—Ç-–ª–∏—Å—Ç–∞
     */
    async removeSongFromSetlist(songId) {
        try {
            // –ï—Å–ª–∏ –µ—Å—Ç—å targetSetlistId, —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            if (this.targetSetlistId && this.mode === 'edit') {
                await removeSongFromArchiveSetlist(this.targetSetlistId, songId);
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.addedSongs.delete(songId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            this.updateAddedSongsCount();
            
            // –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–µ—Å–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
            if (this.showAddedOnly && this.addedSongs.size === 0) {
                this.showAddedOnly = false;
                document.getElementById('archive-show-added').classList.remove('active');
            }
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
            this.filterSongs();
            
            this.showNotification('–ü–µ—Å–Ω—è —É–¥–∞–ª–µ–Ω–∞', 'success');
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏', 'error');
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è
     */
    async open(setlistId, setlistName, mode = 'add') {
        this.targetSetlistId = setlistId;
        this.targetSetlistName = setlistName;
        this.mode = mode;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        document.querySelector('#archive-songs-overlay .header-title h3').textContent = 
            mode === 'edit' ? `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "${setlistName}"` : '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω–∏';
        
        document.getElementById('archive-target-setlist-name').textContent = setlistName;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Å–Ω–∏ –µ—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (mode === 'edit') {
            await this.loadExistingSongs(setlistId);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
        this.overlay.classList.add('show');
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫–µ
        setTimeout(() => this.searchInput.focus(), 100);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Å–µ–Ω —Å–µ—Ç-–ª–∏—Å—Ç–∞
     */
    async loadExistingSongs(setlistId) {
        try {
            const doc = await db.collection('archive_setlists').doc(setlistId).get();
            if (doc.exists) {
                const data = doc.data();
                const songs = data.songs || [];
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Å–Ω–∏ –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö
                this.addedSongs.clear();
                songs.forEach(song => {
                    this.addedSongs.set(song.songId, song.preferredKey);
                });
                
                this.updateCounters();
            }
        } catch (error) {
            logger.error('Error loading existing songs:', error);
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è
     */
    close() {
        this.overlay.classList.remove('show');
        this.keyModal.classList.remove('show');
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.searchInput.value = '';
        this.selectedCategory = '';
        this.categoryFilter.value = '';
        this.showAddedOnly = false;
        document.getElementById('archive-show-added').classList.remove('active');
        this.searchResults.style.display = 'none';
        
        // –û—á–∏—Å—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω
        this.addedSongs.clear();
        this.updateCounters();
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞
        if (window.loadArchiveData) {
            window.loadArchiveData();
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
const archiveSongsOverlay = new ArchiveSongsOverlay();

export async function openArchiveSongsOverlay(setlistId, setlistName, mode = 'add') {
    if (!archiveSongsOverlay.overlay) {
        await archiveSongsOverlay.init();
    }
    await archiveSongsOverlay.open(setlistId, setlistName, mode);
}

// –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∞—Ä—Ö–∏–≤–∞
window.openArchiveSongsOverlay = openArchiveSongsOverlay;