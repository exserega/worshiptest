/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –∞—Ä—Ö–∏–≤–∞
 */

import logger from '../../utils/logger.js';
import { 
    createArchiveGroup, 
    updateArchiveGroup, 
    deleteArchiveGroup,
    loadArchiveGroups 
} from './archiveGroupsApi.js';
import { getCurrentUser } from '../auth/authCheck.js';



// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø
const GROUP_ICONS = [
    'üìÅ', 'üéµ', 'üé∏', 'üéπ', 'üé§', 'üéß',
    'üéÑ', 'üéÖ', 'üéÅ', '‚≠ê', '‚ùÑÔ∏è', 'üïØÔ∏è',
    'üê£', 'üå∏', 'üå∫', 'üåª', 'üå∑', 'ü•ö',
    'üôè', '‚úùÔ∏è', '‚õ™', 'üìñ', 'üïäÔ∏è', 'üíí',
    '‚ù§Ô∏è', 'üíö', 'üíô', 'üíú', 'üíõ', 'üß°',
    'üåü', '‚ú®', 'üéâ', 'üéä', 'üéà', 'üéÇ',
    'üî•', 'üí°', 'üåà', '‚òÄÔ∏è', 'üåô', '‚ö°'
];

class ArchiveGroupsManager {
    constructor() {
        this.currentUser = null;
        this.groups = [];
        this.selectedIcon = GROUP_ICONS[0];
        this.editingGroupId = null;
        this.onGroupsChange = null; // Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥—Ä—É–ø–ø
     */
    async init(onGroupsChange) {
        this.currentUser = getCurrentUser();
        this.onGroupsChange = onGroupsChange;
        this.setupEventListeners();
        this.initializeIconPicker();
        await this.loadGroups();
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async loadGroups() {
        try {
            if (!this.currentUser?.branchId) {
                logger.error('No branch ID for loading groups');
                return;
            }
            
            this.groups = await loadArchiveGroups(this.currentUser.branchId);
            logger.log(`Loaded ${this.groups.length} archive groups`);
            
            if (this.onGroupsChange) {
                this.onGroupsChange(this.groups);
            }
        } catch (error) {
            logger.error('Error loading groups:', error);
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
        const addGroupBtn = document.getElementById('add-group-btn');
        if (addGroupBtn) {
            addGroupBtn.addEventListener('click', () => this.openCreateModal());
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
        const listGroupsBtn = document.getElementById('list-groups-btn');
        if (listGroupsBtn) {
            listGroupsBtn.addEventListener('click', () => this.openListModal());
        }
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const groupModal = document.getElementById('group-modal');
        const closeBtn = document.getElementById('group-modal-close');
        const cancelBtn = document.getElementById('group-modal-cancel');
        const saveBtn = document.getElementById('group-modal-save');
        
        closeBtn?.addEventListener('click', () => this.closeModal());
        cancelBtn?.addEventListener('click', () => this.closeModal());
        saveBtn?.addEventListener('click', () => this.saveGroup());
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
        groupModal?.addEventListener('click', (e) => {
            if (e.target === groupModal) {
                this.closeModal();
            }
        });
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
        const listModal = document.getElementById('groups-list-modal');
        const listCloseBtn = document.getElementById('groups-list-close');
        const createFromListBtn = document.getElementById('create-group-from-list');
        
        listCloseBtn?.addEventListener('click', () => this.closeListModal());
        createFromListBtn?.addEventListener('click', () => {
            this.closeListModal();
            this.openCreateModal();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
        listModal?.addEventListener('click', (e) => {
            if (e.target === listModal) {
                this.closeListModal();
            }
        });
    }
    

    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∏–∫–æ–Ω–∫–∏
     */
    initializeIconPicker() {
        const iconPicker = document.getElementById('icon-picker');
        if (!iconPicker) return;
        
        iconPicker.innerHTML = '';
        
        GROUP_ICONS.forEach(icon => {
            const iconOption = document.createElement('div');
            iconOption.className = 'icon-option';
            iconOption.textContent = icon;
            iconOption.dataset.icon = icon;
            
            if (icon === this.selectedIcon) {
                iconOption.classList.add('selected');
            }
            
            iconOption.addEventListener('click', () => {
                // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
                iconPicker.querySelectorAll('.icon-option').forEach(opt => 
                    opt.classList.remove('selected')
                );
                // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π
                iconOption.classList.add('selected');
                this.selectedIcon = icon;
            });
            
            iconPicker.appendChild(iconOption);
        });
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
     */
    openCreateModal() {
        this.editingGroupId = null;
        
        const modal = document.getElementById('group-modal');
        const titleEl = document.getElementById('group-modal-title');
        const nameInput = document.getElementById('group-name-input');
        
        titleEl.textContent = '–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞';
        nameInput.value = '';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É
        this.selectedIcon = GROUP_ICONS[0];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤—ã–±–æ—Ä–∞
        this.updateIconSelection();
        
        modal.classList.add('show');
        nameInput.focus();
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
     */
    openEditModal(groupId) {
        const group = this.groups.find(g => g.id === groupId);
        if (!group) return;
        
        this.editingGroupId = groupId;
        
        const modal = document.getElementById('group-modal');
        const titleEl = document.getElementById('group-modal-title');
        const nameInput = document.getElementById('group-name-input');
        
        titleEl.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É';
        nameInput.value = group.name;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–∫–æ–Ω–∫—É
        this.selectedIcon = group.icon || GROUP_ICONS[0];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤—ã–±–æ—Ä–∞
        this.updateIconSelection();
        
        modal.classList.add('show');
        nameInput.focus();
    }
    

    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
     */
    updateIconSelection() {
        const iconPicker = document.getElementById('icon-picker');
        if (!iconPicker) return;
        
        iconPicker.querySelectorAll('.icon-option').forEach(opt => {
            if (opt.dataset.icon === this.selectedIcon) {
                opt.classList.add('selected');
            } else {
                opt.classList.remove('selected');
            }
        });
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    closeModal() {
        const modal = document.getElementById('group-modal');
        modal.classList.remove('show');
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
     */
    async saveGroup() {
        const nameInput = document.getElementById('group-name-input');
        const name = nameInput.value.trim();
        
        if (!name) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã');
            nameInput.focus();
            return;
        }
        
        try {
            const groupData = {
                name,
                icon: this.selectedIcon
            };
            
            if (this.editingGroupId) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø—ã
                await updateArchiveGroup(this.editingGroupId, groupData);
                logger.log('Group updated:', this.editingGroupId);
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
                const groupId = await createArchiveGroup(groupData);
                logger.log('Group created:', groupId);
            }
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
            await this.loadGroups();
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.closeModal();
        } catch (error) {
            logger.error('Error saving group:', error);
            alert(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã');
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
     */
    openListModal() {
        const modal = document.getElementById('groups-list-modal');
        this.renderGroupsList();
        modal.classList.add('show');
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–ø–∏—Å–∫–∞
     */
    closeListModal() {
        const modal = document.getElementById('groups-list-modal');
        modal.classList.remove('show');
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
     */
    renderGroupsList() {
        const container = document.getElementById('groups-list-container');
        if (!container) return;
        
        if (this.groups.length === 0) {
            container.innerHTML = `
                <div class="groups-empty-state">
                    <i class="fas fa-folder-open groups-empty-icon"></i>
                    <h3 class="groups-empty-title">–ù–µ—Ç –≥—Ä—É–ø–ø</h3>
                    <p class="groups-empty-text">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = this.groups.map(group => `
            <div class="group-list-item" data-group-id="${group.id}">
                <div class="group-list-icon">
                    ${group.icon || 'üìÅ'}
                </div>
                <div class="group-list-info">
                    <div class="group-list-name">${this.escapeHtml(group.name)}</div>
                    <div class="group-list-count">${group.setlistCount || 0} —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤</div>
                </div>
                <div class="group-list-actions">
                    <button class="group-edit-btn" data-group-id="${group.id}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="group-delete-btn" data-group-id="${group.id}" title="–£–¥–∞–ª–∏—Ç—å">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        `).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        container.querySelectorAll('.group-edit-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const groupId = btn.dataset.groupId;
                this.closeListModal();
                this.openEditModal(groupId);
            });
        });
        
        container.querySelectorAll('.group-delete-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const groupId = btn.dataset.groupId;
                this.deleteGroup(groupId);
            });
        });
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
     */
    async deleteGroup(groupId) {
        const group = this.groups.find(g => g.id === groupId);
        if (!group) return;
        
        const confirmText = group.setlistCount > 0 
            ? `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É "${group.name}"? –û–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ${group.setlistCount} —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤. –°–µ—Ç-–ª–∏—Å—Ç—ã –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, –Ω–æ –ø–æ—Ç–µ—Ä—è—é—Ç —Å–≤—è–∑—å —Å —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π.`
            : `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É "${group.name}"?`;
        
        if (!confirm(confirmText)) return;
        
        try {
            await deleteArchiveGroup(groupId);
            logger.log('Group deleted:', groupId);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
            await this.loadGroups();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
            const modal = document.getElementById('groups-list-modal');
            if (modal.classList.contains('show')) {
                this.renderGroupsList();
            }
        } catch (error) {
            logger.error('Error deleting group:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã');
        }
    }
    
    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export default new ArchiveGroupsManager();