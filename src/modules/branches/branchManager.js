// Branch Manager Module
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞–º–∏ —Ü–µ—Ä–∫–≤–∏

// Firebase —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ HTML
const db = firebase.firestore();

import { getCurrentUser } from '../auth/authCheck.js';

// –ö—ç—à —Ñ–∏–ª–∏–∞–ª–æ–≤
let branchesCache = null;
let cacheTimestamp = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã
 */
export async function getAllBranches(forceRefresh = false) {
    const now = Date.now();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –æ–Ω —Å–≤–µ–∂–∏–π
    if (!forceRefresh && branchesCache && (now - cacheTimestamp < CACHE_DURATION)) {
        console.log('üìç Using cached branches');
        return branchesCache;
    }
    
    try {
        console.log('üìç Loading branches from Firestore...');
        const snapshot = await db.collection('branches').get();
        
        const branches = [];
        snapshot.forEach(doc => {
            branches.push({
                id: doc.id,
                ...doc.data()
            });
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        branchesCache = branches;
        cacheTimestamp = now;
        
        console.log(`üìç Loaded ${branches.length} branches`);
        return branches;
    } catch (error) {
        console.error('Error loading branches:', error);
        return [];
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª–∏–∞–ª –ø–æ ID
 */
export async function getBranchById(branchId) {
    if (!branchId) return null;
    
    try {
        const doc = await db.collection('branches').doc(branchId).get();
        if (doc.exists) {
            return {
                id: doc.id,
                ...doc.data()
            };
        }
        return null;
    } catch (error) {
        console.error('Error getting branch:', error);
        return null;
    }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function createBranch(branchData) {
    const user = getCurrentUser();
    if (!user || user.role !== 'admin') {
        throw new Error('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∏–ª–∏–∞–ª—ã');
    }
    
    try {
        const newBranch = {
            name: branchData.name,
            location: branchData.location || '',
            createdBy: user.id,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            memberCount: 0
        };
        
        const docRef = await db.collection('branches').add(newBranch);
        console.log('üìç Branch created:', docRef.id);
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à
        branchesCache = null;
        
        return {
            id: docRef.id,
            ...newBranch
        };
    } catch (error) {
        console.error('Error creating branch:', error);
        throw error;
    }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª–∏–∞–ª–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function updateBranch(branchId, updates) {
    const user = getCurrentUser();
    if (!user || user.role !== 'admin') {
        throw new Error('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ñ–∏–ª–∏–∞–ª—ã');
    }
    
    try {
        await db.collection('branches').doc(branchId).update({
            ...updates,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        console.log('üìç Branch updated:', branchId);
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à
        branchesCache = null;
        
        return true;
    } catch (error) {
        console.error('Error updating branch:', error);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ñ–∏–ª–∏–∞–ª–∞
 */
export async function getBranchMembers(branchId) {
    if (!branchId) return [];
    
    try {
        const snapshot = await db.collection('users')
            .where('branchId', '==', branchId)
            .where('status', '==', 'active')
            .get();
        
        const members = [];
        snapshot.forEach(doc => {
            members.push({
                id: doc.id,
                ...doc.data()
            });
        });
        
        console.log(`üìç Found ${members.length} members in branch ${branchId}`);
        return members;
    } catch (error) {
        console.error('Error getting branch members:', error);
        return [];
    }
}

/**
 * –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∏–ª–∏–∞–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function assignUserToBranch(userId, branchId) {
    const currentUser = getCurrentUser();
    if (!currentUser || currentUser.role !== 'admin') {
        throw new Error('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∏–ª–∏–∞–ª—ã');
    }
    
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.collection('users').doc(userId).update({
            branchId: branchId,
            status: 'active',
            updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
            updatedBy: currentUser.id
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ñ–∏–ª–∏–∞–ª–∞
        await db.collection('branches').doc(branchId).update({
            memberCount: firebase.firestore.FieldValue.increment(1)
        });
        
        console.log(`üìç User ${userId} assigned to branch ${branchId}`);
        return true;
    } catch (error) {
        console.error('Error assigning user to branch:', error);
        throw error;
    }
}

/**
 * –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∏–ª–∏–∞–ª–∞
 */
export async function removeUserFromBranch(userId) {
    const currentUser = getCurrentUser();
    if (!currentUser || currentUser.role !== 'admin') {
        throw new Error('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∏–ª–∏–∞–ª–æ–≤');
    }
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª–∏–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userDoc = await db.collection('users').doc(userId).get();
        const userData = userDoc.data();
        const oldBranchId = userData?.branchId;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.collection('users').doc(userId).update({
            branchId: null,
            status: 'pending',
            updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
            updatedBy: currentUser.id
        });
        
        // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
        if (oldBranchId) {
            await db.collection('branches').doc(oldBranchId).update({
                memberCount: firebase.firestore.FieldValue.increment(-1)
            });
        }
        
        console.log(`üìç User ${userId} removed from branch`);
        return true;
    } catch (error) {
        console.error('Error removing user from branch:', error);
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.branchManager = {
    getAllBranches,
    getBranchById,
    createBranch,
    updateBranch,
    getBranchMembers,
    assignUserToBranch,
    removeUserFromBranch
};

console.log('üìç Branch Manager module loaded');