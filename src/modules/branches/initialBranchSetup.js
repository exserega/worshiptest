/**
 * Initial Branch Setup Module
 * –ú–æ–¥—É–ª—å –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ñ–∏–ª–∏–∞–ª, –µ—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –µ—â–µ –Ω–µ—Ç
 */

const db = firebase.firestore();
const auth = firebase.auth();

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Ñ–∏–ª–∏–∞–ª
 */
export async function checkAndCreateInitialBranch() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∏–ª–∏–∞–ª—ã
        const branchesSnapshot = await db.collection('branches').limit(1).get();
        
        if (branchesSnapshot.empty) {
            console.log('üè¢ No branches found, creating initial branch...');
            
            // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª–∏–∞–ª
            const initialBranch = {
                name: '–ì–ª–∞–≤–Ω—ã–π —Ñ–∏–ª–∏–∞–ª',
                location: '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                memberCount: 0,
                setlistCount: 0,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                createdBy: auth.currentUser?.uid || 'system'
            };
            
            const docRef = await db.collection('branches').add(initialBranch);
            
            console.log('‚úÖ Initial branch created:', docRef.id);
            
            return {
                id: docRef.id,
                ...initialBranch,
                createdAt: new Date()
            };
        }
        
        return null;
        
    } catch (error) {
        console.error('‚ùå Error checking/creating initial branch:', error);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        return null;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∏–ª–∏–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export async function assignUsersToDefaultBranch() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª–∏–∞–ª
        const branchesSnapshot = await db.collection('branches')
            .orderBy('createdAt', 'asc')
            .limit(1)
            .get();
            
        if (branchesSnapshot.empty) return;
        
        const defaultBranchId = branchesSnapshot.docs[0].id;
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ñ–∏–ª–∏–∞–ª–∞
        const usersWithoutBranch = await db.collection('users')
            .where('branchId', '==', null)
            .get();
            
        if (usersWithoutBranch.empty) return;
        
        console.log(`üè¢ Found ${usersWithoutBranch.size} users without branch`);
        
        // –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Ö –≤ —Ñ–∏–ª–∏–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const batch = db.batch();
        let count = 0;
        
        usersWithoutBranch.forEach(doc => {
            batch.update(doc.ref, {
                branchId: defaultBranchId,
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            count++;
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        batch.update(db.collection('branches').doc(defaultBranchId), {
            memberCount: firebase.firestore.FieldValue.increment(count)
        });
        
        await batch.commit();
        
        console.log(`‚úÖ Assigned ${count} users to default branch`);
        
    } catch (error) {
        console.error('‚ùå Error assigning users to default branch:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
export default {
    checkAndCreateInitialBranch,
    assignUsersToDefaultBranch
};