/**
 * Branch Selection Module
 * –ú–æ–¥—É–ª—å –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

const db = firebase.firestore();
const auth = firebase.auth();

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
let branchSelectionModal = null;
let branchesList = null;
let selectedBranchId = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
 */
export function initBranchSelection() {
    branchSelectionModal = document.getElementById('branch-selection-modal');
    branchesList = document.getElementById('branches-list');
    
    if (!branchSelectionModal || !branchesList) {
        console.error('Branch selection elements not found', {
            modal: branchSelectionModal,
            list: branchesList
        });
        return;
    }
    console.log('‚úÖ Branch selection initialized');
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞
 */
export async function showBranchSelection() {
    if (!branchSelectionModal) {
        console.error('‚ùå Branch selection modal not initialized');
        return;
    }
    
    console.log('üè¢ Showing branch selection modal');
    branchSelectionModal.classList.add('visible');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤
    await loadBranches();
}

/**
 * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞
 */
export function hideBranchSelection() {
    if (!branchSelectionModal) return;
    
    branchSelectionModal.classList.remove('visible');
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤
 */
async function loadBranches() {
    try {
        branchesList.innerHTML = `
            <div class="loading-branches">
                <i class="fas fa-spinner fa-spin"></i>
                <span>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤...</span>
            </div>
        `;
        
        const snapshot = await db.collection('branches')
            .orderBy('name', 'asc')
            .get();
            
        if (snapshot.empty) {
            branchesList.innerHTML = `
                <div class="no-branches">
                    <i class="fas fa-building"></i>
                    <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤</p>
                </div>
            `;
            return;
        }
        
        // –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        branchesList.innerHTML = '';
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const branches = [];
        snapshot.forEach(doc => {
            branches.push({ id: doc.id, ...doc.data() });
        });
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
        for (const branch of branches) {
            const usersSnapshot = await db.collection('users')
                .where('branchId', '==', branch.id)
                .where('status', 'in', ['active', 'pending'])  // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –æ–∂–∏–¥–∞—é—â–∏—Ö
                .get();
            
            branch.actualMemberCount = usersSnapshot.size;
            renderBranchCard(branch);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        addConfirmButton();
        
    } catch (error) {
        console.error('Error loading branches:', error);
        branchesList.innerHTML = `
            <div class="error-message">
                <i class="fas fa-exclamation-triangle"></i>
                <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤</p>
            </div>
        `;
    }
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∏–ª–∏–∞–ª–∞
 */
function renderBranchCard(branch) {
    const card = document.createElement('div');
    card.className = 'branch-card';
    card.dataset.branchId = branch.id;
    
    card.innerHTML = `
        <h3>${branch.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
        <p><i class="fas fa-map-marker-alt"></i> ${branch.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
        <p class="member-count"><i class="fas fa-users"></i> ${branch.actualMemberCount !== undefined ? branch.actualMemberCount : (branch.memberCount || 0)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>
    `;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    card.addEventListener('click', () => selectBranch(branch.id, card));
    
    branchesList.appendChild(card);
}

/**
 * –í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª
 */
function selectBranch(branchId, cardElement) {
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    document.querySelectorAll('.branch-card').forEach(card => {
        card.classList.remove('selected');
    });
    
    // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    cardElement.classList.add('selected');
    selectedBranchId = branchId;
    
    // –°—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏ –∫–ª–∏–∫–µ
    confirmBranchSelection();
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 */
function addConfirmButton() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞
    if (document.querySelector('.branch-selection-actions')) return;
    
    const actionsDiv = document.createElement('div');
    actionsDiv.className = 'branch-selection-actions';
    
    actionsDiv.innerHTML = `
        <div class="branch-selection-help">
            <p>–ù–µ –Ω–∞—à–ª–∏ —Å–≤–æ–π —Ñ–∏–ª–∏–∞–ª?</p>
            <button class="contact-admin-button">
                <i class="fab fa-telegram"></i>
                <span>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</span>
            </button>
        </div>
    `;
    
    const modalContent = branchSelectionModal.querySelector('.modal-content');
    modalContent.appendChild(actionsDiv);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const contactButton = actionsDiv.querySelector('.contact-admin-button');
    contactButton.addEventListener('click', () => {
        window.open('https://t.me/Sha1oom', '_blank');
    });
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
 */
async function confirmBranchSelection() {
    const user = auth.currentUser;
    if (!user) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Å—Ç–µ–º
    if (user.isAnonymous) {
        alert('–î–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è');
        hideBranchSelection();
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ñ–∏–ª–∏–∞–ª
    if (!selectedBranchId) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
    const selectedCard = document.querySelector('.branch-card.selected');
    if (selectedCard) {
        selectedCard.style.opacity = '0.6';
        selectedCard.style.pointerEvents = 'none';
        const title = selectedCard.querySelector('h3');
        if (title) {
            title.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ' + title.textContent;
        }
    }
    
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.collection('users').doc(auth.currentUser.uid).update({
            branchId: selectedBranchId,
            status: 'pending', // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å pending
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ñ–∏–ª–∏–∞–ª–∞
        await db.collection('branches').doc(selectedBranchId).update({
            memberCount: firebase.firestore.FieldValue.increment(1)
        });
        
        console.log('‚úÖ Branch selected successfully');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        hideBranchSelection();
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        window.location.reload();
        
    } catch (error) {
        console.error('Error selecting branch:', error);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        if (selectedCard) {
            selectedCard.style.opacity = '1';
            selectedCard.style.pointerEvents = 'auto';
            const title = selectedCard.querySelector('h3');
            if (title) {
                title.innerHTML = title.textContent.replace(/^.*? /, ''); // –£–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
            }
        }
        
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
 */
export async function checkAndShowBranchSelection() {
    const user = auth.currentUser;
    if (!user) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Å—Ç–µ–º
    if (user.isAnonymous) {
        console.log('üë§ Guest user - skipping branch selection');
        return false;
    }
    
    try {
        const userDoc = await db.collection('users').doc(user.uid).get();
        
        if (userDoc.exists) {
            const userData = userDoc.data();
            console.log('üîç Checking user branch:', {
                userId: user.uid,
                branchId: userData.branchId,
                status: userData.status
            });
            
            // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–∏–ª–∏–∞–ª–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
            if (!userData.branchId) {
                console.log('üìã User has no branch, showing selection');
                await showBranchSelection();
                return true;
            }
        }
        
        return false;
        
    } catch (error) {
        console.error('Error checking user branch:', error);
        return false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
export default {
    initBranchSelection,
    showBranchSelection,
    hideBranchSelection,
    checkAndShowBranchSelection
};