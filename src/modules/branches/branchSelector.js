// ====================================
// –ú–û–î–£–õ–¨ –í–´–ë–û–†–ê –§–ò–õ–ò–ê–õ–ê –î–õ–Ø –°–ï–¢-–õ–ò–°–¢–û–í
// ====================================

import { db } from '../../../js/firebase-config.js';
import { getCurrentBranchId, getUserStatus } from '../auth/authCheck.js';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
let selectedBranchId = null;
let userMainBranchId = null;
let branches = [];

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤
 */
export function initBranchSelector() {
    console.log('üè¢ Initializing branch selector for setlists...');
    
    const selector = document.getElementById('setlist-branch-selector');
    if (!selector) {
        console.error('Branch selector not found');
        return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª–∏–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const branchId = getCurrentBranchId();
    if (branchId) {
        userMainBranchId = branchId;
        selectedBranchId = userMainBranchId; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª–∏–∞–ª
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤
    loadBranches();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
    selector.addEventListener('change', handleBranchChange);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤
 */
async function loadBranches() {
    try {
        const snapshot = await db.collection('branches')
            .orderBy('name', 'asc')
            .get();
            
        branches = [];
        snapshot.forEach(doc => {
            branches.push({ id: doc.id, ...doc.data() });
        });
        
        updateBranchSelector();
        
    } catch (error) {
        console.error('Error loading branches:', error);
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
 */
function updateBranchSelector() {
    const selector = document.getElementById('setlist-branch-selector');
    if (!selector) return;
    
    selector.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤
    branches.forEach(branch => {
        const option = document.createElement('option');
        option.value = branch.id;
        option.textContent = branch.name;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (branch.id === userMainBranchId) {
            option.textContent += ' (–ú–æ–π —Ñ–∏–ª–∏–∞–ª)';
        }
        
        selector.appendChild(option);
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª
    if (selectedBranchId) {
        selector.value = selectedBranchId;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
 */
function handleBranchChange(event) {
    const newBranchId = event.target.value;
    if (newBranchId === selectedBranchId) return;
    
    selectedBranchId = newBranchId;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
    const infoElement = document.querySelector('.branch-selector-info');
    if (infoElement) {
        if (selectedBranchId !== userMainBranchId) {
            infoElement.style.display = 'flex';
        } else {
            infoElement.style.display = 'none';
        }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤
    window.dispatchEvent(new CustomEvent('branchChanged', {
        detail: { branchId: selectedBranchId }
    }));
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
 */
export function getSelectedBranchId() {
    return selectedBranchId || userMainBranchId;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –æ—Å–Ω–æ–≤–Ω—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function isUserMainBranch() {
    return selectedBranchId === userMainBranchId || !selectedBranchId;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª–∏–∞–ª—É
 */
export async function isUserInSelectedBranch() {
    if (!selectedBranchId) return true; // –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π
    
    try {
        const { isUserInBranch } = await import('./userBranches.js');
        return await isUserInBranch(selectedBranchId);
    } catch (e) {
        // –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª–∏–∞–ª
        return selectedBranchId === userMainBranchId;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Ñ–∏–ª–∏–∞–ª–µ
 */
export async function canEditInCurrentBranch() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const status = getUserStatus();
    if (status !== 'active') {
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª–∏–∞–ª—É
    return await isUserInSelectedBranch();
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —á—É–∂–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
 */
export async function showOtherBranchMessage(action) {
    const selectedBranch = branches.find(b => b.id === selectedBranchId);
    const branchName = selectedBranch ? selectedBranch.name : '–¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞';
    
    const message = `–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Å–µ—Ç-–ª–∏—Å—Ç—ã —Ñ–∏–ª–∏–∞–ª–∞ "${branchName}". ${action} –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–∏—Ö —Ñ–∏–ª–∏–∞–ª–∞—Ö.`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –æ–ø—Ü–∏—è–º–∏
    const result = confirm(message + '\n\n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —ç—Ç–æ–º—É —Ñ–∏–ª–∏–∞–ª—É?');
    
    if (result) {
        try {
            const { requestAdditionalBranch } = await import('./userBranches.js');
            await requestAdditionalBranch(selectedBranchId, `–ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø–æ–ø—ã—Ç–∫—É ${action.toLowerCase()}`);
            alert('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ñ–∏–ª–∏–∞–ª—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        } catch (error) {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ' + error.message);
        }
    }
}