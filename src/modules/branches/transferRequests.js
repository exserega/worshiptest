// Transfer Requests Module
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Ñ–∏–ª–∏–∞–ª–∞–º–∏

// Firebase —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ HTML
const db = firebase.firestore();

import { getCurrentUser } from '../auth/authCheck.js';

/**
 * –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –≤ –¥—Ä—É–≥–æ–π —Ñ–∏–ª–∏–∞–ª
 */
export async function createTransferRequest(toBranchId, reason = '') {
    const user = getCurrentUser();
    if (!user) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }
    
    if (!user.branchId) {
        throw new Error('–í—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —Ñ–∏–ª–∏–∞–ª—É');
    }
    
    if (user.branchId === toBranchId) {
        throw new Error('–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–º —Ñ–∏–ª–∏–∞–ª–µ');
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏
        const activeRequests = await db.collection('transferRequests')
            .where('userId', '==', user.id)
            .where('status', '==', 'pending')
            .get();
            
        if (!activeRequests.empty) {
            throw new Error('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥');
        }
        
        const request = {
            userId: user.id,
            userName: user.name,
            userEmail: user.email,
            fromBranchId: user.branchId,
            toBranchId: toBranchId,
            reason: reason,
            status: 'pending',
            createdAt: firebase.firestore.FieldValue.serverTimestamp()
        };
        
        const docRef = await db.collection('transferRequests').add(request);
        console.log('üìã Transfer request created:', docRef.id);
        
        return {
            id: docRef.id,
            ...request
        };
    } catch (error) {
        console.error('Error creating transfer request:', error);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserTransferRequests(userId = null) {
    const targetUserId = userId || getCurrentUser()?.id;
    if (!targetUserId) return [];
    
    try {
        const snapshot = await db.collection('transferRequests')
            .where('userId', '==', targetUserId)
            .orderBy('createdAt', 'desc')
            .limit(10)
            .get();
        
        const requests = [];
        snapshot.forEach(doc => {
            requests.push({
                id: doc.id,
                ...doc.data()
            });
        });
        
        console.log(`üìã Found ${requests.length} transfer requests`);
        return requests;
    } catch (error) {
        console.error('Error getting user transfer requests:', error);
        return [];
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function getPendingTransferRequests() {
    const user = getCurrentUser();
    if (!user || user.role !== 'admin') {
        throw new Error('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞—è–≤–∫–∏');
    }
    
    try {
        const snapshot = await db.collection('transferRequests')
            .where('status', '==', 'pending')
            .orderBy('createdAt', 'asc')
            .get();
        
        const requests = [];
        for (const doc of snapshot.docs) {
            const data = doc.data();
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö
            const [fromBranch, toBranch] = await Promise.all([
                db.collection('branches').doc(data.fromBranchId).get(),
                db.collection('branches').doc(data.toBranchId).get()
            ]);
            
            requests.push({
                id: doc.id,
                ...data,
                fromBranchName: fromBranch.data()?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª',
                toBranchName: toBranch.data()?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª'
            });
        }
        
        console.log(`üìã Found ${requests.length} pending transfer requests`);
        return requests;
    } catch (error) {
        console.error('Error getting pending transfer requests:', error);
        return [];
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function processTransferRequest(requestId, approve, adminComment = '') {
    const admin = getCurrentUser();
    if (!admin || admin.role !== 'admin') {
        throw new Error('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏');
    }
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        const requestDoc = await db.collection('transferRequests').doc(requestId).get();
        if (!requestDoc.exists) {
            throw new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        const request = requestDoc.data();
        if (request.status !== 'pending') {
            throw new Error('–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
        }
        
        const batch = db.batch();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        batch.update(db.collection('transferRequests').doc(requestId), {
            status: approve ? 'approved' : 'rejected',
            processedAt: firebase.firestore.FieldValue.serverTimestamp(),
            processedBy: admin.id,
            adminComment: adminComment
        });
        
        if (approve) {
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            batch.update(db.collection('users').doc(request.userId), {
                branchId: request.toBranchId,
                updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
                updatedBy: admin.id
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤
            batch.update(db.collection('branches').doc(request.fromBranchId), {
                memberCount: firebase.firestore.FieldValue.increment(-1)
            });
            
            batch.update(db.collection('branches').doc(request.toBranchId), {
                memberCount: firebase.firestore.FieldValue.increment(1)
            });
        }
        
        await batch.commit();
        
        console.log(`üìã Transfer request ${requestId} ${approve ? 'approved' : 'rejected'}`);
        return true;
    } catch (error) {
        console.error('Error processing transfer request:', error);
        throw error;
    }
}

/**
 * –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
 */
export async function cancelTransferRequest(requestId) {
    const user = getCurrentUser();
    if (!user) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }
    
    try {
        const requestDoc = await db.collection('transferRequests').doc(requestId).get();
        if (!requestDoc.exists) {
            throw new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        const request = requestDoc.data();
        if (request.userId !== user.id && user.role !== 'admin') {
            throw new Error('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É');
        }
        
        if (request.status !== 'pending') {
            throw new Error('–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏');
        }
        
        await db.collection('transferRequests').doc(requestId).update({
            status: 'cancelled',
            cancelledAt: firebase.firestore.FieldValue.serverTimestamp(),
            cancelledBy: user.id
        });
        
        console.log(`üìã Transfer request ${requestId} cancelled`);
        return true;
    } catch (error) {
        console.error('Error cancelling transfer request:', error);
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.transferRequests = {
    createTransferRequest,
    getUserTransferRequests,
    getPendingTransferRequests,
    processTransferRequest,
    cancelTransferRequest
};

console.log('üìã Transfer Requests module loaded');