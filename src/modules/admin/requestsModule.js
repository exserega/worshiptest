// ====================================
// REQUESTS MODULE FOR ADMIN PANEL
// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
// ====================================

import { 
    getRequestsByType, 
    approveJoinRequest, 
    rejectRequest,
    approveBranchRequest,
    REQUEST_TYPES,
    REQUEST_STATUS 
} from '../requests/requestsAPI.js';

// Firebase –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
const db = window.firebase?.firestore?.() || null;

// ====================================
// STATE
// ====================================

let joinRequests = [];
let branchRequests = [];
let currentUser = null;
let branchesCache = {}; // –ö—ç—à —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

// ====================================
// INITIALIZATION
// ====================================

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –∑–∞—è–≤–æ–∫
 */
export async function initRequestsModule(user) {
    console.log('üöÄ Initializing requests module...');
    currentUser = user;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª–∏–∞–ª—ã –¥–ª—è –∫—ç—à–∞
    await loadBranchesCache();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏
    await loadJoinRequests();
    await loadBranchRequests();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventHandlers();
    
    console.log('‚úÖ Requests module initialized');
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª–∏–∞–ª—ã –≤ –∫—ç—à
 */
async function loadBranchesCache() {
    try {
        const snapshot = await db.collection('branches').get();
        branchesCache = {};
        snapshot.forEach(doc => {
            branchesCache[doc.id] = doc.data();
        });
        console.log('‚úÖ Branches loaded to cache:', Object.keys(branchesCache).length);
    } catch (error) {
        console.error('Error loading branches cache:', error);
    }
}

// ====================================
// DATA LOADING
// ====================================

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
 */
async function loadJoinRequests() {
    try {
        const result = await getRequestsByType(REQUEST_TYPES.BRANCH_JOIN, REQUEST_STATUS.PENDING);
        if (result.success) {
            joinRequests = result.requests;
            displayJoinRequests();
        }
    } catch (error) {
        console.error('Error loading join requests:', error);
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–æ–≤
 */
async function loadBranchRequests() {
    try {
        const result = await getRequestsByType(REQUEST_TYPES.BRANCH_CREATE, REQUEST_STATUS.PENDING);
        if (result.success) {
            branchRequests = result.requests;
            displayBranchRequests();
        }
    } catch (error) {
        console.error('Error loading branch requests:', error);
    }
}

// ====================================
// UI DISPLAY
// ====================================

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
 */
function displayJoinRequests() {
    const container = document.getElementById('join-requests-list');
    if (!container) return;
    
    if (joinRequests.length === 0) {
        container.innerHTML = '<div class="empty-state">–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ</div>';
        return;
    }
    
    container.innerHTML = joinRequests.map(request => {
        const createdAt = request.createdAt?.toDate ? request.createdAt.toDate() : new Date(request.createdAt);
        
        return `
            <div class="request-card" data-request-id="${request.id}">
                <div class="request-header">
                    <div class="request-info">
                        <h4>${request.userData?.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</h4>
                        <p class="request-contact">${request.userData?.email || request.userData?.phone || '–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'}</p>
                    </div>
                    <span class="request-date">${createdAt.toLocaleDateString('ru-RU')}</span>
                </div>
                
                <div class="request-details">
                    <div class="detail-item">
                        <span class="detail-label">–§–∏–ª–∏–∞–ª:</span>
                        <span class="detail-value">${getBranchName(request.branchId)}</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">–°—Ç–∞—Ç—É—Å:</span>
                        <span class="badge badge-warning">–û–∂–∏–¥–∞–µ—Ç</span>
                    </div>
                </div>
                
                <div class="request-actions">
                    <button class="button success small" onclick="window.approveJoinRequest('${request.id}')">
                        <i class="fas fa-check"></i> –û–¥–æ–±—Ä–∏—Ç—å
                    </button>
                    <button class="button danger small" onclick="window.rejectJoinRequest('${request.id}')">
                        <i class="fas fa-times"></i> –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–æ–≤
 */
function displayBranchRequests() {
    const container = document.getElementById('branch-requests-list');
    if (!container) return;
    
    if (branchRequests.length === 0) {
        container.innerHTML = '<div class="empty-state">–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–æ–≤</div>';
        return;
    }
    
    container.innerHTML = branchRequests.map(request => {
        const createdAt = request.createdAt?.toDate ? request.createdAt.toDate() : new Date(request.createdAt);
        
        return `
            <div class="request-card" data-request-id="${request.id}">
                <div class="request-header">
                    <div class="request-info">
                        <h4>–ù–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª: ${request.branchData?.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h4>
                        <p class="request-location">
                            <i class="fas fa-map-marker-alt"></i> 
                            ${request.branchData?.city || '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}
                        </p>
                    </div>
                    <span class="request-date">${createdAt.toLocaleDateString('ru-RU')}</span>
                </div>
                
                <div class="request-details">
                    ${request.branchData?.address ? `
                        <div class="detail-item">
                            <span class="detail-label">–ê–¥—Ä–µ—Å:</span>
                            <span class="detail-value">${request.branchData.address}</span>
                        </div>
                    ` : ''}
                    ${request.branchData?.contactPhone ? `
                        <div class="detail-item">
                            <span class="detail-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                            <span class="detail-value">${request.branchData.contactPhone}</span>
                        </div>
                    ` : ''}
                    ${request.branchData?.contactSocial ? `
                        <div class="detail-item">
                            <span class="detail-label">–°–æ—Ü—Å–µ—Ç—å:</span>
                            <span class="detail-value">${request.branchData.contactSocial}</span>
                        </div>
                    ` : ''}
                </div>
                
                <div class="request-from">
                    <span class="detail-label">–ó–∞—è–≤–∫—É –ø–æ–¥–∞–ª:</span>
                    <span>${await getUserName(request.userId)}</span>
                </div>
                
                <div class="request-actions">
                    <button class="button success small" onclick="window.approveBranchRequest('${request.id}')">
                        <i class="fas fa-check"></i> –°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª–∏–∞–ª
                    </button>
                    <button class="button danger small" onclick="window.rejectBranchRequest('${request.id}')">
                        <i class="fas fa-times"></i> –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

// ====================================
// ACTIONS
// ====================================

/**
 * –û–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
 */
window.approveJoinRequest = async function(requestId) {
    if (!confirm('–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ?')) return;
    
    try {
        const result = await approveJoinRequest(requestId);
        if (result.success) {
            alert('‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞');
            await loadJoinRequests(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞: ' + result.error);
        }
    } catch (error) {
        console.error('Error approving join request:', error);
        alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    }
};

/**
 * –û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
 */
window.rejectJoinRequest = async function(requestId) {
    if (!confirm('–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ?')) return;
    
    try {
        const result = await rejectRequest(requestId);
        if (result.success) {
            alert('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
            await loadJoinRequests(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞: ' + result.error);
        }
    } catch (error) {
        console.error('Error rejecting join request:', error);
        alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    }
};

/**
 * –û–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
 */
window.approveBranchRequest = async function(requestId) {
    if (!confirm('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∑–∞—è–≤–∫–∏?')) return;
    
    try {
        const result = await approveBranchRequest(requestId);
        if (result.success) {
            alert('‚úÖ –§–∏–ª–∏–∞–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            await loadBranchRequests(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞: ' + result.error);
        }
    } catch (error) {
        console.error('Error approving branch request:', error);
        alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–ª–∏–∞–ª–∞');
    }
};

/**
 * –û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
 */
window.rejectBranchRequest = async function(requestId) {
    if (!confirm('–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞?')) return;
    
    try {
        const result = await rejectRequest(requestId);
        if (result.success) {
            alert('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
            await loadBranchRequests(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞: ' + result.error);
        }
    } catch (error) {
        console.error('Error rejecting branch request:', error);
        alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    }
};

// ====================================
// HELPERS
// ====================================

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –ø–æ ID
 */
function getBranchName(branchId) {
    if (!branchId) return '–ù–µ —É–∫–∞–∑–∞–Ω';
    
    // –ò—â–µ–º –≤ –∫—ç—à–µ
    const branch = branchesCache[branchId];
    if (branch) {
        return branch.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª';
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫—ç—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID
    return `–§–∏–ª–∏–∞–ª ${branchId}`;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
 */
async function getUserName(userId) {
    try {
        const userDoc = await db.collection('users').doc(userId).get();
        if (userDoc.exists) {
            const userData = userDoc.data();
            return userData.name || userData.email || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        }
    } catch (error) {
        console.error('Error getting user name:', error);
    }
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
}

// ====================================
// EVENT HANDLERS
// ====================================

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventHandlers() {
    // –§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
    const requestStatusFilter = document.getElementById('request-status-filter');
    if (requestStatusFilter) {
        requestStatusFilter.addEventListener('change', async (e) => {
            const status = e.target.value || null;
            const result = await getRequestsByType(REQUEST_TYPES.BRANCH_JOIN, status);
            if (result.success) {
                joinRequests = result.requests;
                displayJoinRequests();
            }
        });
    }
    
    // –§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ñ–∏–ª–∏–∞–ª—ã
    const branchRequestStatusFilter = document.getElementById('branch-request-status-filter');
    if (branchRequestStatusFilter) {
        branchRequestStatusFilter.addEventListener('change', async (e) => {
            const status = e.target.value || null;
            const result = await getRequestsByType(REQUEST_TYPES.BRANCH_CREATE, status);
            if (result.success) {
                branchRequests = result.requests;
                displayBranchRequests();
            }
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
export {
    loadJoinRequests,
    loadBranchRequests
};