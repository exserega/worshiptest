// Admin Setup Script
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

const auth = firebase.auth();
const db = firebase.firestore();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
export async function makeUserAdmin(userEmail) {
    try {
        console.log('üîê Making user admin:', userEmail);
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
        const usersSnapshot = await db.collection('users')
            .where('email', '==', userEmail)
            .limit(1)
            .get();
            
        if (usersSnapshot.empty) {
            console.error('User not found with email:', userEmail);
            return false;
        }
        
        const userDoc = usersSnapshot.docs[0];
        const userId = userDoc.id;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.collection('users').doc(userId).update({
            role: 'admin',
            status: 'active',
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        console.log('‚úÖ User is now admin:', userId);
        return true;
        
    } catch (error) {
        console.error('Error making user admin:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
export async function createFirstBranch() {
    try {
        console.log('üìç Creating first branch...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∏–ª–∏–∞–ª—ã
        const branchesSnapshot = await db.collection('branches').limit(1).get();
        
        if (!branchesSnapshot.empty) {
            console.log('Branch already exists');
            return branchesSnapshot.docs[0].id;
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª–∏–∞–ª
        const branchData = {
            name: '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª–∏–∞–ª',
            location: '–ú–æ—Å–∫–≤–∞',
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            memberCount: 0
        };
        
        const docRef = await db.collection('branches').add(branchData);
        console.log('‚úÖ First branch created:', docRef.id);
        
        return docRef.id;
        
    } catch (error) {
        console.error('Error creating first branch:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ–∏–ª–∏–∞–ª—É
export async function assignUserToBranch(userEmail, branchId) {
    try {
        console.log('üìç Assigning user to branch...');
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const usersSnapshot = await db.collection('users')
            .where('email', '==', userEmail)
            .limit(1)
            .get();
            
        if (usersSnapshot.empty) {
            console.error('User not found');
            return false;
        }
        
        const userDoc = usersSnapshot.docs[0];
        const userId = userDoc.id;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.collection('users').doc(userId).update({
            branchId: branchId,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ñ–∏–ª–∏–∞–ª–∞
        await db.collection('branches').doc(branchId).update({
            memberCount: firebase.firestore.FieldValue.increment(1)
        });
        
        console.log('‚úÖ User assigned to branch');
        return true;
        
    } catch (error) {
        console.error('Error assigning user to branch:', error);
        return false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
window.adminSetup = {
    makeUserAdmin,
    createFirstBranch,
    assignUserToBranch,
    
    // –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ–≥–æ
    async setupAll(userEmail) {
        console.log('üöÄ Starting admin setup for:', userEmail);
        
        // 1. –î–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º
        const adminSuccess = await makeUserAdmin(userEmail);
        if (!adminSuccess) {
            console.error('Failed to make user admin');
            return;
        }
        
        // 2. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª–∏–∞–ª
        const branchId = await createFirstBranch();
        if (!branchId) {
            console.error('Failed to create branch');
            return;
        }
        
        // 3. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∞ –∫ —Ñ–∏–ª–∏–∞–ª—É
        const assignSuccess = await assignUserToBranch(userEmail, branchId);
        if (!assignSuccess) {
            console.error('Failed to assign user to branch');
            return;
        }
        
        console.log('‚úÖ Admin setup completed successfully!');
        console.log('üìç Branch ID:', branchId);
        console.log('üîê Admin email:', userEmail);
        console.log('üëâ Now you can access /public/admin.html');
    }
};

console.log('üõ†Ô∏è Admin setup module loaded');
console.log('To make yourself admin, run in console:');
console.log('adminSetup.setupAll("your-email@example.com")');