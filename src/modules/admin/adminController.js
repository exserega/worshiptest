/**
 * Admin Panel Controller
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 * 
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞–º–∏
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏
 */

// Firebase - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –∫–∞–∫ –≤ settings.js
console.log('üî• AdminController module loading, firebase available:', typeof firebase !== 'undefined');
const auth = firebase.auth();
const db = firebase.firestore();
console.log('üî• Firebase services initialized in adminController');

// –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
import { initUserManagement, updateFilter, changeUserRole, changeUserStatus, assignUserToBranch, exportUsersToCSV } from './userManagement.js';
import userListUI from './userListUI.js';
import { getAllBranches, createBranch } from '../branches/branchManager.js';
import { getPendingTransferRequests, processTransferRequest } from '../branches/transferRequests.js';
import { checkAndCreateInitialBranch, assignUsersToDefaultBranch } from '../branches/initialBranchSetup.js';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ
const state = {
    currentTab: 'users',
    branches: [],
    currentUser: null,
    isRootAdmin: false
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
let elements = {};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 */
export async function initAdminPanel() {
    console.log('üõ†Ô∏è Initializing admin panel...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        await checkAdminAccess();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        initDOMElements();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await loadInitialData();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventHandlers();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        showTab('users');
        
        console.log('‚úÖ Admin panel initialized');
        
    } catch (error) {
        console.error('‚ùå Failed to initialize admin panel:', error);
        showAccessDenied(error.message);
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
async function checkAdminAccess() {
    const user = auth.currentUser;
    
    if (!user) {
        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Å custom claims
    try {
        const idTokenResult = await user.getIdTokenResult();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –≤ custom claims
        if (idTokenResult.claims.role === 'admin') {
            console.log('‚úÖ Admin access granted via custom claims');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            const userDoc = await db.collection('users').doc(user.uid).get();
            if (userDoc.exists) {
                state.currentUser = {
                    id: user.uid,
                    ...userDoc.data()
                };
                state.isRootAdmin = userDoc.data().isFounder || userDoc.data().isRootAdmin || false;
            }
            
            return;
        }
    } catch (error) {
        console.error('Error checking custom claims:', error);
    }
    
    // Fallback: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ Firestore
    const userDoc = await db.collection('users').doc(user.uid).get();
    if (!userDoc.exists) {
        throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const userData = userDoc.data();
    if (userData.role !== 'admin') {
        throw new Error('–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }
    
    state.currentUser = {
        id: user.uid,
        ...userData
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
    // (–ø–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥)
    state.isRootAdmin = userData.isFounder || userData.isRootAdmin || false;
    
    console.log('‚úÖ Admin access granted', {
        userId: user.uid,
        isRootAdmin: state.isRootAdmin
    });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DOM —ç–ª–µ–º–µ–Ω—Ç—ã
 */
function initDOMElements() {
    elements = {
        // –í–∫–ª–∞–¥–∫–∏
        navTabs: document.querySelectorAll('.nav-tab'),
        tabContents: document.querySelectorAll('.tab-content'),
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤–∫–ª–∞–¥–æ–∫
        usersTab: document.getElementById('users-tab'),
        branchesTab: document.getElementById('branches-tab'),
        requestsTab: document.getElementById('requests-tab'),
        
        // –ö–Ω–æ–ø–∫–∏
        addBranchBtn: document.getElementById('add-branch-btn'),
        
        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        branchModal: document.getElementById('branch-modal'),
        userModal: document.getElementById('user-modal')
    };
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
async function loadInitialData() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ñ–∏–ª–∏–∞–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const initialBranch = await checkAndCreateInitialBranch();
        if (initialBranch) {
            console.log('üè¢ Created initial branch');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª–∏–∞–ª—ã
        state.branches = await getAllBranches();
        console.log(`üìç Loaded ${state.branches.length} branches`);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª–∏–∞–ª—ã, –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ñ–∏–ª–∏–∞–ª–∞
        if (state.branches.length > 0) {
            await assignUsersToDefaultBranch();
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        await initUserManagement();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        userListUI.initUserListUI(elements.usersTab);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ñ–∏–ª–∏–∞–ª–æ–≤
        userListUI.updateBranchFilter(state.branches);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        userListUI.renderUsers(state.branches);
        
    } catch (error) {
        console.error('‚ùå Error loading initial data:', error);
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventHandlers() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    elements.navTabs.forEach(tab => {
        tab.addEventListener('click', () => {
            showTab(tab.dataset.tab);
        });
    });
    
    // –§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    setupUserFilters();
    
    // –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    setupUserActions();
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞–º–∏
    setupBranchManagement();
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏
    setupRequestsManagement();
}

/**
 * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function setupUserFilters() {
    // –ü–æ–∏—Å–∫
    const searchInput = document.getElementById('user-search');
    let searchTimeout;
    
    searchInput?.addEventListener('input', (e) => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            updateFilter('search', e.target.value);
            userListUI.renderUsers(state.branches);
        }, 300);
    });
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–∏–ª–∏–∞–ª—É
    document.getElementById('filter-branch')?.addEventListener('change', (e) => {
        updateFilter('branch', e.target.value);
        userListUI.renderUsers(state.branches);
    });
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
    document.getElementById('filter-role')?.addEventListener('change', (e) => {
        updateFilter('role', e.target.value);
        userListUI.renderUsers(state.branches);
    });
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    document.getElementById('filter-status')?.addEventListener('change', (e) => {
        updateFilter('status', e.target.value);
        userListUI.renderUsers(state.branches);
    });
    
    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    document.getElementById('refresh-users')?.addEventListener('click', async () => {
        userListUI.showLoading();
        await window.userManagement.loadAllUsers();
        userListUI.renderUsers(state.branches);
    });
    
    // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    document.getElementById('export-users')?.addEventListener('click', () => {
        exportUsersToCSV();
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
function setupUserActions() {
    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è onclick –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    window.adminUI = {
        handleRoleChange: async (userId, newRole) => {
            if (confirm(`–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "${newRole === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"?`)) {
                try {
                    await changeUserRole(userId, newRole);
                    userListUI.renderUsers(state.branches);
                    showNotification('–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞', 'success');
                } catch (error) {
                    showNotification(error.message, 'error');
                }
            }
        },
        
        handleStatusChange: async (userId, newStatus) => {
            const statusText = {
                'active': '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
                'banned': '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
                'pending': '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ'
            };
            
            if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${statusText[newStatus]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?`)) {
                try {
                    await changeUserStatus(userId, newStatus);
                    userListUI.renderUsers(state.branches);
                    showNotification('–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', 'success');
                } catch (error) {
                    showNotification(error.message, 'error');
                }
            }
        },
        
        handleBranchAssign: async (userId) => {
            const branchId = await showBranchSelectionDialog(userId);
            if (branchId !== null) {
                try {
                    await assignUserToBranch(userId, branchId);
                    userListUI.renderUsers(state.branches);
                    showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ —Ñ–∏–ª–∏–∞–ª', 'success');
                } catch (error) {
                    showNotification(error.message, 'error');
                }
            }
        },
        
        showUserDetails: (userId) => {
            // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            console.log('Show details for user:', userId);
        },
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
        approveRequest: async (requestId) => {
            if (confirm('–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥?')) {
                try {
                    await processTransferRequest(requestId, true, '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
                    await renderRequests();
                    showNotification('–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞', 'success');
                } catch (error) {
                    showNotification(error.message, 'error');
                }
            }
        },
        
        rejectRequest: async (requestId) => {
            const reason = prompt('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:');
            if (reason) {
                try {
                    await processTransferRequest(requestId, false, reason);
                    await renderRequests();
                    showNotification('–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', 'info');
                } catch (error) {
                    showNotification(error.message, 'error');
                }
            }
        }
    };
}

/**
 * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞–º–∏
 */
function setupBranchManagement() {
    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
    elements.addBranchBtn?.addEventListener('click', () => {
        showCreateBranchModal();
    });
    
    // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
    document.getElementById('branch-form')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const name = document.getElementById('branch-name').value.trim();
        const location = document.getElementById('branch-location').value.trim();
        
        if (!name) return;
        
        try {
            const newBranch = await createBranch({ name, location });
            state.branches.push(newBranch);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            userListUI.updateBranchFilter(state.branches);
            renderBranches();
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            elements.branchModal.style.display = 'none';
            
            showNotification('–§–∏–ª–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', 'success');
            
        } catch (error) {
            showNotification(error.message, 'error');
        }
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏
 */
function setupRequestsManagement() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥–∫—É
 */
function showTab(tabName) {
    state.currentTab = tabName;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    elements.navTabs.forEach(tab => {
        if (tab.dataset.tab === tabName) {
            tab.classList.add('active');
        } else {
            tab.classList.remove('active');
        }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    elements.tabContents.forEach(content => {
        if (content.id === `${tabName}-tab`) {
            content.classList.add('active');
        } else {
            content.classList.remove('active');
        }
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
    switch (tabName) {
        case 'users':
            userListUI.renderUsers(state.branches);
            break;
        case 'branches':
            renderBranches();
            break;
        case 'requests':
            renderRequests();
            break;
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–∏–ª–∏–∞–ª—ã
 */
function renderBranches() {
    const container = document.getElementById('branches-list');
    if (!container) return;
    
    if (state.branches.length === 0) {
        container.innerHTML = '<p class="empty-state">–§–∏–ª–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }
    
    container.innerHTML = state.branches.map(branch => `
        <div class="branch-card" data-branch-id="${branch.id}">
            <div class="branch-name">${branch.name}</div>
            <div class="branch-location">${branch.location || '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
            <div class="branch-stats">
                <div class="stat">
                    <span class="stat-value">${branch.memberCount || 0}</span>
                    <span class="stat-label">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                </div>
                <div class="stat">
                    <span class="stat-value">${branch.setlistCount || 0}</span>
                    <span class="stat-label">–°–µ—Ç-–ª–∏—Å—Ç–æ–≤</span>
                </div>
            </div>
        </div>
    `).join('');
}

/**
 * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∑–∞—è–≤–∫–∏
 */
async function renderRequests() {
    const container = document.getElementById('requests-list');
    if (!container) return;
    
    try {
        const requests = await getPendingTransferRequests();
        
        if (requests.length === 0) {
            container.innerHTML = '<p class="empty-state">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫</p>';
            return;
        }
        
        container.innerHTML = requests.map(request => {
            const date = request.createdAt?.toDate ? request.createdAt.toDate() : new Date();
            const dateStr = new Intl.DateTimeFormat('ru', {
                day: 'numeric',
                month: 'long',
                hour: '2-digit',
                minute: '2-digit'
            }).format(date);
            
            return `
                <div class="request-card" data-request-id="${request.id}">
                    <div class="request-header">
                        <span class="request-user">${request.userName}</span>
                        <span class="request-date">${dateStr}</span>
                    </div>
                    <div class="request-branches">
                        <span class="branch-tag">${request.fromBranchName}</span>
                        <i class="fas fa-arrow-right arrow-icon"></i>
                        <span class="branch-tag">${request.toBranchName}</span>
                    </div>
                    ${request.reason ? `<div class="request-reason">"${request.reason}"</div>` : ''}
                    <div class="request-actions">
                        <button class="btn-primary" onclick="window.adminUI.approveRequest('${request.id}')">
                            <i class="fas fa-check"></i> –û–¥–æ–±—Ä–∏—Ç—å
                        </button>
                        <button class="btn-secondary" onclick="window.adminUI.rejectRequest('${request.id}')">
                            <i class="fas fa-times"></i> –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                        </button>
                    </div>
                </div>
            `;
        }).join('');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂
        const badge = document.getElementById('requests-badge');
        if (badge) {
            badge.textContent = requests.length;
            badge.style.display = requests.length > 0 ? 'block' : 'none';
        }
        
    } catch (error) {
        container.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫</p>';
        console.error('Error loading requests:', error);
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞
 */
async function showBranchSelectionDialog(userId) {
    return new Promise((resolve) => {
        const branches = state.branches;
        const options = branches.map(b => `<option value="${b.id}">${b.name}</option>`).join('');
        
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.style.display = 'flex';
        modal.innerHTML = `
            <div class="modal-content">
                <span class="close-modal" onclick="this.closest('.modal').remove()">&times;</span>
                <h3>–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ñ–∏–ª–∏–∞–ª</h3>
                <form id="branch-assign-form">
                    <div class="form-group">
                        <label>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:</label>
                        <select id="branch-select" required>
                            <option value="">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</option>
                            ${options}
                        </select>
                    </div>
                    <div class="modal-actions">
                        <button type="submit" class="btn-primary">–ù–∞–∑–Ω–∞—á–∏—Ç—å</button>
                        <button type="button" class="btn-secondary" onclick="this.closest('.modal').remove()">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        modal.querySelector('#branch-assign-form').addEventListener('submit', (e) => {
            e.preventDefault();
            const branchId = modal.querySelector('#branch-select').value;
            modal.remove();
            resolve(branchId);
        });
        
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
                resolve(null);
            }
        });
    });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
 */
function showCreateBranchModal() {
    document.getElementById('branch-modal-title').textContent = '–°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª–∏–∞–ª';
    document.getElementById('branch-name').value = '';
    document.getElementById('branch-location').value = '';
    elements.branchModal.style.display = 'flex';
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
        <span>${message}</span>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.classList.add('show');
    }, 10);
    
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
 */
function showAccessDenied(message) {
    document.body.innerHTML = `
        <div class="access-denied">
            <i class="fas fa-lock"></i>
            <h1>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h1>
            <p>${message}</p>
            <a href="/" class="btn-primary">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
        </div>
    `;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.adminController = {
    initAdminPanel
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω
    window._adminControllerLoaded = true;
    console.log('üî• Admin controller loaded');
    
    // –ñ–¥–µ–º –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ –≤ settings.html
    let initialized = false;
    let authCheckTimeout = null;
    
    console.log('üîÑ Setting up onAuthStateChanged listener');
    
    auth.onAuthStateChanged((user) => {
        console.log('üîî Auth state changed, user:', user ? user.uid : 'null', 'initialized:', initialized);
        
        if (initialized) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if (authCheckTimeout) {
            clearTimeout(authCheckTimeout);
            authCheckTimeout = null;
        }
        
        if (user) {
            initialized = true;
            console.log('üîê User detected:', user.uid, user.email);
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            setTimeout(() => {
                initAdminPanel();
            }, 500);
        } else {
            console.log('‚è≥ No user yet, waiting...');
            // –î–∞–µ–º Firebase –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
            authCheckTimeout = setTimeout(() => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
                const currentUser = auth.currentUser;
                if (!currentUser) {
                    console.log('‚ùå No user authenticated after timeout');
                    showAccessDenied('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                } else {
                    console.log('‚úÖ User found after timeout:', currentUser.uid);
                    initialized = true;
                    initAdminPanel();
                }
            }, 2000); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
        }
    });
});