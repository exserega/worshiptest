/**
 * User Management Module for Admin Panel
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º, —Ä–æ–ª—è–º, —Å—Ç–∞—Ç—É—Å–∞–º
 * - –ü–æ–∏—Å–∫ –ø–æ email/–∏–º–µ–Ω–∏
 * - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
 * - –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–∏–ª–∏–∞–ª—ã
 */

const db = firebase.firestore();
const auth = firebase.auth();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è
const state = {
    users: [],
    filteredUsers: [],
    filters: {
        branch: '',
        role: '',
        status: '',
        search: ''
    },
    sortBy: 'createdAt',
    sortOrder: 'desc'
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
export async function initUserManagement() {
    console.log('üë• Initializing user management module...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await loadAllUsers();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setupUserFilters();
    setupUserSearch();
    
    return state.users;
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Firestore
 */
async function loadAllUsers() {
    try {
        console.log('üìä Loading all users...');
        
        const snapshot = await db.collection('users')
            .orderBy('createdAt', 'desc')
            .get();
        
        state.users = [];
        snapshot.forEach(doc => {
            state.users.push({
                id: doc.id,
                ...doc.data(),
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ –¥–∞—Ç—É
                createdAt: doc.data().createdAt?.toDate() || new Date()
            });
        });
        
        console.log(`‚úÖ Loaded ${state.users.length} users`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        applyFilters();
        
        return state.users;
    } catch (error) {
        console.error('‚ùå Error loading users:', error);
        throw error;
    }
}

/**
 * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
 */
function applyFilters() {
    state.filteredUsers = [...state.users];
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–∏–ª–∏–∞–ª—É
    if (state.filters.branch) {
        state.filteredUsers = state.filteredUsers.filter(user => 
            user.branchId === state.filters.branch
        );
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
    if (state.filters.role) {
        state.filteredUsers = state.filteredUsers.filter(user => 
            user.role === state.filters.role
        );
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (state.filters.status) {
        state.filteredUsers = state.filteredUsers.filter(user => 
            user.status === state.filters.status
        );
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ email/–∏–º–µ–Ω–∏
    if (state.filters.search) {
        const searchLower = state.filters.search.toLowerCase();
        state.filteredUsers = state.filteredUsers.filter(user => 
            user.email?.toLowerCase().includes(searchLower) ||
            user.name?.toLowerCase().includes(searchLower) ||
            user.phone?.includes(searchLower)
        );
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sortUsers();
    
    console.log(`üîç Filtered to ${state.filteredUsers.length} users`);
}

/**
 * –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function sortUsers() {
    state.filteredUsers.sort((a, b) => {
        let aVal = a[state.sortBy];
        let bVal = b[state.sortBy];
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
        if (aVal instanceof Date) aVal = aVal.getTime();
        if (bVal instanceof Date) bVal = bVal.getTime();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫
        if (typeof aVal === 'string') aVal = aVal.toLowerCase();
        if (typeof bVal === 'string') bVal = bVal.toLowerCase();
        
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        if (state.sortOrder === 'asc') {
            return aVal > bVal ? 1 : -1;
        } else {
            return aVal < bVal ? 1 : -1;
        }
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function setupUserFilters() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±—É–¥—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    console.log('üîç User filters ready');
}

/**
 * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function setupUserSearch() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    console.log('üîé User search ready');
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
 * @param {string} filterType - –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ (branch, role, status, search)
 * @param {string} value - –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
 */
export function updateFilter(filterType, value) {
    state.filters[filterType] = value;
    applyFilters();
    return state.filteredUsers;
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
 * @param {string} field - –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 * @param {string} order - –ü–æ—Ä—è–¥–æ–∫ (asc/desc)
 */
export function updateSort(field, order = 'asc') {
    state.sortBy = field;
    state.sortOrder = order;
    applyFilters();
    return state.filteredUsers;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export function getFilteredUsers() {
    return state.filteredUsers;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */
export function getUserStats() {
    const stats = {
        total: state.users.length,
        active: state.users.filter(u => u.status === 'active').length,
        pending: state.users.filter(u => u.status === 'pending').length,
        banned: state.users.filter(u => u.status === 'banned' || u.status === 'blocked').length,
        admins: state.users.filter(u => u.role === 'admin').length,
        users: state.users.filter(u => u.role === 'user').length,
        byBranch: {}
    };
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
    state.users.forEach(user => {
        const branchId = user.branchId || 'unassigned';
        stats.byBranch[branchId] = (stats.byBranch[branchId] || 0) + 1;
    });
    
    return stats;
}

/**
 * –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} newRole - –ù–æ–≤–∞—è —Ä–æ–ª—å (user/admin)
 */
export async function changeUserRole(userId, newRole) {
    try {
        console.log(`üîÑ Changing role for user ${userId} to ${newRole}`);
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∏–∑ rootAdminManager
        const { canChangeUserRole } = await import('./rootAdminManager.js');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏
        const permission = await canChangeUserRole(userId, auth.currentUser?.uid);
        if (!permission.allowed) {
            throw new Error(permission.reason);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Firestore
        await db.collection('users').doc(userId).update({
            role: newRole,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
            updatedBy: auth.currentUser.uid
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        const userIndex = state.users.findIndex(u => u.id === userId);
        if (userIndex !== -1) {
            state.users[userIndex].role = newRole;
            applyFilters();
        }
        
        console.log(`‚úÖ Role changed successfully`);
        return true;
        
    } catch (error) {
        console.error('‚ùå Error changing user role:', error);
        throw error;
    }
}

/**
 * –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} newStatus - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (pending/active/banned)
 */
export async function changeUserStatus(userId, newStatus) {
    try {
        console.log(`üîÑ Changing status for user ${userId} to ${newStatus}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Firestore
        await db.collection('users').doc(userId).update({
            status: newStatus,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
            updatedBy: auth.currentUser.uid
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        const userIndex = state.users.findIndex(u => u.id === userId);
        if (userIndex !== -1) {
            state.users[userIndex].status = newStatus;
            applyFilters();
        }
        
        console.log(`‚úÖ Status changed successfully`);
        return true;
        
    } catch (error) {
        console.error('‚ùå Error changing user status:', error);
        throw error;
    }
}

/**
 * –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∏–ª–∏–∞–ª
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} branchId - ID —Ñ–∏–ª–∏–∞–ª–∞
 */
export async function assignUserToBranch(userId, branchId) {
    try {
        console.log(`üè¢ Assigning user ${userId} to branch ${branchId}`);
        
        const batch = db.batch();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∏–ª–∏–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userIndex = state.users.findIndex(u => u.id === userId);
        const oldBranchId = userIndex !== -1 ? state.users[userIndex].branchId : null;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        batch.update(db.collection('users').doc(userId), {
            branchId: branchId || null,
            status: 'active', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
            updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
            updatedBy: auth.currentUser.uid
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ)
        if (oldBranchId) {
            const oldBranchRef = db.collection('branches').doc(oldBranchId);
            const oldBranchDoc = await oldBranchRef.get();
            if (oldBranchDoc.exists) {
                batch.update(oldBranchRef, {
                    memberCount: firebase.firestore.FieldValue.increment(-1)
                });
            }
        }
        
        if (branchId) {
            const newBranchRef = db.collection('branches').doc(branchId);
            const newBranchDoc = await newBranchRef.get();
            if (newBranchDoc.exists) {
                batch.update(newBranchRef, {
                    memberCount: firebase.firestore.FieldValue.increment(1)
                });
            }
        }
        
        await batch.commit();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        if (userIndex !== -1) {
            state.users[userIndex].branchId = branchId || null;
            state.users[userIndex].status = 'active';
            applyFilters();
        }
        
        console.log(`‚úÖ User assigned to branch successfully`);
        return true;
        
    } catch (error) {
        console.error('‚ùå Error assigning user to branch:', error);
        throw error;
    }
}

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param {Array<string>} userIds - –ú–∞—Å—Å–∏–≤ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
 */
export async function bulkUpdateUsers(userIds, updates) {
    try {
        console.log(`üîÑ Bulk updating ${userIds.length} users...`);
        
        const batch = db.batch();
        
        userIds.forEach(userId => {
            batch.update(db.collection('users').doc(userId), {
                ...updates,
                updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
                updatedBy: auth.currentUser.uid
            });
        });
        
        await batch.commit();
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await loadAllUsers();
        
        console.log(`‚úÖ Bulk update completed`);
        return true;
        
    } catch (error) {
        console.error('‚ùå Error in bulk update:', error);
        throw error;
    }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV
 */
export function exportUsersToCSV() {
    const headers = ['ID', 'Name', 'Email', 'Phone', 'Role', 'Status', 'Branch', 'Created'];
    const rows = state.filteredUsers.map(user => [
        user.id,
        user.name || '',
        user.email || '',
        user.phone || '',
        user.role,
        user.status,
        user.branchId || 'Unassigned',
        user.createdAt.toLocaleDateString()
    ]);
    
    const csv = [headers, ...rows]
        .map(row => row.map(cell => `"${cell}"`).join(','))
        .join('\n');
    
    // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `users_${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    URL.revokeObjectURL(url);
    
    console.log(`üì• Exported ${rows.length} users to CSV`);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.userManagement = {
    initUserManagement,
    updateFilter,
    updateSort,
    getFilteredUsers,
    getUserStats,
    changeUserRole,
    changeUserStatus,
    assignUserToBranch,
    bulkUpdateUsers,
    exportUsersToCSV,
    loadAllUsers
};