/**
 * Admin Core Module
 * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª—è–µ—Ç:
 * - –°–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
 * - –ù–∞–≤–∏–≥–∞—Ü–∏–µ–π –º–µ–∂–¥—É —Ç–∞–±–∞–º–∏
 * - –ë–∞–∑–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
 */

// ====================================
// –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
// ====================================

window.adminState = {
    currentUser: null,
    isRootAdmin: false,
    currentTab: 'users',
    users: [],
    branches: [],

    filters: {
        role: '',
        status: '',
        branch: '',
        search: ''
    }
};

// ====================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ====================================

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
 * @param {Object} user - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 * @param {boolean} isRootAdmin - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
 */
export async function initAdminPanel(user, isRootAdmin) {
    console.log('üöÄ Initializing admin panel...');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    window.adminState.currentUser = user;
    window.adminState.isRootAdmin = isRootAdmin;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateAdminInfo();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventHandlers();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await loadInitialData();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–∞–±
    showTab('users');
}

// ====================================
// UI –û–ë–ù–û–í–õ–ï–ù–ò–Ø
// ====================================

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ –≤ —à–∞–ø–∫–µ
 */
function updateAdminInfo() {
    const nameEl = document.getElementById('admin-name');
    const roleEl = document.getElementById('admin-role');
    
    if (nameEl) {
        nameEl.textContent = window.adminState.currentUser.name || 
                            window.adminState.currentUser.email;
    }
    
    if (roleEl) {
        roleEl.textContent = window.adminState.isRootAdmin ? '–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å' : '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
        roleEl.className = 'badge ' + (window.adminState.isRootAdmin ? 'badge-danger' : 'badge-warning');
    }
}

// ====================================
// –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
// ====================================

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
async function loadInitialData() {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingState('users');
        showLoadingState('branches');
        showLoadingState('requests');
        showLoadingState('branch-requests');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [users, branches, branchRequests] = await Promise.all([
            loadUsers(),
            loadBranches(), 
            loadBranchRequests()
        ]);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        window.adminState.users = users;
        window.adminState.branches = branches;
        window.adminState.branchRequests = branchRequests;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending –¥–ª—è –∑–∞—è–≤–æ–∫
        window.adminState.requests = users.filter(user => user.status === 'pending');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateBranchFilter();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const { displayUsers } = await import('./usersModule.js');
        const { displayBranches } = await import('./branchesModule.js');

        const { displayRequests } = await import('./requestsModule.js');
        const { displayBranchRequests } = await import('./branchRequestsModule.js');
        
        displayUsers();
        displayBranches();
        displayRequests();
        displayBranchRequests();
        
    } catch (error) {
        console.error('Error loading initial data:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Firestore
 */
async function loadUsers() {
    const db = firebase.firestore();
    const { currentUser, isRootAdmin } = window.adminState;
    
    let query = db.collection('users');
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ (–Ω–µ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
    if (!isRootAdmin && currentUser.branchId) {
        query = query.where('branchId', '==', currentUser.branchId);
    }
    
    const snapshot = await query.get();
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª–∏–∞–ª—ã –∏–∑ Firestore
 */
async function loadBranches() {
    const db = firebase.firestore();
    const { currentUser, isRootAdmin } = window.adminState;
    
    let query = db.collection('branches');
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ —Ñ–∏–ª–∏–∞–ª
    if (!isRootAdmin && currentUser.branchId) {
        const snapshot = await query.doc(currentUser.branchId).get();
        if (snapshot.exists) {
            return [{ id: snapshot.id, ...snapshot.data() }];
        }
        return [];
    }
    
    // –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã
    const snapshot = await query.get();
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
 */
/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ñ–∏–ª–∏–∞–ª—ã
 */
async function loadBranchRequests() {
    const db = firebase.firestore();
    try {
        const snapshot = await db.collection('branchRequests')
            .get();
        return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
        console.error('Error loading branch requests:', error);
        return [];
    }
}

// ====================================
// –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –¢–ê–ë–ê–ú
// ====================================

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∞–±
 * @param {string} tabName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–∞
 */
export function showTab(tabName) {
    window.adminState.currentTab = tabName;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
    document.querySelectorAll('.tab-button').forEach(btn => {
        btn.classList.toggle('active', btn.dataset.tab === tabName);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.toggle('active', content.id === `${tabName}-tab`);
    });
}

// ====================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
// ====================================

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventHandlers() {
    // –¢–∞–±—ã
    document.querySelectorAll('.tab-button').forEach(button => {
        button.addEventListener('click', () => {
            const tab = button.dataset.tab;
            showTab(tab);
        });
    });
    
    // –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const roleFilter = document.getElementById('role-filter');
    const statusFilter = document.getElementById('status-filter');
    const branchFilter = document.getElementById('branch-filter');
    const userSearch = document.getElementById('user-search');
    
    if (roleFilter) {
        roleFilter.addEventListener('change', async () => {
            window.adminState.filters.role = roleFilter.value;
            const { displayUsers } = await import('./usersModule.js');
            displayUsers();
        });
    }
    
    if (statusFilter) {
        statusFilter.addEventListener('change', async () => {
            window.adminState.filters.status = statusFilter.value;
            const { displayUsers } = await import('./usersModule.js');
            displayUsers();
        });
    }
    
    if (branchFilter) {
        branchFilter.addEventListener('change', async () => {
            window.adminState.filters.branch = branchFilter.value;
            const { displayUsers } = await import('./usersModule.js');
            displayUsers();
        });
    }
    
    if (userSearch) {
        userSearch.addEventListener('input', async () => {
            window.adminState.filters.search = userSearch.value;
            const { displayUsers } = await import('./usersModule.js');
            displayUsers();
        });
    }
}

// ====================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ====================================

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä —Ñ–∏–ª–∏–∞–ª–æ–≤
 */
function updateBranchFilter() {
    const select = document.getElementById('branch-filter');
    if (!select) return;
    
    select.innerHTML = '<option value="">–í—Å–µ —Ñ–∏–ª–∏–∞–ª—ã</option>' +
        window.adminState.branches.map(b => 
            `<option value="${b.id}">${b.name}</option>`
        ).join('');
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 * @param {string} section - –°–µ–∫—Ü–∏—è (users, branches, requests, branch-requests)
 */
function showLoadingState(section) {
    const container = document.getElementById(`${section}-list`);
    if (container) {
        container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
    }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param {string} message - –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
 */
function showError(message) {
    console.error(message);
    // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
}