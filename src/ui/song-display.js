/**
 * @fileoverview Song Display Module - –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Å–µ–Ω –∏ –∏—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @module SongDisplay
 * @version 1.0.0
 * @author Agape Worship Team
 * @since 2024
 */

import { 
  getTransposition, 
  transposeLyrics, 
  processLyrics, 
  highlightChords,
  getSongKey,
  domElements 
} from '../core/index.js';

// ====================================
// SONG DISPLAY UTILITIES
// ====================================

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–µ—Å–Ω–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 * @param {Object} songData - –î–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏
 * @param {string} keyToSelect - –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function displaySongDetails(songData, keyToSelect) {
  if (!songData) {
    console.warn('‚ö†Ô∏è No song data provided to displaySongDetails');
    return;
  }

  const songContent = domElements.songContent;
  if (!songContent) {
    console.warn('‚ö†Ô∏è Song content element not found');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏
  const songTitle = songData.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
  const originalLyrics = songData['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || songData.lyrics || '';
  const originalKey = getSongKey(songData);
  const targetKey = keyToSelect || originalKey;
  const bpm = songData.BPM || songData.bpm || null;
  const category = songData.sheet || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';

  // –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  let displayLyrics = originalLyrics;
  if (targetKey !== originalKey) {
    const transposition = getTransposition(originalKey, targetKey);
    displayLyrics = transposeLyrics(displayLyrics, transposition, targetKey);
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –≤—ã–¥–µ–ª—è–µ–º
  displayLyrics = processLyrics(displayLyrics);
  displayLyrics = highlightChords(displayLyrics);

  // –§–æ—Ä–º–∏—Ä—É–µ–º HTML
  const songHtml = `
    <div class="song-header">
      <h2 class="song-title">${songTitle}</h2>
      <div class="song-meta">
        <span class="song-key">–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${targetKey}</span>
        ${bpm ? `<span class="song-bpm">BPM: ${bpm}</span>` : ''}
        <span class="song-category">${category}</span>
      </div>
    </div>
    <div class="song-content-wrapper">
      <pre id="song-display" class="song-text">${displayLyrics}</pre>
    </div>
  `;

  songContent.innerHTML = songHtml;

  // –û–±–Ω–æ–≤–ª—è–µ–º BPM –¥–∏—Å–ø–ª–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
  if (bpm && domElements.bpmDisplay) {
    domElements.bpmDisplay.textContent = bpm;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É HolyChords –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
  if (songData.Holychords && domElements.holychordsButton) {
    domElements.holychordsButton.style.display = 'inline-block';
    domElements.holychordsButton.onclick = () => {
      window.open(songData.Holychords, '_blank');
    };
  } else if (domElements.holychordsButton) {
    domElements.holychordsButton.style.display = 'none';
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–º overlay
 * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
 * @param {string} selectedKey - –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 */
export function displaySongTextInMobileOverlay(song, selectedKey) {
  if (!song) {
    console.warn('‚ö†Ô∏è No song provided to displaySongTextInMobileOverlay');
    return;
  }

  console.log(`üìù displaySongTextInMobileOverlay called: ${song.name} ${selectedKey}`);

  const overlay = document.getElementById('mobile-song-preview');
  const textContainer = overlay?.querySelector('.mobile-song-text');
  
  if (!overlay || !textContainer) {
    console.warn('‚ö†Ô∏è Mobile overlay elements not found');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏
  const originalLyrics = song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || song.lyrics || '';
  const originalKey = getSongKey(song);
  const targetKey = selectedKey || originalKey;

  console.log(`üéµ –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${originalKey} ‚Üí ${targetKey}`);

  // –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  let displayLyrics = originalLyrics;
  if (targetKey !== originalKey) {
    const transposition = getTransposition(originalKey, targetKey);
    displayLyrics = transposeLyrics(displayLyrics, transposition, targetKey);
    console.log('üéµ –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
  } else {
    console.log('‚ö™ –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –≤—ã–¥–µ–ª—è–µ–º
  displayLyrics = processLyrics(displayLyrics);
  displayLyrics = highlightChords(displayLyrics);

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ overlay
  textContainer.innerHTML = `<pre class="mobile-song-display">${displayLyrics}</pre>`;
  
  console.log('üìù –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤ mobile overlay');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Å–Ω–∏ –≤ —Å–ø–∏—Å–∫–µ
 * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
 * @param {Object} options - –û–ø—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Function} options.onSelect - Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Å–Ω–∏
 * @param {Function} options.onRemove - Callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏
 * @param {boolean} options.showKey - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 * @param {boolean} options.showCategory - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
 * @param {boolean} options.showBPM - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å BPM
 * @returns {HTMLElement} DOM —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Å–Ω–∏
 */
export function createSongListItem(song, options = {}) {
  const {
    onSelect,
    onRemove,
    showKey = true,
    showCategory = true,
    showBPM = true
  } = options;

  const songElement = document.createElement('div');
  songElement.className = 'song-list-item';
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏
  const songTitle = song.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
  const songKey = getSongKey(song);
  const songCategory = song.sheet || '';
  const songBPM = song.BPM || song.bpm || null;

  // –§–æ—Ä–º–∏—Ä—É–µ–º HTML
  let songHtml = `
    <div class="song-list-item-header">
      <h3 class="song-list-item-title">${songTitle}</h3>
      <div class="song-list-item-meta">
        ${showKey ? `<span class="song-key">${songKey}</span>` : ''}
        ${showBPM && songBPM ? `<span class="song-bpm">${songBPM} BPM</span>` : ''}
        ${showCategory && songCategory ? `<span class="song-category">${songCategory}</span>` : ''}
      </div>
    </div>
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å callbacks
  if (onSelect || onRemove) {
    songHtml += '<div class="song-list-item-actions">';
    
    if (onSelect) {
      songHtml += '<button class="btn-select" title="–í—ã–±—Ä–∞—Ç—å –ø–µ—Å–Ω—é">‚ñ∂</button>';
    }
    
    if (onRemove) {
      songHtml += '<button class="btn-remove" title="–£–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é">‚úï</button>';
    }
    
    songHtml += '</div>';
  }

  songElement.innerHTML = songHtml;

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  if (onSelect) {
    const selectBtn = songElement.querySelector('.btn-select');
    const titleElement = songElement.querySelector('.song-list-item-title');
    
    const selectHandler = () => onSelect(song);
    
    if (selectBtn) selectBtn.addEventListener('click', selectHandler);
    if (titleElement) titleElement.addEventListener('click', selectHandler);
  }

  if (onRemove) {
    const removeBtn = songElement.querySelector('.btn-remove');
    if (removeBtn) {
      removeBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        onRemove(song);
      });
    }
  }

  return songElement;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
 * @param {Array} songs - –ú–∞—Å—Å–∏–≤ –ø–µ—Å–µ–Ω
 * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Object} options - –û–ø—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function displaySongsList(songs, container, options = {}) {
  if (!container) {
    console.warn('‚ö†Ô∏è No container provided to displaySongsList');
    return;
  }

  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  container.innerHTML = '';

  if (!songs || songs.length === 0) {
    container.innerHTML = `
      <div class="empty-list">
        <i class="fas fa-music"></i>
        <p>–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –ø—É—Å—Ç</p>
      </div>
    `;
    return;
  }

  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Å–µ–Ω
  songs.forEach(song => {
    const songElement = createSongListItem(song, options);
    container.appendChild(songElement);
  });
}

// ====================================
// CHORD VISIBILITY MANAGEMENT
// ====================================

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∞–∫–∫–æ—Ä–¥–æ–≤ –≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –ø–µ—Å–Ω–µ
 * @param {boolean} visible - –ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã—Ç—å –∞–∫–∫–æ—Ä–¥—ã
 */
export function toggleChordsVisibility(visible) {
  const songDisplay = document.getElementById('song-display');
  if (!songDisplay) return;

  if (visible) {
    songDisplay.classList.remove('chords-hidden');
  } else {
    songDisplay.classList.add('chords-hidden');
  }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º "—Ç–æ–ª—å–∫–æ –∞–∫–∫–æ—Ä–¥—ã"
 * @param {boolean} chordsOnly - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫–∫–æ—Ä–¥—ã
 */
export function toggleChordsOnlyMode(chordsOnly) {
  const songDisplay = document.getElementById('song-display');
  if (!songDisplay) return;

  if (chordsOnly) {
    songDisplay.classList.add('chords-only-mode');
  } else {
    songDisplay.classList.remove('chords-only-mode');
  }
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –±–ª–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ–ª—å–∫–æ –∞–∫–∫–æ—Ä–¥—ã
 * @param {boolean} hide - –°–∫—Ä—ã—Ç—å –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–æ–∫–∏ —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏
 */
export function toggleChordOnlyBlocks(hide) {
  const songDisplay = document.getElementById('song-display');
  if (!songDisplay) return;

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏
  const chordLines = songDisplay.querySelectorAll('.chord-line');
  
  chordLines.forEach(line => {
    if (hide) {
      line.style.display = 'none';
    } else {
      line.style.display = '';
    }
  });
}

// ====================================
// FONT SIZE MANAGEMENT
// ====================================

/**
 * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø–µ—Å–Ω–∏
 */
export function increaseFontSize() {
  const songDisplay = document.getElementById('song-display');
  if (!songDisplay) return;

  const currentSize = parseFloat(window.getComputedStyle(songDisplay).fontSize);
  const newSize = Math.min(currentSize + 2, 24); // –ú–∞–∫—Å–∏–º—É–º 24px
  
  songDisplay.style.fontSize = `${newSize}px`;
}

/**
 * –£–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø–µ—Å–Ω–∏
 */
export function decreaseFontSize() {
  const songDisplay = document.getElementById('song-display');
  if (!songDisplay) return;

  const currentSize = parseFloat(window.getComputedStyle(songDisplay).fontSize);
  const newSize = Math.max(currentSize - 2, 10); // –ú–∏–Ω–∏–º—É–º 10px
  
  songDisplay.style.fontSize = `${newSize}px`;
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export function resetFontSize() {
  const songDisplay = document.getElementById('song-display');
  if (!songDisplay) return;

  songDisplay.style.fontSize = ''; // –°–±—Ä–æ—Å –∫ CSS –∑–Ω–∞—á–µ–Ω–∏—é
}

// ====================================
// MODULE METADATA
// ====================================

/**
 * Song Display module metadata
 * @readonly
 */
export const metadata = {
  name: 'SongDisplay',
  version: '1.0.0',
  description: 'Song display and rendering functionality',
  functions: [
    'displaySongDetails',
    'displaySongTextInMobileOverlay',
    'createSongListItem',
    'displaySongsList',
    'toggleChordsVisibility',
    'toggleChordsOnlyMode',
    'toggleChordOnlyBlocks',
    'increaseFontSize',
    'decreaseFontSize',
    'resetFontSize'
  ],
  features: [
    'Song content rendering',
    'Mobile overlay display',
    'List item creation',
    'Chord visibility control',
    'Font size management',
    'BPM and metadata display'
  ]
};