/**
 * ===================================================================
 * SETLIST MANAGER MODULE
 * ===================================================================
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–ª–∏—Å—Ç–∞–º–∏, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω, overlay —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - startAddingSongs() - –æ—Ç–∫—Ä—ã—Ç–∏–µ overlay –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω
 * - closeAddSongsOverlay() - –∑–∞–∫—Ä—ã—Ç–∏–µ overlay
 * - addSongToSetlist() - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ –≤ —Å–µ—Ç–ª–∏—Å—Ç
 * - removeSongFromSetlist() - —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–∑ —Å–µ—Ç–ª–∏—Å—Ç–∞
 * - handleCreateSetlist() - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ç–ª–∏—Å—Ç–∞
 * - refreshSetlists() - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ç–ª–∏—Å—Ç–æ–≤
 */

// –ò–º–ø–æ—Ä—Ç—ã –∏–∑ core –º–æ–¥—É–ª–µ–π
import { eventBus, stateManager } from '../core/index.js';

// –ò–º–ø–æ—Ä—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ API
import * as state from '../../state.js';
import * as songsApi from '../js/api/songs.js';
import * as ui from '../../ui.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
let currentCreatedSetlistId = null;
let currentCreatedSetlistName = '';

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ overlay –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω
 * @param {string} mode - –†–µ–∂–∏–º: 'create' –∏–ª–∏ 'edit'
 * @param {string} targetSetlistId - ID —Ü–µ–ª–µ–≤–æ–≥–æ —Å–µ—Ç–ª–∏—Å—Ç–∞
 * @param {string} targetSetlistName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–µ—Ç–ª–∏—Å—Ç–∞
 */
export async function startAddingSongs(mode = 'create', targetSetlistId = null, targetSetlistName = '') {
    console.log('üéµ [SetlistManager] startAddingSongs START');
    console.log('Mode:', mode);
    console.log('targetSetlistId:', targetSetlistId);
    console.log('targetSetlistName:', targetSetlistName);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ
    if (typeof window.closeAddSongsConfirmModal === 'function') {
        window.closeAddSongsConfirmModal();
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π setlist –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let activeSetlistId, activeSetlistName;
    
    if (mode === 'create') {
        // –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
        activeSetlistId = currentCreatedSetlistId;
        activeSetlistName = currentCreatedSetlistName;
        console.log('CREATE mode - using currentCreated:', activeSetlistId, activeSetlistName);
    } else if (mode === 'edit') {
        // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        activeSetlistId = targetSetlistId || state.currentSetlistId;
        activeSetlistName = targetSetlistName || state.currentSetlistName;
        console.log('EDIT mode - using current:', activeSetlistId, activeSetlistName);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Event Bus
    eventBus.setState('activeOverlayMode', mode);
    eventBus.setState('activeSetlistId', activeSetlistId);
    eventBus.setState('activeSetlistName', activeSetlistName);
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    if (typeof window !== 'undefined') {
        window.activeOverlayMode = mode;
        window.activeSetlistId = activeSetlistId;
        window.activeSetlistName = activeSetlistName;
    }
    
    // –û—á–∏—â–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const addedSongsToCurrentSetlist = window.addedSongsToCurrentSetlist || new Set();
    addedSongsToCurrentSetlist.clear();
    
    if (ui.addedSongsCount) {
        ui.addedSongsCount.textContent = '0';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π overlay
    if (ui.targetSetlistName) {
        ui.targetSetlistName.textContent = activeSetlistName;
    }
    if (ui.addSongsOverlay) {
        ui.addSongsOverlay.classList.add('show');
    }
    
    console.log('üéµ Overlay shown, addedSongsToCurrentSetlist cleared');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–µ—Å–Ω–∏ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    const currentSongs = stateManager.getAllSongs().length > 0 ? stateManager.getAllSongs() : state.allSongs;
    if (currentSongs.length === 0) {
        try {
            await songsApi.loadAllSongsFromFirestore();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–µ–Ω:', error);
        }
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Å–Ω–∏
    if (typeof window.filterAndDisplaySongs === 'function') {
        await window.filterAndDisplaySongs();
    } else {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        const { filterAndDisplaySongs } = await import('./search-manager.js');
        await filterAndDisplaySongs();
    }
    
    console.log('üéµ [SetlistManager] startAddingSongs END');
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ overlay –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω
 */
export function closeAddSongsOverlay() {
    console.log('üéµ [SetlistManager] closeAddSongsOverlay');
    
    if (ui.addSongsOverlay) {
        ui.addSongsOverlay.classList.remove('show');
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Event Bus
    eventBus.setState('activeOverlayMode', null);
    eventBus.setState('activeSetlistId', null);
    eventBus.setState('activeSetlistName', null);
    
    // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (typeof window !== 'undefined') {
        window.activeOverlayMode = null;
        window.activeSetlistId = null;
        window.activeSetlistName = null;
    }
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ –≤ —Å–µ—Ç–ª–∏—Å—Ç (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
 * @param {string} key - –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 */
export async function addSongToSetlist(song, key) {
    console.log('üéµ [SetlistManager] addSongToSetlist START');
    console.log('song:', song.name);
    console.log('key:', key);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π setlist
    const targetSetlistId = eventBus.getState('activeSetlistId') || window.activeSetlistId;
    const activeOverlayMode = eventBus.getState('activeOverlayMode') || window.activeOverlayMode;
    
    console.log('targetSetlistId:', targetSetlistId);
    console.log('activeOverlayMode:', activeOverlayMode);
    
    if (!targetSetlistId) {
        console.error('‚ùå No target setlist ID');
        if (typeof window.showNotification === 'function') {
            window.showNotification('‚ùå –°–µ—Ç-–ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error');
        }
        return;
    }
    
    try {
        // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏
        const apiModule = await import('../../api.js');
        const result = await apiModule.addSongToSetlist(targetSetlistId, song.id, key);
        
        console.log('API result:', result);
        
        if (result.status === 'added') {
            console.log('‚úÖ Song added successfully, updating UI...');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const addedSongsToCurrentSetlist = window.addedSongsToCurrentSetlist || new Set();
            addedSongsToCurrentSetlist.add(song.id);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (typeof window.showNotification === 'function') {
                window.showNotification(`‚ûï "${song.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ${key}`, 'success');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            if (ui.addedSongsCount) {
                ui.addedSongsCount.textContent = addedSongsToCurrentSetlist.size;
                console.log('Updated counter to:', addedSongsToCurrentSetlist.size);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if (typeof window.refreshSongsDisplay === 'function') {
                window.refreshSongsDisplay();
            }
            
        } else if (result.status === 'duplicate_different') {
            console.log('‚ö†Ô∏è Song exists with different key');
            if (typeof window.showNotification === 'function') {
                window.showNotification(`‚ö†Ô∏è –ü–µ—Å–Ω—è —É–∂–µ –µ—Å—Ç—å –≤ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ${result.existingKey}. –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ${key}?`, 'warning');
            }
        } else if (result.status === 'duplicate_same') {
            console.log('‚ÑπÔ∏è Song already exists with same key');
            if (typeof window.showNotification === 'function') {
                window.showNotification(`‚ÑπÔ∏è –ü–µ—Å–Ω—è —É–∂–µ –µ—Å—Ç—å –≤ —Å–µ—Ç-–ª–∏—Å—Ç–µ —Å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é ${key}`, 'info');
            }
        }
        
    } catch (error) {
        console.error('‚ùå Error adding song to setlist:', error);
        if (typeof window.showNotification === 'function') {
            window.showNotification('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏', 'error');
        }
    }
    
    console.log('üéµ [SetlistManager] addSongToSetlist END');
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
 */
export async function confirmAddSongWithKey() {
    console.log('üéµ [SetlistManager] confirmAddSongWithKey called');
    
    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    if (typeof window.confirmAddSongWithKey === 'function') {
        return await window.confirmAddSongWithKey();
    }
    
    throw new Error('confirmAddSongWithKey not found in global scope');
}

// –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
export function getCurrentCreatedSetlistId() {
    return currentCreatedSetlistId;
}

export function getCurrentCreatedSetlistName() {
    return currentCreatedSetlistName;
}

export function setCurrentCreatedSetlist(id, name) {
    currentCreatedSetlistId = id;
    currentCreatedSetlistName = name;
}

export const metadata = {
    name: 'SetlistManager',
    version: '2.0.0',
    description: '–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–ª–∏—Å—Ç–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω',
    functions: [
        'startAddingSongs',
        'closeAddSongsOverlay', 
        'addSongToSetlist',
        'confirmAddSongWithKey',
        'getCurrentCreatedSetlistId',
        'getCurrentCreatedSetlistName',
        'setCurrentCreatedSetlist'
    ]
};