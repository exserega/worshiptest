/**
 * Agape Worship App - Search Management Module
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */

import { 
    stateManager,
    normalizeSearchQuery,
    getNormalizedTitle,
    getNormalizedLyrics
} from '../core/index.js';
import * as state from '../../state.js';

/**
 * –ü–æ–∏—Å–∫ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ overlay
 * @param {string} searchTerm - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 */
export async function performOverlayDropdownSearch(searchTerm) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Worker –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.searchWorkerManager && typeof window.searchWorkerManager.overlaySearch === 'function') {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º State Manager —Å fallback –∫ —Å—Ç–∞—Ä–æ–º—É state
            const allSongs = stateManager.getAllSongs().length > 0 ? stateManager.getAllSongs() : state.allSongs;
            const { results } = await window.searchWorkerManager.overlaySearch(searchTerm, allSongs, {
                enablePrioritySearch: true
            });
            
            const allResults = [
                ...results.exactResults.map(r => r.song),
                ...results.fuzzyResults.map(r => r.song)
            ];
            
            showOverlaySearchResults(allResults, searchTerm);
        } else {
            // Fallback: –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            const query = normalizeSearchQuery(searchTerm);
            const allSongs = stateManager.getAllSongs().length > 0 ? stateManager.getAllSongs() : state.allSongs;
            let matchingSongs = allSongs.filter(song => {
                const titleMatch = getNormalizedTitle(song).includes(query);
                const lyricsMatch = getNormalizedLyrics(song).includes(query);
                return titleMatch || lyricsMatch;
            });
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º smart sorting
            matchingSongs.sort((a, b) => {
                const aNormalizedTitle = getNormalizedTitle(a);
                const bNormalizedTitle = getNormalizedTitle(b);
                
                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                const aStartsWithQuery = aNormalizedTitle.startsWith(query);
                const bStartsWithQuery = bNormalizedTitle.startsWith(query);
                
                if (aStartsWithQuery && !bStartsWithQuery) return -1;
                if (!aStartsWithQuery && bStartsWithQuery) return 1;
                
                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
                const lengthDiff = a.name.length - b.name.length;
                if (Math.abs(lengthDiff) > 10) return lengthDiff;
                
                // –ê–ª—Ñ–∞–≤–∏—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                return a.name.localeCompare(b.name);
            });

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if (matchingSongs.length > 20) {
                matchingSongs = matchingSongs.slice(0, 20);
            }
            
            showOverlaySearchResults(matchingSongs, searchTerm);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ overlay:', error);
        hideOverlaySearchResults();
    }
}

/**
 * –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ dropdown overlay
 * @param {Array} results - –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
 * @param {string} query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 */
export function showOverlaySearchResults(results, query) {
    const dropdown = document.getElementById('overlay-search-results');
    const container = dropdown.querySelector('.search-results-container');
    
    if (!dropdown || !container) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã dropdown –ø–æ–∏—Å–∫–∞');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';
    
    if (!results || results.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        container.innerHTML = `
            <div class="overlay-search-no-results">
                <i class="fas fa-search"></i>
                –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"
            </div>
        `;
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results.forEach(song => {
            const resultElement = createOverlaySearchResultElement(song, query);
            container.appendChild(resultElement);
        });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º dropdown
    dropdown.style.display = 'block';
    
    console.log(`üîç –ü–æ–∫–∞–∑–∞–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ dropdown`);
}

/**
 * –°–∫—Ä—ã—Ç–∏–µ dropdown —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
 */
export function hideOverlaySearchResults() {
    const dropdown = document.getElementById('overlay-search-results');
    if (dropdown) {
        dropdown.style.display = 'none';
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è dropdown
 * @param {Object} song - –æ–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
 * @param {string} query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns {HTMLElement} —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 */
export function createOverlaySearchResultElement(song, query) {
    const resultDiv = document.createElement('div');
    resultDiv.className = 'search-result';
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const normalizedQuery = normalizeSearchQuery(query);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–æ –ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–µ
    const normalizedTitle = getNormalizedTitle(song);
    const titleMatch = normalizedTitle.includes(normalizedQuery);
    
    const lyrics = song.hasWebEdits 
        ? (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] || '') 
        : (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '');
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const cleanedLyrics = lyrics.replace(/\[[^\]]*\]/g, ' ');
    const normalizedLyrics = getNormalizedLyrics({ '–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã': cleanedLyrics });
    const lyricsMatch = !titleMatch && normalizedLyrics.includes(normalizedQuery);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let resultHTML = `
        <div class="search-result-title">${song.name}</div>
    `;
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ –ø–µ—Å–Ω–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
    if (lyricsMatch && query) {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ)
        const fragment = getHighlightedTextFragment(cleanedLyrics, query, 60);
        if (fragment) {
            resultHTML += `<div class="search-result-fragment">${fragment}</div>`;
        }
    }
    
    resultDiv.innerHTML = resultHTML;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    resultDiv.addEventListener('click', () => {
        console.log('üéµ –ö–ª–∏–∫ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', song.name);
        
        // –°–∫—Ä—ã–≤–∞–µ–º dropdown
        hideOverlaySearchResults();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
        import('../ui/overlay-manager.js').then(({ showKeySelectionModal }) => {
            showKeySelectionModal(song);
        });
    });
    
    return resultDiv;
}

// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è getHighlightedTextFragment (–±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –ø–æ–∑–∂–µ)
function getHighlightedTextFragment(text, query, contextLength = 100) {
    if (!text || !query) return '';
    
    const normalizedText = text.toLowerCase();
    const normalizedQuery = query.toLowerCase();
    const index = normalizedText.indexOf(normalizedQuery);
    
    if (index === -1) return '';
    
    const start = Math.max(0, index - contextLength / 2);
    const end = Math.min(text.length, index + query.length + contextLength / 2);
    
    let fragment = text.substring(start, end);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –µ—Å–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ–±—Ä–µ–∑–∞–Ω
    if (start > 0) fragment = '...' + fragment;
    if (end < text.length) fragment = fragment + '...';
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    const regex = new RegExp(`(${query})`, 'gi');
    fragment = fragment.replace(regex, '<mark>$1</mark>');
    
    return fragment;
}

export const metadata = {
    name: 'SearchManager',
    version: '1.0.0',
    description: '–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
    functions: [
        'performOverlayDropdownSearch',
        'showOverlaySearchResults',
        'hideOverlaySearchResults',
        'createOverlaySearchResultElement'
    ]
};