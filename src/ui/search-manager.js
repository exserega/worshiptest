/**
 * Agape Worship App - Search Management Module
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */

import { 
    stateManager,
    normalizeSearchQuery,
    getNormalizedTitle,
    getNormalizedLyrics
} from '../core/index.js';
import * as state from '../../js/state.js';

/**
 * –ü–æ–∏—Å–∫ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ overlay
 * @param {string} searchTerm - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 */
export async function performOverlayDropdownSearch(searchTerm) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Worker –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.searchWorkerManager && typeof window.searchWorkerManager.overlaySearch === 'function') {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º State Manager —Å fallback –∫ —Å—Ç–∞—Ä–æ–º—É state
            const allSongs = stateManager.getAllSongs().length > 0 ? stateManager.getAllSongs() : state.allSongs;
            const { results } = await window.searchWorkerManager.overlaySearch(searchTerm, allSongs, {
                enablePrioritySearch: true
            });
            
            const allResults = [
                ...results.exactResults.map(r => r.song),
                ...results.fuzzyResults.map(r => r.song)
            ];
            
            showOverlaySearchResults(allResults, searchTerm);
        } else {
            // Fallback: –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            const query = normalizeSearchQuery(searchTerm);
            const allSongs = stateManager.getAllSongs().length > 0 ? stateManager.getAllSongs() : state.allSongs;
            let matchingSongs = allSongs.filter(song => {
                const titleMatch = getNormalizedTitle(song).includes(query);
                const lyricsMatch = getNormalizedLyrics(song).includes(query);
                return titleMatch || lyricsMatch;
            });
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º smart sorting
            matchingSongs.sort((a, b) => {
                const aNormalizedTitle = getNormalizedTitle(a);
                const bNormalizedTitle = getNormalizedTitle(b);
                
                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                const aStartsWithQuery = aNormalizedTitle.startsWith(query);
                const bStartsWithQuery = bNormalizedTitle.startsWith(query);
                
                if (aStartsWithQuery && !bStartsWithQuery) return -1;
                if (!aStartsWithQuery && bStartsWithQuery) return 1;
                
                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
                const lengthDiff = a.name.length - b.name.length;
                if (Math.abs(lengthDiff) > 10) return lengthDiff;
                
                // –ê–ª—Ñ–∞–≤–∏—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                return a.name.localeCompare(b.name);
            });

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if (matchingSongs.length > 20) {
                matchingSongs = matchingSongs.slice(0, 20);
            }
            
            showOverlaySearchResults(matchingSongs, searchTerm);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ overlay:', error);
        hideOverlaySearchResults();
    }
}

/**
 * –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ dropdown overlay
 * @param {Array} results - –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
 * @param {string} query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 */
export function showOverlaySearchResults(results, query) {
    const dropdown = document.getElementById('overlay-search-results');
    const container = dropdown.querySelector('.search-results-container');
    
    if (!dropdown || !container) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã dropdown –ø–æ–∏—Å–∫–∞');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';
    
    if (!results || results.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        container.innerHTML = `
            <div class="overlay-search-no-results">
                <i class="fas fa-search"></i>
                –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"
            </div>
        `;
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results.forEach(song => {
            const resultElement = createOverlaySearchResultElement(song, query);
            container.appendChild(resultElement);
        });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º dropdown
    dropdown.style.display = 'block';
    
    console.log(`üîç –ü–æ–∫–∞–∑–∞–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ dropdown`);
}

/**
 * –°–∫—Ä—ã—Ç–∏–µ dropdown —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
 */
export function hideOverlaySearchResults() {
    const dropdown = document.getElementById('overlay-search-results');
    if (dropdown) {
        dropdown.style.display = 'none';
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è dropdown
 * @param {Object} song - –æ–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
 * @param {string} query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns {HTMLElement} —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 */
export function createOverlaySearchResultElement(song, query) {
    const resultDiv = document.createElement('div');
    resultDiv.className = 'search-result';
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const normalizedQuery = normalizeSearchQuery(query);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–æ –ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–µ
    const normalizedTitle = getNormalizedTitle(song);
    const titleMatch = normalizedTitle.includes(normalizedQuery);
    
    const lyrics = song.hasWebEdits 
        ? (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã (edited)'] || '') 
        : (song['–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã'] || '');
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const cleanedLyrics = lyrics.replace(/\[[^\]]*\]/g, ' ');
    const normalizedLyrics = getNormalizedLyrics({ '–¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã': cleanedLyrics });
    const lyricsMatch = !titleMatch && normalizedLyrics.includes(normalizedQuery);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let resultHTML = `
        <div class="search-result-title">${song.name}</div>
    `;
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ –ø–µ—Å–Ω–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
    if (lyricsMatch && query) {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ)
        const fragment = getHighlightedTextFragment(cleanedLyrics, query, 60);
        if (fragment) {
            resultHTML += `<div class="search-result-fragment">${fragment}</div>`;
        }
    }
    
    resultDiv.innerHTML = resultHTML;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    resultDiv.addEventListener('click', () => {
        console.log('üéµ –ö–ª–∏–∫ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', song.name);
        
        // –°–∫—Ä—ã–≤–∞–µ–º dropdown
        hideOverlaySearchResults();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ê–ë–û–ß–ò–ô –º–µ—Ö–∞–Ω–∏–∑–º - —Ç–æ—Ç –∂–µ —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞ "–¥–æ–±–∞–≤–∏—Ç—å"
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π overlay –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞)
        import('../ui/overlay-manager.js').then(({ showMobileSongPreview }) => {
            showMobileSongPreview(song);
        });
    });
    
    return resultDiv;
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–æ–≤)
 * @param {string} text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @returns {string} –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export function cleanLyricsForSearch(text) {
    if (!text) return '';
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö [C], [Am7], etc.
    let cleaned = text.replace(/\[[^\]]*\]/g, ' ');
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    cleaned = cleaned.replace(/\s+/g, ' ').trim();
    
    return cleaned;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
 * @param {string} text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @param {string} query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {number} contextLength - –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @returns {string} —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
 */
export function getHighlightedTextFragment(text, query, contextLength = 100) {
    if (!text || !query) return '';
    
    const normalizedQuery = normalizeSearchQuery(query);
    const queryWords = normalizedQuery.split(' ').filter(w => w.length > 1);
    
    if (queryWords.length === 0) return '';
    
    // –ò—â–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    let bestMatch = { index: -1, length: 0, word: '' };
    
    queryWords.forEach(word => {
        // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –∞–∫–∫–æ—Ä–¥—ã –∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è)
        const cleanText = text.replace(/\[[^\]]*\]/g, ' '); // —É–±–∏—Ä–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã
        const textWords = cleanText.split(/\s+/);
        
        for (let i = 0; i < textWords.length; i++) {
            const cleanWord = normalizeSearchQuery(textWords[i]);
            if (cleanWord.includes(word) && word.length > bestMatch.length) {
                // –ù–∞–π–¥–µ–º –ø–æ–∑–∏—Ü–∏—é —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                const wordStart = cleanText.toLowerCase().indexOf(textWords[i].toLowerCase());
                if (wordStart !== -1) {
                    bestMatch = { index: wordStart, length: word.length, word: word };
                }
            }
        }
    });
    
    if (bestMatch.index === -1) {
        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–µ—Ä–≤–æ–µ —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω–æ–µ
        const firstWord = queryWords[0];
        const lowerText = text.toLowerCase();
        const searchIndex = lowerText.indexOf(firstWord);
        if (searchIndex !== -1) {
            bestMatch = { index: searchIndex, length: firstWord.length, word: firstWord };
        }
    }
    
    if (bestMatch.index === -1) {
        return text.slice(0, contextLength) + '...';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º –≤ –Ω–∞—á–∞–ª–µ
    const beforeContext = Math.min(30, bestMatch.index); // –Ω–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥
    const start = Math.max(0, bestMatch.index - beforeContext);
    const end = Math.min(text.length, bestMatch.index + contextLength);
    
    let fragment = text.slice(start, end);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    if (start > 0) fragment = '...' + fragment;
    if (end < text.length) fragment = fragment + '...';
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    queryWords.forEach(word => {
        if (word.length > 1) {
            const regex = new RegExp(`(${word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
            fragment = fragment.replace(regex, '<mark class="search-highlight">$1</mark>');
        }
    });
    
    return fragment;
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ overlay
let currentOverlaySearchRequest = null;

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Ç–µ–∫—Å—Ç—É –ø–µ—Å–Ω–∏ —Å Web Worker –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 * @param {string} searchTerm - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 * @param {boolean} showAddedOnly - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏
 */
export async function filterAndDisplaySongs(searchTerm = '', category = '', showAddedOnly = false) {
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (currentOverlaySearchRequest) {
        window.searchWorkerManager?.cancelSearch(currentOverlaySearchRequest);
        currentOverlaySearchRequest = null;
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ –∏ —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –∏ —Å—Ç–∞—Ä—ã–π –∫–æ–¥
    const globalStateSongs = window.state?.allSongs || [];
    const globalStateManagerSongs = window.stateManager?.getAllSongs() || [];
    const importedStateManagerSongs = stateManager?.getAllSongs() || [];
    const importedStateSongs = state?.allSongs || [];
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏)
    console.log('üîç [DEBUG] Data sources - window.state:', globalStateSongs.length, 'imported state:', importedStateSongs.length);
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
    let allSongs = [];
    let selectedSource = 'none';
    
    if (globalStateSongs.length > 0) {
        allSongs = globalStateSongs;
        selectedSource = 'window.state.allSongs';
    } else if (globalStateManagerSongs.length > 0) {
        allSongs = globalStateManagerSongs;
        selectedSource = 'window.stateManager.getAllSongs()';
    } else if (importedStateManagerSongs.length > 0) {
        allSongs = importedStateManagerSongs;
        selectedSource = 'imported stateManager.getAllSongs()';
    } else if (importedStateSongs.length > 0) {
        allSongs = importedStateSongs;
        selectedSource = 'imported state.allSongs';
    }
    
    console.log('üîç [DEBUG] Selected source:', selectedSource, 'with', allSongs.length, 'songs');
    
    let filteredSongs = allSongs;
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É —á–µ—Ä–µ–∑ Web Worker (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å)
    if (searchTerm) {
        try {
            console.log(`üîç Overlay –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Worker: "${searchTerm}"`);
            
            const startTime = performance.now();
            const { results, metadata } = await window.searchWorkerManager.overlaySearch(searchTerm, allSongs, {
                category: category || undefined,
                enablePrioritySearch: true
            });
            const duration = performance.now() - startTime;
            
            console.log(`‚úÖ Overlay –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration.toFixed(2)}ms (Worker: ${metadata.duration.toFixed(2)}ms)`);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–æ—á–Ω—ã–µ –∏ –Ω–µ—á–µ—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            filteredSongs = [
                ...results.exactResults.map(r => r.song),
                ...results.fuzzyResults.map(r => r.song)
            ];
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Web Worker overlay –ø–æ–∏—Å–∫–∞, fallback:', error);
            
            // Fallback: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫
            const query = normalizeSearchQuery(searchTerm);
            filteredSongs = filteredSongs.filter(song => {
                // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                const normalizedTitle = getNormalizedTitle(song);
                const titleMatch = normalizedTitle.includes(query);
                
                // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–µ—Å–Ω–∏
                const normalizedLyrics = getNormalizedLyrics(song);
                const lyricsMatch = normalizedLyrics.includes(query);
                
                return titleMatch || lyricsMatch;
            });
            
            // –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è fallback
            filteredSongs.sort((a, b) => {
                const aNormalizedTitle = getNormalizedTitle(a);
                const bNormalizedTitle = getNormalizedTitle(b);
                const aTitleMatch = aNormalizedTitle.includes(query);
                const bTitleMatch = bNormalizedTitle.includes(query);
                const aTitleStartsWith = aNormalizedTitle.startsWith(query);
                const bTitleStartsWith = bNormalizedTitle.startsWith(query);
                
                // 1. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Å–Ω–∏, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–ø—Ä–æ—Å–∞
                if (aTitleStartsWith && !bTitleStartsWith) return -1;
                if (!aTitleStartsWith && bTitleStartsWith) return 1;
                
                // 2. –ü–æ—Ç–æ–º –ø–µ—Å–Ω–∏, –≥–¥–µ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–Ω–æ –Ω–µ –≤ –Ω–∞—á–∞–ª–µ)
                if (aTitleMatch && !aTitleStartsWith && (!bTitleMatch || bTitleStartsWith)) return -1;
                if (bTitleMatch && !bTitleStartsWith && (!aTitleMatch || aTitleStartsWith)) return 1;
                
                // 3. –ù–∞–∫–æ–Ω–µ—Ü –ø–µ—Å–Ω–∏ –ø–æ —Ç–µ–∫—Å—Ç—É (–≥–¥–µ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)
                if (aTitleMatch && !bTitleMatch) return -1;
                if (!aTitleMatch && bTitleMatch) return 1;
                
                return 0;
            });
        }
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ Worker)
    if (category && searchTerm) {
        // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –±—ã–ª —á–µ—Ä–µ–∑ Worker —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π, —Ñ–∏–ª—å—Ç—Ä —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω
    } else if (category) {
        filteredSongs = filteredSongs.filter(song => song.sheet === category);
    }
    
    // –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ
    if (showAddedOnly) {
        // –ü–æ–ª—É—á–∞–µ–º addedSongsToCurrentSetlist –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        const addedSongs = window.addedSongsToCurrentSetlist || new Set();
        console.log('üîç filterAndDisplaySongs: showAddedOnly=true');
        console.log('üîç addedSongs size:', addedSongs.size);
        console.log('üîç addedSongs contents:', Array.from(addedSongs));
        console.log('üîç Total songs before filter:', filteredSongs.length);
        console.log('üîç First 3 song IDs in filteredSongs:', filteredSongs.slice(0, 3).map(s => s.id));
        
        filteredSongs = filteredSongs.filter(song => {
            const hasMatch = addedSongs.has(song.id);
            if (hasMatch) {
                console.log('üéØ MATCH FOUND:', song.id, song.name);
            }
            return hasMatch;
        });
        console.log('üîç Filtered songs count:', filteredSongs.length);
        if (filteredSongs.length > 0) {
            console.log('üîç Filtered songs:', filteredSongs.map(s => ({id: s.id, name: s.name})));
        }
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º displaySongsGrid —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    if (typeof window.displaySongsGrid === 'function') {
        window.displaySongsGrid(filteredSongs, searchTerm);
    } else {
        console.error('‚ùå displaySongsGrid function not found');
    }
}

export const metadata = {
    name: 'SearchManager',
    version: '1.0.0',
    description: '–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
    functions: [
        'performOverlayDropdownSearch',
        'showOverlaySearchResults',
        'hideOverlaySearchResults',
        'createOverlaySearchResultElement',
        'cleanLyricsForSearch',
        'getHighlightedTextFragment',
        'filterAndDisplaySongs'
    ]
};