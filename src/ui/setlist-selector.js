/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è overlay –≤—ã–±–æ—Ä–∞ —Å–µ—Ç-–ª–∏—Å—Ç–∞
 */

import { loadSetlists, createSetlist, addSongToSetlist } from '../api/index.js';

console.log('üìã [SetlistSelector] Module loading...');

class SetlistSelector {
    constructor() {
        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.overlay = document.getElementById('setlist-select-overlay');
        this.songNameDisplay = document.getElementById('adding-song-name');
        this.songKeyDisplay = document.getElementById('adding-song-key');
        this.setlistsGrid = document.getElementById('setlists-grid');
        this.newNameInput = document.getElementById('new-setlist-name-modal');
        this.createButton = document.getElementById('create-and-add');
        this.closeButton = document.getElementById('close-setlist-select');
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentSong = null;
        this.selectedSetlistId = null;
        this.setlists = [];
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        console.log('üìã [SetlistSelector] Constructor - Key display element:', this.songKeyDisplay);
        if (!this.songKeyDisplay) {
            console.error('‚ùå [SetlistSelector] Key display element not found on init!');
        }
    }
    
    init() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.createButton?.addEventListener('click', () => this.handleCreateNew());
        this.closeButton?.addEventListener('click', () => this.close());
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        this.overlay?.addEventListener('click', (e) => {
            if (e.target === this.overlay) {
                this.close();
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.overlay?.classList.contains('visible')) {
                this.close();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞
        this.newNameInput?.addEventListener('input', () => {
            this.createButton.disabled = !this.newNameInput.value.trim();
        });
        
        // Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.newNameInput?.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !this.createButton.disabled) {
                this.handleCreateNew();
            }
        });
        
        // –ö–ª–∏–∫ –ø–æ —Å–µ—Ç-–ª–∏—Å—Ç—É
        this.setlistsGrid?.addEventListener('click', (e) => {
            const item = e.target.closest('.setlist-item');
            if (item) {
                this.selectSetlist(item.dataset.id);
            }
        });
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç overlay –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç-–ª–∏—Å—Ç–∞
     * @param {Object} song - –û–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
     * @param {string} key - –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
     */
    async open(song, key) {
        if (!song) {
            console.error('No song provided to SetlistSelector');
            return;
        }
        
        this.currentSong = song;
        this.currentSong.selectedKey = key || song.keys?.[0] || 'C';
        
        console.log('üìã [SetlistSelector] Opening with key:', this.currentSong.selectedKey);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Å–Ω–µ
        if (this.songNameDisplay) {
            this.songNameDisplay.textContent = song.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        }
        
        if (this.songKeyDisplay) {
            console.log('üìã [SetlistSelector] Key display element:', this.songKeyDisplay);
            console.log('üìã [SetlistSelector] Key display HTML before:', this.songKeyDisplay.outerHTML);
            console.log('üìã [SetlistSelector] Setting key value:', this.currentSong.selectedKey);
            this.songKeyDisplay.textContent = this.currentSong.selectedKey;
            console.log('üìã [SetlistSelector] Key display HTML after:', this.songKeyDisplay.outerHTML);
            // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º
            this.songKeyDisplay.style.display = 'inline-block';
            this.songKeyDisplay.style.visibility = 'visible';
        } else {
            console.error('‚ùå [SetlistSelector] Key display element not found!');
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.selectedSetlistId = null;
        if (this.newNameInput) {
            this.newNameInput.value = '';
            this.createButton.disabled = true;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay
        this.overlay?.classList.add('visible');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ç-–ª–∏—Å—Ç—ã
        await this.loadSetlists();
    }
    
    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç overlay
     */
    close() {
        this.overlay?.classList.remove('visible');
        this.currentSong = null;
        this.selectedSetlistId = null;
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        if (this.newNameInput) {
            this.newNameInput.value = '';
            this.createButton.disabled = true;
        }
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤
        if (this.setlistsGrid) {
            this.setlistsGrid.querySelectorAll('.setlist-item').forEach(item => {
                item.classList.remove('selected');
            });
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤
     */
    async loadSetlists() {
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            if (this.setlistsGrid) {
                this.setlistsGrid.innerHTML = '<div class="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ç-–ª–∏—Å—Ç—ã
            this.setlists = await loadSetlists();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É
            if (this.setlistsGrid) {
                this.setlistsGrid.innerHTML = '';
                
                if (this.setlists.length === 0) {
                    this.setlistsGrid.innerHTML = '<div class="empty-text">–ù–µ—Ç —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤</div>';
                } else {
                    this.setlists.forEach(setlist => {
                        const item = document.createElement('div');
                        item.className = 'setlist-item';
                        item.dataset.id = setlist.id;
                        
                        const songsCount = setlist.songs?.length || 0;
                        item.innerHTML = `
                            <span class="setlist-name">${setlist.name}</span>
                            <span class="setlist-songs-count">${songsCount} –ø–µ—Å–µ–Ω</span>
                        `;
                        
                        this.setlistsGrid.appendChild(item);
                    });
                }
            }
            
        } catch (error) {
            console.error('Error loading setlists:', error);
            if (this.setlistsGrid) {
                this.setlistsGrid.innerHTML = '<div class="error-text">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>';
            }
        }
    }
    
    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç —Å–µ—Ç-–ª–∏—Å—Ç
     */
    selectSetlist(setlistId) {
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö
        this.setlistsGrid.querySelectorAll('.setlist-item').forEach(item => {
            item.classList.remove('selected');
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É
        const selectedItem = this.setlistsGrid.querySelector(`[data-id="${setlistId}"]`);
        if (selectedItem) {
            selectedItem.classList.add('selected');
            this.selectedSetlistId = setlistId;
            
            // –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é
            this.addToSetlist(setlistId);
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Å–Ω—é –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç
     */
    async addToSetlist(setlistId) {
        if (!this.currentSong || !setlistId) return;
        
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
            console.log('üìã [SetlistSelector] Adding song:', this.currentSong.id, 'to setlist:', setlistId, 'in key:', this.currentSong.selectedKey);
            
            await addSongToSetlist(setlistId, this.currentSong.id, this.currentSong.selectedKey);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification('‚úÖ –ü–µ—Å–Ω—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Ç-–ª–∏—Å—Ç!', 'success');
            
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–µ—Ç-–ª–∏—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É
            if (window.state?.currentSetlistId === setlistId) {
                console.log('üìã [SetlistSelector] Current setlist was updated, refreshing display');
                console.log('üìã [SetlistSelector] currentSetlistId:', window.state?.currentSetlistId);
                console.log('üìã [SetlistSelector] setlistId:', setlistId);
                
                // –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
                setTimeout(async () => {
                    try {
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        const setlists = await loadSetlists();
                        const updatedSetlist = setlists.find(s => s.id === setlistId);
                        
                        if (updatedSetlist && window.handleSetlistSelect) {
                            console.log('üìã [SetlistSelector] Calling handleSetlistSelect with updated data');
                            console.log('üìã [SetlistSelector] Updated setlist songs count:', updatedSetlist.songs?.length);
                            // –í—ã–∑—ã–≤–∞–µ–º handleSetlistSelect –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                            window.handleSetlistSelect(updatedSetlist);
                        }
                    } catch (error) {
                        console.error('Error updating setlist display:', error);
                    }
                }, 300); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            setTimeout(() => {
                window.dispatchEvent(new CustomEvent('setlist-updated', { 
                    detail: { setlistId } 
                }));
            }, 500);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º overlay
            this.close();
            
        } catch (error) {
            console.error('Error adding song to setlist:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏', 'error');
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ç-–ª–∏—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏
     */
    async handleCreateNew() {
        if (!this.currentSong || !this.newNameInput?.value.trim()) return;
        
        try {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            if (this.createButton) {
                this.createButton.disabled = true;
                this.createButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –°–æ–∑–¥–∞–Ω–∏–µ...';
            }
            
            const newName = this.newNameInput.value.trim();
            console.log('Creating new setlist:', newName);
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ç-–ª–∏—Å—Ç
            const setlistId = await createSetlist(newName);
            console.log('Created setlist with ID:', setlistId);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é
            await this.addToSetlist(setlistId);
            
        } catch (error) {
            console.error('Error creating setlist:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ç-–ª–∏—Å—Ç–∞', 'error');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if (this.createButton) {
                this.createButton.innerHTML = '<i class="fas fa-plus"></i> –°–æ–∑–¥–∞—Ç—å';
                this.createButton.disabled = !this.newNameInput?.value.trim();
            }
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = 'info') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (typeof window.showNotification === 'function') {
            window.showNotification(message, type);
            return;
        }
        
        // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ–π alert
        alert(message);
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
const setlistSelector = new SetlistSelector();
console.log('üìã [SetlistSelector] Instance created');

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è
export function openSetlistSelector(song, key) {
    console.log('üìã [SetlistSelector] openSetlistSelector called with song:', song?.name, 'key:', key);
    return setlistSelector.open(song, key);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.openSetlistSelector = openSetlistSelector;
console.log('üìã [SetlistSelector] Module initialized, window.openSetlistSelector =', typeof window.openSetlistSelector);