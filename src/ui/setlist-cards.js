/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤
 */

import logger from '../utils/logger.js';
import * as ui from '../../ui.js';
import * as state from '../../js/state.js';

// –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ç-–ª–∏—Å—Ç
let currentActiveSetlist = null;

// –ö–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
const expandedCards = new Set();

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–ø–µ—Å–Ω—è"
 */
function getSongCountText(count) {
    if (count % 10 === 1 && count % 100 !== 11) {
        return '–ø–µ—Å–Ω—è';
    } else if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) {
        return '–ø–µ—Å–Ω–∏';
    } else {
        return '–ø–µ—Å–µ–Ω';
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å–µ—Ç-–ª–∏—Å—Ç–∞
 */
function createSetlistCard(setlist, isActive, onSelect, onDelete) {
    const card = document.createElement('div');
    card.className = 'setlist-card';
    card.dataset.setlistId = setlist.id;
    
    if (isActive) {
        card.classList.add('active');
        currentActiveSetlist = setlist.id;
    }
    
    if (expandedCards.has(setlist.id)) {
        card.classList.add('expanded');
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
    const headerInfo = document.createElement('div');
    headerInfo.className = 'card-header-info';
    headerInfo.onclick = (e) => {
        e.stopPropagation();
        toggleCard(setlist.id);
    };
    
    // –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç-–ª–∏—Å—Ç–∞
    const title = document.createElement('h4');
    title.className = 'card-title';
    title.textContent = setlist.name;
    headerInfo.appendChild(title);
    
    // –°–æ–∑–¥–∞—Ç–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const creatorName = setlist.createdByName || setlist.creatorName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const creator = document.createElement('div');
    creator.className = 'card-creator';
    creator.innerHTML = `
        <i class="fas fa-user"></i>
        <span>${creatorName}</span>
    `;
    headerInfo.appendChild(creator);
    
    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const meta = document.createElement('div');
    meta.className = 'card-meta';
    const songsCount = setlist.songs ? setlist.songs.length : 0;
    const songText = getSongCountText(songsCount);
    
    meta.innerHTML = `
        <span>${songsCount} ${songText}</span>
        <span>${formatDate(setlist.updatedAt || setlist.createdAt)}</span>
    `;
    headerInfo.appendChild(meta);
    
    // –£–±—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–Ω–∞—á–æ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    card.appendChild(headerInfo);
    
    // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è icon-button-delete)
    const deleteBtn = document.createElement('button');
    deleteBtn.className = 'icon-button-delete card-delete-btn';
    deleteBtn.innerHTML = '<i class="fas fa-trash" style="color: #ef4444 !important;"></i>';
    deleteBtn.title = '–£–¥–∞–ª–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç';
    deleteBtn.onclick = (e) => {
        e.stopPropagation();
        if (confirm(`–£–¥–∞–ª–∏—Ç—å —Å–µ—Ç-–ª–∏—Å—Ç "${setlist.name}"?`)) {
            onDelete(setlist.id, setlist.name);
        }
    };
    card.appendChild(deleteBtn);
    
    // –°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω (—Å–∫—Ä—ã—Ç—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const songsList = document.createElement('div');
    songsList.className = 'card-songs';
    
    if (setlist.songs && setlist.songs.length > 0) {
        logger.log('üìã Setlist songs data:', setlist.songs);
        logger.log('üìã All songs available:', state.allSongs?.length);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–µ—Å–Ω–∏
        if (!state.allSongs || state.allSongs.length === 0) {
            logger.warn('üìã Warning: allSongs not loaded, songs data may be incomplete');
        }
        
        const fullSongs = setlist.songs
            .map(setlistSong => {
                // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                const songDetails = state.allSongs.find(song => song.id === setlistSong.songId) || {};
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Å–µ—Ç-–ª–∏—Å—Ç–∞)
                const setlistKey = setlistSong.key || setlistSong.originalKey;
                const songKey = songDetails.key || songDetails.originalKey;
                const displayKey = setlistKey || songKey || '';
                
                // BPM –±–µ—Ä–µ–º –∏–∑ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å–Ω–∏
                const displayBpm = songDetails.bpm || setlistSong.bpm || '';
                
                logger.log('üìã Song mapping:', {
                    songName: songDetails.name || setlistSong.name,
                    setlistKey,
                    songKey,
                    displayKey,
                    displayBpm
                });
                
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Ç-–ª–∏—Å—Ç–∞
                return { 
                    ...songDetails, 
                    ...setlistSong,
                    displayKey,
                    displayBpm
                };
            })
            .filter(s => s.songId) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ songId, –∞ –Ω–µ id
            .sort((a, b) => (a.order || 0) - (b.order || 0));
        
        fullSongs.forEach(song => {
            const songItem = document.createElement('div');
            songItem.className = 'song-item';
            songItem.onclick = (e) => {
                e.stopPropagation();
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Å–Ω—é –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
                if (window.handleFavoriteOrRepertoireSelect) {
                    window.handleFavoriteOrRepertoireSelect(song);
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤
                    const panel = document.getElementById('setlists-panel');
                    if (panel) panel.classList.remove('open');
                }
            };
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º displayKey –∏ displayBpm –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏
            const songKey = song.displayKey || '';
            const songBpm = song.displayBpm || '';
            
            logger.log('üìã Rendering song:', {
                name: song.name,
                key: songKey,
                bpm: songBpm
            });
            
            songItem.innerHTML = `
                <span class="song-name-text">${song.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</span>
                <div class="song-info">
                    ${songKey ? `<span class="song-key">${songKey}</span>` : ''}
                    ${songBpm ? `<span class="song-bpm">${songBpm}</span>` : ''}
                </div>
            `;
            
            songsList.appendChild(songItem);
        });
    } else {
        songsList.innerHTML = '<div style="text-align: center; color: #9ca3af; font-size: 0.75rem; padding: 8px;">–ù–µ—Ç –ø–µ—Å–µ–Ω</div>';
    }
    
    card.appendChild(songsList);
    
    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (—Å–∫—Ä—ã—Ç—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const actions = document.createElement('div');
    actions.className = 'card-actions';
    
    // –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å"
    const editBtn = document.createElement('button');
    editBtn.className = 'card-action-btn primary';
    editBtn.innerHTML = `
        <i class="fas fa-edit" style="color: #111827 !important;"></i>
        <span style="color: #111827 !important;">–ò–∑–º–µ–Ω–∏—Ç—å</span>
    `;
    editBtn.onclick = async (e) => {
        e.stopPropagation();
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Ç-–ª–∏—Å—Ç
        await activateSetlist(setlist);
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–µ–Ω
        const addSongBtn = document.getElementById('add-song-btn');
        if (addSongBtn) addSongBtn.click();
    };
    actions.appendChild(editBtn);
    
    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"
    const presentBtn = document.createElement('button');
    presentBtn.className = 'card-action-btn secondary';
    presentBtn.innerHTML = `
        <i class="fas fa-play" style="color: #9ca3af !important;"></i>
        <span style="color: #9ca3af !important;">–ü—Ä–µ–∑–µ–Ω—Ç.</span>
    `;
    presentBtn.onclick = async (e) => {
        e.stopPropagation();
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Ç-–ª–∏—Å—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
        await activateSetlist(setlist);
        const startBtn = document.getElementById('start-presentation-button');
        if (startBtn) startBtn.click();
    };
    actions.appendChild(presentBtn);
    
    // –ö–Ω–æ–ø–∫–∞ "–í –∫–∞–ª–µ–Ω–¥–∞—Ä—å" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –ø—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ
    const calendarBtn = document.createElement('button');
    calendarBtn.className = 'card-action-btn secondary';
    calendarBtn.innerHTML = `
        <i class="fas fa-calendar" style="color: #9ca3af !important;"></i>
        <span style="color: #9ca3af !important;">–í –∫–∞–ª–µ–Ω–¥–∞—Ä—å</span>
    `;
    calendarBtn.onclick = async (e) => {
        e.stopPropagation();
        if (!canManageEvents()) {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å');
            return;
        }
        await activateSetlist(setlist);
        const calBtn = document.getElementById('add-to-calendar-btn');
        if (calBtn) calBtn.click();
    };
    actions.appendChild(calendarBtn);
    
    // –ö–Ω–æ–ø–∫–∞ "–í –∞—Ä—Ö–∏–≤"
    const archiveBtn = document.createElement('button');
    archiveBtn.className = 'card-action-btn secondary';
    archiveBtn.innerHTML = `
        <i class="fas fa-archive" style="color: #9ca3af !important;"></i>
        <span style="color: #9ca3af !important;">–í –∞—Ä—Ö–∏–≤</span>
    `;
    archiveBtn.onclick = async (e) => {
        e.stopPropagation();
        await activateSetlist(setlist);
        const archBtn = document.getElementById('save-to-archive-btn');
        if (archBtn) archBtn.click();
    };
    actions.appendChild(archiveBtn);
    
    card.appendChild(actions);
    
    return card;
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å–≤–µ—Ä–Ω—É—Ç–∞/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞)
 */
function toggleCard(setlistId) {
    const card = document.querySelector(`.setlist-card[data-setlist-id="${setlistId}"]`);
    if (!card) return;
    
    card.classList.toggle('expanded');
    
    if (card.classList.contains('expanded')) {
        expandedCards.add(setlistId);
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        document.querySelectorAll('.setlist-card').forEach(c => {
            if (c.dataset.setlistId !== setlistId) {
                c.classList.remove('expanded');
                expandedCards.delete(c.dataset.setlistId);
            }
        });
    } else {
        expandedCards.delete(setlistId);
    }
}

/**
 * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–µ—Ç-–ª–∏—Å—Ç
 */
async function activateSetlist(setlist) {
    logger.log('üìã Activating setlist:', setlist.name);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state.setCurrentSetlistId(setlist.id);
    state.setCurrentSetlistName(setlist.name);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    document.querySelectorAll('.setlist-card').forEach(card => {
        const isActive = card.dataset.setlistId === setlist.id;
        card.classList.toggle('active', isActive);
        
        // –ó–Ω–∞—á–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É–±—Ä–∞–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    });
    
    currentActiveSetlist = setlist.id;
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (ui.displaySelectedSetlist) {
        ui.displaySelectedSetlist(setlist, window.handleFavoriteOrRepertoireSelect, window.handleRemoveSongFromSetlist);
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏
 */
function canManageEvents() {
    const role = localStorage.getItem('userRole');
    return role === 'admin' || role === 'moderator';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É
 */
function formatDate(timestamp) {
    if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Firebase Timestamp
    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    if (isNaN(date.getTime())) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–µ—Ç-–ª–∏—Å—Ç–æ–≤
 */
export function renderSetlistCards(setlists, onSelect, onDelete) {
    const container = document.getElementById('setlists-cards-container');
    if (!container) {
        logger.error('üìã Cards container not found!');
        return;
    }
    
    container.innerHTML = '';
    
    if (!setlists || setlists.length === 0) {
        container.innerHTML = '<div class="empty-message">–°–µ—Ç-–ª–∏—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π!</div>';
        return;
    }
    
    const currentSetlistId = state.currentSetlistId;
    
    setlists.forEach(setlist => {
        const isActive = setlist.id === currentSetlistId;
        const card = createSetlistCard(setlist, isActive, onSelect, onDelete);
        container.appendChild(card);
    });
    
    logger.log('üìã Rendered', setlists.length, 'setlist cards');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
 */
export function initCardHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª–∏–∞–ª–∞
    const branchBtn = document.getElementById('setlist-branch-btn');
    const branchPopup = document.getElementById('branch-selector-popup');
    const branchSelector = document.getElementById('setlist-branch-selector');
    
    if (branchBtn && branchPopup) {
        branchBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            branchPopup.style.display = branchPopup.style.display === 'none' ? 'block' : 'none';
        });
        logger.log('üìã Branch button handler attached');
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
    if (branchSelector) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ branchSelector.js, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.log('üìã Branch selector found:', branchSelector);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ
    document.addEventListener('click', (e) => {
        if (branchPopup && 
            !branchBtn?.contains(e.target) && 
            !branchPopup.contains(e.target)) {
            branchPopup.style.display = 'none';
        }
    });
    
    logger.log('üìã Card handlers initialized');
}