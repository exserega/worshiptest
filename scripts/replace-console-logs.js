#!/usr/bin/env node

// ====================================
// üîß –°–ö–†–ò–ü–¢ –ó–ê–ú–ï–ù–´ CONSOLE.LOG
// ====================================
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç console.log –Ω–∞ logger.log
// –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç logger –≥–¥–µ –Ω—É–∂–Ω–æ
// ====================================

const fs = require('fs');
const path = require('path');

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
const searchDirs = [
    './src',
    './js', 
    './public',
    './functions'
];

// –ò—Å–∫–ª—é—á–µ–Ω–∏—è - —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
const excludePatterns = [
    'node_modules',
    '.git',
    'build',
    'dist',
    '*.min.js',
    'logger.js', // —Å–∞–º logger –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    'tests/', // —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å console.log
    'scripts/' // —Å–∫—Ä–∏–ø—Ç—ã —Ç–æ–∂–µ
];

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª
function shouldProcessFile(filePath) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    for (const pattern of excludePatterns) {
        if (filePath.includes(pattern)) {
            return false;
        }
    }
    return filePath.endsWith('.js');
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ logger
function getLoggerImportPath(filePath) {
    const depth = filePath.split('/').length - 2; // -2 —Ç.–∫. –Ω–∞—á–∏–Ω–∞–µ–º —Å ./
    
    if (filePath.startsWith('./src/')) {
        // –î–ª—è —Ñ–∞–π–ª–æ–≤ –≤ src —Å—á–∏—Ç–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        const srcDepth = filePath.replace('./src/', '').split('/').length - 1;
        return '../'.repeat(srcDepth) + 'utils/logger.js';
    } else if (filePath.startsWith('./js/')) {
        // –î–ª—è —Ñ–∞–π–ª–æ–≤ –≤ js
        return '../src/utils/logger.js';
    } else if (filePath.startsWith('./public/')) {
        // –î–ª—è —Ñ–∞–π–ª–æ–≤ –≤ public
        return '../src/utils/logger.js';
    } else if (filePath.startsWith('./functions/')) {
        // –î–ª—è Cloud Functions
        return '../src/utils/logger.js';
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return './src/utils/logger.js';
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
function processFile(filePath) {
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ console.log
    if (!content.includes('console.log')) {
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç logger
    const hasLoggerImport = content.includes('import logger from') || 
                           content.includes('import { log') ||
                           content.includes('require.*logger');
    
    // –ó–∞–º–µ–Ω—è–µ–º console.log –Ω–∞ logger.log
    const newContent = content.replace(/console\.log/g, 'logger.log');
    
    if (newContent !== content) {
        modified = true;
        content = newContent;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç logger, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!hasLoggerImport) {
            const loggerPath = getLoggerImportPath(filePath);
            
            // –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
            // –ü–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            const importMatch = content.match(/^(import .* from .*;\n)+/m);
            if (importMatch) {
                const lastImportEnd = importMatch.index + importMatch[0].length;
                content = content.slice(0, lastImportEnd) + 
                         `import logger from '${loggerPath}';\n` +
                         content.slice(lastImportEnd);
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                const firstCodeLine = content.search(/^[^\/\*\n]/m);
                if (firstCodeLine > 0) {
                    content = content.slice(0, firstCodeLine) + 
                             `import logger from '${loggerPath}';\n\n` +
                             content.slice(firstCodeLine);
                } else {
                    content = `import logger from '${loggerPath}';\n\n` + content;
                }
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        fs.writeFileSync(filePath, content);
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${filePath}`);
        return true;
    }
    
    return false;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function processDirectory(dir) {
    let totalProcessed = 0;
    
    const files = fs.readdirSync(dir);
    
    for (const file of files) {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isDirectory() && !excludePatterns.some(p => filePath.includes(p))) {
            totalProcessed += processDirectory(filePath);
        } else if (stat.isFile() && shouldProcessFile(filePath)) {
            if (processFile(filePath)) {
                totalProcessed++;
            }
        }
    }
    
    return totalProcessed;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–º–µ–Ω—É console.log –Ω–∞ logger.log...\n');
    
    let totalProcessed = 0;
    
    for (const dir of searchDirs) {
        if (fs.existsSync(dir)) {
            console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${dir}`);
            totalProcessed += processDirectory(dir);
        }
    }
    
    console.log(`\n‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalProcessed}`);
    console.log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º!');
    console.log('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ console.error –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –µ—Å—Ç—å (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞—Ç—å)');
}

// –ó–∞–ø—É—Å–∫
main();